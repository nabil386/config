<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  
  This is the main ant build file for the Evidence Generator. It is called
  through the custom.xml files in the Webclient and EJBServer directories.
    
-->
<project
  basedir="."
  default="egtools.generate"
  name="egtools"
>


  <dirname
    file="${ant.file.egtools}"
    property="egtools.basedir"
  />
  <property file="${egtools.basedir}/egtools.properties"/>


  <!-- BEGIN, CR00092541, CD -->
  <property environment="env"/>


  <property
    location="${env.JAVA_HOME}"
    name="dev.jdk.home.dir"
  />


  <!-- BEGIN, CR00099487, DG -->
  <mkdir dir="${dir.evgen.tmp}"/>
  <!-- END, CR00099487 -->


  <!-- BEGIN, CR00098592, CD -->
  <!-- Replace all the spaces in SERVER_COMPONENT_ORDER with commas.
       We need to do this so that when iterating through the comma delimited list
       we don't get a space in front of the component name. -->
  <!-- BEGIN, CR00344305, CD -->
  <target name="init.server.component.order">
    <taskdef
      classname="curam.util.tools.AntStrings"
      classpath="${env.CURAMSDEJ}/lib/coreinf.jar:${env.CURAMSDEJ}/lib/tools.jar"
      name="string"
    />
    <string
      from="${env.SERVER_COMPONENT_ORDER},core"
      newchar=","
      oldchar=" "
      to="server.component.order"
      type="replace"
    />
  </target>


  <!-- END, CR00098592 -->


  <target name="antcontrib">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${project.lib}/ant-contrib.jar"/>
      </classpath>
    </taskdef>
  </target>
  <!-- END, CR00344305 -->
  <!-- END, CR00092541 -->


  <!--
        Main generate target for evidence generator. Generates all evidence for 
        client as well as serverside components.
    -->
  <target
    depends="init.server.component.order"
    description="Main generate target for evidence generator. Generates all evidence components."
    name="egtools.generate"
  >


    <!-- 
            Goes through all components with an evidence subdirectory, i.e
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00092541, CD -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="egtools.evidence.generate"
      />
    </antcall>
    <!-- END, CR00098592 -->


    <!-- BEGIN, CR00099157, DG -->
    <!--:Copy files from temp folder to correct build folder.  -->
    <!-- TODO: This needs to be removed when all projects using the generator have taken on -->
    <!-- AD tools version ADBuildTools_5_1_4 -->


    <mkdir dir="${dir.evgen.tmp}"/>
    <copy todir="${build.root}/svr/gen">
      <fileset dir="${dir.evgen.tmp}"/>
    </copy>


    <!-- END, CR00099157 -->


    <available
      file="${evidence.build.root}/Product.xml"
      property="products.xml.exists"
      type="file"
    />


    <antcall target="add.rootnode.to.products.xml"/>


    <antcall target="generate.resolve.scripts"/>
    <!-- END, CR00092541 -->


    <available
      file="${product.inf.xml}"
      property="inf.dir.exists"
      type="dir"
    />


    <antcall target="generate.curam2.xml"/>


    <antcall target="egtools.wizard.dmx"/>


  </target>


  <target
    description="Generate target for creation of AppResource.dmx for Create Wizard pages."
    name="egtools.wizard.dmx"
  >


    <!--  This section takes the INITIALAPPRESOURCE.dmx which is the first version of the
          APPRESOURCE.dmx used by the generate Create Wizard.             At this stage it has no table root element and no resourceID fields.
    -->


    <available
      file="${server.dir}/components/EvGen/data/initial/INITIALAPPRESOURCE.dmx"
      property="initialappresource.dmx.exists"
      type="file"
    />


    <!-- Add a root node to allow a transform to allocate the resourceID fields -->
    <antcall target="add.rootnode.to.initialappresource.dmx"/>


    <antcall target="egtools.assign.resourceID"/>


    <available
      file="${server.dir}/components/EvGen/data/initial/NOTABLEAPPRESOURCE.dmx"
      property="appresource.dmx.exists"
      type="file"
    />


    <!-- Create APPRESOURCE.dmx by adding the table root and footer -->
    <antcall target="add.rootnode.to.appresource.dmx"/>


    <!-- clean up temporary files -->
    <delete file="${server.dir}/components/EvGen/data/initial/NOTABLEAPPRESOURCE.dmx"/>
    <delete file="${server.dir}/components/EvGen/data/initial/INITIALAPPRESOURCE.dmx"/>


  </target>


  <target
    description="Allocate resourceID values for the Create Wizard AppResource.dmx."
    if="initialappresource.dmx.exists"
    name="egtools.assign.resourceID"
  >


    <!-- Allocate resourceID values -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.dir}/components/EvGen/data/initial/NOTABLEAPPRESOURCE.dmx'"/>
      <arg line="-XSL '${xslt.root}/CreateWizardProperties/AppResource.xslt'"/>
      <arg line="-OUT '${server.dir}/components/EvGen/data/initial/impl.gen'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>


    </java>


  </target>


  <!--===========================================================================================================-->


  <target
    depends="init.server.component.order, antcontrib"
    description="Generate target for server evidence generation"
    name="egtools.server.generate"
  >


    <!-- BEGIN, CR00094128, CD -->
    <!-- 
            Goes through all components with an evidence subdirectory, i.e
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="server.impl.inf.evidence.generate"
      />
    </antcall>
    <!-- END, CR00098592 -->


    <!-- BEGIN, CR00100135, POB -->
    <!--:Copy files from temp folder to correct build folder.  -->
    <!-- TODO: This needs to be removed when all projects using the generator have taken on -->
    <!-- AD tools version ADBuildTools_5_1_4 -->


    <mkdir dir="${dir.evgen.tmp}"/>
    <copy todir="${build.root}/svr/gen">
      <fileset dir="${dir.evgen.tmp}"/>
    </copy>
    <!-- END, CR00100135 -->


    <available
      file="${evidence.build.root}/Product.xml"
      property="products.xml.exists"
      type="file"
    />


    <antcall target="add.rootnode.to.products.xml"/>


    <antcall target="generate.resolve.scripts"/>
    <!-- END, CR00094128 -->


    <available
      file="${product.inf.xml}"
      property="inf.dir.exists"
      type="dir"
    />


    <antcall target="generate.curam2.xml"/>


    <antcall target="egtools.wizard.dmx"/>


  </target>


  <!--===========================================================================================================-->


  <target
    depends="init.server.component.order, evidenceArtifacts.uptodate, evidenceClientArtifacts.echo"
    description="Generate target for client evidence generation"
    name="egtools.client.generate"
    unless="evidenceClientBuild.notRequired"
  >


    <!-- 
            Goes through all components with an evidence subdirectory, i.e. 
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00092541, CD -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="client.evidence.generate"
      />
    </antcall>
    <!-- END, CR00098592 -->


    <available
      file="${evidence.build.root}/Product.xml"
      property="products.xml.exists"
      type="file"
    />


    <antcall target="add.rootnode.to.products.xml"/>


    <antcall target="generate.resolve.scripts"/>
    <!-- END, CR00092541 -->


    <touch file="${sysenv.SERVER_DIR}/build/svr/evidenceClientGenerated.marker"/>


  </target>


  <!--===========================================================================================================-->


  <!--
      Retrieves all generated inf files from individual components and merges into one Curam2.xml
      that will be used by the core appbuild generated/client targets.
    -->
  <target
    description="Merge all generated inf files from individual components into one Curam2.xml"
    if="inf.dir.exists"
    name="generate.curam2.xml"
  >


    <concat
      destfile="${inf.file}"
      fixlastline="yes"
    >
      <fileset
        dir="${product.inf.xml}"
        includes="*.xml"
      />
      <header file="${infgen.root}/Curam2Header.txt"/>
      <footer file="${infgen.root}/Curam2Footer.txt"/>
    </concat>


    <delete dir="${product.inf.xml}/gen.tmp"/>


  </target>


  <!--===========================================================================================================-->
  <!--
        Main clean target for evidence generator. Calls the on the EG Tool 
        to delete all generated components.
    -->
  <target
    depends="init.server.component.order, antcontrib"
    description="Calls the on the EG Tool to delete all generated components."
    name="egtools.clean"
  >


    <!-- 
            Goes through all components with an evidence subdirectory, i.e. 
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00094128, CD -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="egtools.evidence.clean"
      />
    </antcall>
    <!-- BEGIN, CR00098592, CD -->
    <!-- END, CR00094128 -->


    <!-- 
            Delete root evidence folder, contains built evidence metadata for all products. 
            Deleting this forces an evidence generate the next time a build is initiated. 
        -->
    <delete dir="${evidence.build.root}"/>


    <!--
            Delete generated infrastructure file.
        -->
    <delete file="${inf.file}"/>
    <delete file="${sysenv.SERVER_DIR}/build/svr/evidenceServerGenerated.marker"/>
    <delete file="${sysenv.SERVER_DIR}/build/svr/evidenceClientGenerated.marker"/>


  </target>


  <!--===========================================================================================================-->


  <!--
        Secondary clean target for evidence generator. Calls on the EG Tool to delete all generated 
        components on the server.
    -->
  <target
    depends="init.server.component.order, antcontrib"
    description="Calls on the EG Tool to delete all generated components on the server."
    name="egtools.server.clean"
  >


    <!-- 
            Goes through all components with an evidence subdirectory, i.e. 
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00094128, CD -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="server.evidence.clean"
      />
    </antcall>
    <!-- END, CR00098592 -->
    <!-- END, CR00094128 -->


  </target>


  <!--===========================================================================================================-->


  <!--
        Secondary clean target for evidence generator. Calls on the EG Tool to delete all generated 
        components on the client.
    -->
  <target
    depends="init.server.component.order, antcontrib"
    description="Calls on the EG Tool to delete all generated client evidence screens on the product."
    name="egtools.client.clean"
  >


    <!-- 
            Goes through all components with an evidence subdirectory, i.e. 
            ../EJBServer/components/{ProductName}/evidence/.. .
            The directory (ProductName) above the evidence will be used as the 
            basedir for the ${project.root}/build.xml. 
        -->
    <!-- BEGIN, CR00094128, CD -->
    <!-- BEGIN, CR00098592, CD -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="client.evidence.clean"
      />
    </antcall>
    <!-- END, CR00098592 -->
    <!-- END, CR00094128 -->


    <delete file="${sysenv.SERVER_DIR}/build/svr/evidenceClientGenerated.marker"/>


  </target>


  <!-- BEGIN, CR00092541, CD -->
  <!--===========================================================================================================-->
  <!--
        Product.xml gets appended to by each product's evidence generation. This adds the root node 'products'.
    -->
  <target
    description="Product.xml gets appended to by each product's evidence generation. This adds the root node 'products'."
    if="products.xml.exists"
    name="add.rootnode.to.products.xml"
  >
    <concat destfile="${evidence.build.root}/Products.xml">
      <header
        filtering="no"
        trimleading="yes"
      >&lt;?xml version="1.0" encoding="UTF-8"?&gt;   
&lt;products&gt;   
      </header>
      <path path="${evidence.build.root}/Product.xml"/>
      <footer
        filtering="no"
        trimleading="yes"
      >
&lt;/products&gt;</footer>
    </concat>
  </target>


  <!--===========================================================================================================-->
  <!--
    INITIALAPPRESOURCE.dmx gets appended to by each product's evidence generation. 
    This adds the root node to make a valid xml file for further processing.
    -->
  <target
    description="INITIALAPPRESOURCE.dmx gets appended to by each product's evidence generation. This adds a root node to make a valid xml file "
    if="initialappresource.dmx.exists"
    name="add.rootnode.to.initialappresource.dmx"
  >
    <concat destfile="${server.dir}/components/EvGen/data/initial/NOTABLEAPPRESOURCE.dmx">
      <header file="${infgen.root}/AppResourceHeader.txt"/>
      <path path="${server.dir}/components/EvGen/data/initial/INITIALAPPRESOURCE.dmx"/>
      <footer file="${infgen.root}/AppResourceFooter.txt"/>
    </concat>
  </target>


  <!--
    NOTABLEAPPRESOURCE.dmx includes the resource identifier entries.
    This adds the root node 'table' to create the APPRESOURCE.dmx.
  -->
  <target
    description="APPRESOURCE.dmx gets appended to by each product's evidence generation. This adds the root node 'table'."
    if="appresource.dmx.exists"
    name="add.rootnode.to.appresource.dmx"
  >
    <concat destfile="${server.dir}/components/EvGen/data/initial/APPRESOURCE.dmx">
      <header file="${infgen.root}/AppResourceHeader.txt"/>
      <path path="${server.dir}/components/EvGen/data/initial/NOTABLEAPPRESOURCE.dmx"/>
      <footer file="${infgen.root}/AppResourceFooter.txt"/>
    </concat>
  </target>


  <!--===========================================================================================================-->
  <!--
      Calls any XSLT transformations that require the cross products summary defined in Products.xml.
    -->
  <target
    description="Calls any XSLT transformations that require the cross products summary defined in Products.xml"
    if="products.xml.exists"
    name="generate.resolve.scripts"
  >


    <!-- Set the default project properties TSTAMP, DSTAMP and TODAY -->
    <tstamp/>


    <property environment="env"/>


    <property
      location="${env.JAVA_HOME}"
      name="dev.jdk.home.dir"
    />


    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveCreate.xslt"
      />


    </antcall>


    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveHistoryRecord.xslt"
      />


    </antcall>


    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveWorkspace.xslt"
      />


    </antcall>


    <!-- BEGIN, CR00219910, CD -->
    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveObject.xslt"
      />


    </antcall>
    <!-- END, CR00219910 -->


    <!-- BEGIN, CR00, CD -->
    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveObjectIssues.xslt"
      />


    </antcall>


    <antcall target="call.egtools.transformer">


      <param
        name="gen.path"
        value="${evidence.build.root}/crossproductui"
      />
      <param
        name="component.dir"
        value="userinterface.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/UserInterface/Evidence_resolveObjectVerifications.xslt"
      />


    </antcall>
    <!-- END, CR00 -->


  </target>


  <!--===========================================================================================================-->
  <!--
    This target calls the XSLT transformer directly. This is done to ensure we are calling the transformer of
    our choice, in this case the xalan-2.6.0.jar. Moreover, we keep a copy of this jar in our lib directory to
    ensure the generator is unaffected by future upgrades.
  -->
  <target
    description="Calls on the XSLT transformer"
    name="call.egtools.transformer"
  >


    <available
      file="${gen.path}"
      property="dirExists"
      type="dir"
    />


    <antcall target="makedir">
      <param
        name="fileExist"
        value="${dirExists}"
      />
      <param
        name="dirName"
        value="${gen.path}"
      />
    </antcall>


    <property
      name="destinationDir"
      value="${gen.path}/${component.dir}"
    />


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${evidence.build.root}/Products.xml'"/>
      <arg line="-XSL '${xslt.file}'"/>
      <arg line="-OUT '${destinationDir}'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>


    </java>


  </target>


  <!--===========================================================================================================-->
  <!--
    This target simply creates a directory structure based on the parameter dirName if the param
    property fileExists is true. This is useful when we are generating for the first time or after
    a clean when the directory in question may not exist
  -->
  <target
    description="Creates directory structure for an evidenceEntities.xml file in the EJBServer/build folder if none exists. Should only be necessary if an appbuild clean has been performed"
    name="makedir"
    unless="$fileExist"
  >


    <mkdir dir="${dirName}"/>


  </target>
  <!-- END, CR00092541 -->


  <!-- BEGIN, CR00098592, CD -->
  <!--==========================================================================================================-->
  <!--
     Goes through all components
  -->
  <target
    description="Goes through all components"
    name="build.all.component.dirs"
  >


    <!-- For all component dirs in the component order -->
    <for
      delimiter=","
      list="${server.component.order}"
      param="component"
    >


      <sequential>


        <antcall target="build.all.evidence.dirs">
          <param
            name="component"
            value="@{component}"
          />
        </antcall>


      </sequential>
    </for>


  </target>


  <!--==========================================================================================================-->
  <!--
     Checks a component directory exists and checks if the component is 'custom'
  -->
  <target name="check.component.details">
    <available
      file="${product.components.root}/${component}"
      property="${component}.exists"
      type="dir"
    />
    <!-- BEGIN, CR00100251, CD -->
  </target>


  <!--==========================================================================================================-->
  <!--
     Goes through all evidence directories
  -->
  <target
    depends="check.component.details"
    description="Goes through all evidence directories"
    if="${component}.exists"
    name="build.all.evidence.dirs"
  >


    <!-- get all evidence dirs in a list -->
    <pathconvert
      pathsep=","
      property="evidence.dir.list"
      setonempty="true"
    >
      <path>
        <dirset
          dir="${product.components.root}/${component}/"
          includes="**/evidence"
        />
      </path>
    </pathconvert>


    <echo level="debug">evidence.build.target=${evidence.build.target}</echo>
    <echo level="debug">evidence.dir.list=${evidence.dir.list}</echo>


    <for
      delimiter=","
      list="${evidence.dir.list}"
      param="evidenceProduct"
    >


      <sequential>


        <!-- subant call to copy evidence metadata to build dir -->
        <subant
          genericantfile="${project.root}/build.xml"
          inheritall="true"
          target="evidence.build"
        >
          <dirset
            dir="@{evidenceProduct}\..\"
            includes="evidence"
          />
          <property
            name="antTarget"
            value="copy.ootb.metadata.to.build.dir"
          />
        </subant>


        <!-- main subant call to generate/clean/etc -->
        <subant
          genericantfile="${project.root}/build.xml"
          inheritall="true"
          target="evidence.build"
        >


          <dirset
            dir="@{evidenceProduct}\..\"
            includes="evidence"
          />


          <!-- Inform evidence.build which target to call -->
          <property
            name="antTarget"
            value="${evidence.build.target}"
          />
          <!-- END, CR00100251, CD -->


        </subant>


      </sequential>
    </for>


  </target>
  <!-- END, CR00098592 -->


  <!-- BEGIN, CR00129389, POB -->
  <!--===========================================================================================================-->
  <!--
        Calls the on the EG Tool to perform any steps required after the modelgen.
    -->
  <target
    depends="init.server.component.order"
    description="Calls the on the EG Tool to perform any steps required after the modelgen."
    if="evidencebroker.installed"
    name="post.modelgen"
  >


    <condition
      property="test.evidencebroker.installed"
      value="true"
    >
      <equals
        arg1="${evidencebroker.installed}"
        arg2="true"
      />
    </condition>


    <antcall target="build.evidencebroker.resources"/>


  </target>


  <target
    description="Builds the evidencebroker resources for domains and labels"
    if="test.evidencebroker.installed"
    name="build.evidencebroker.resources"
  >
    <!-- 
      Goes through all components with an evidence subdirectory, i.e. 
      ../EJBServer/components/{ProductName}/evidence/.. .
      The directory (ProductName) above the evidence will be used as the 
      basedir for the ${project.root}/build.xml. 
    -->
    <antcall target="build.all.component.dirs">
      <param
        name="evidence.build.target"
        value="evidence.domain.properties"
      />
    </antcall>
  </target>
  <!-- END, CR00129389 -->


  <!-- BEGIN, CR00190139, POB -->
  <target
    name="evidenceArtifacts.uptodate"
    unless="disable.uptodate.check"
  >
    <!-- BEGIN, CR00344305, CD -->
    <uptodate
      property="evidenceServerBuild.notRequired"
      targetfile="${sysenv.SERVER_DIR}/build/svr/evidenceServerGenerated.marker"
    >
      <srcfiles
        dir="${product.components.root}"
        includes="*/evidence/**/*.*"
      />
    </uptodate>


    <uptodate
      property="evidenceClientBuild.notRequired"
      targetfile="${sysenv.SERVER_DIR}/build/svr/evidenceClientGenerated.marker"
    >
      <srcfiles
        dir="${product.components.root}"
        includes="*/evidence/**/*.*"
      />
    </uptodate>


    <available
      file="evidence"
      property="evidence.file.found"
      type="dir"
    >
      <filepath>
        <dirset dir="${product.components.root}">
          <include name="*"/>
        </dirset>
      </filepath>
    </available>
  </target>


  <target
    if="evidenceServerBuild.notRequired"
    name="evidenceServerArtifacts.echo"
  >
    <echo
      level="info"
      message="Skipping Evidence generation because all files are up-to-date."
    />
  </target>


  <target
    if="evidenceClientBuild.notRequired"
    name="evidenceClientArtifacts.echo"
  >
    <echo
      level="info"
      message="Skipping Evidence generation because all files are up-to-date."
    />
  </target>
  <!-- END, CR00344305 -->


  <!--
    Generates evidence server files, i.e. impl and inf.
  -->
  <target
    depends="evidenceArtifacts.uptodate, evidenceServerArtifacts.echo"
    if="evidence.file.found"
    name="evidence.server.generated"
    unless="evidenceServerBuild.notRequired"
  >


    <antcall target="egtools.server.generate"/>
    <available
      file="${sysenv.SERVER_DIR}/build/Curam2.xml"
      property="generator.options"
      value="${sysenv.SERVER_DIR}/build/Curam2.xml"
    />


  </target>


  <target
    depends="antcontrib, evidenceArtifacts.uptodate, evidenceServerArtifacts.echo"
    name="evidence.post.modelgen"
    unless="evidenceServerBuild.notRequired"
  >


    <!-- check if the SERVER_COMPONENT_ORDER contains the value, EvidenceBroker -->
    <condition
      property="evidencebroker.installed"
      value="true"
    >
      <and>
        <contains
          string="${sysenv.SERVER_COMPONENT_ORDER}"
          substring="EvidenceBroker"
        />


        <available
          file="evidence"
          type="dir"
        >
          <filepath>
            <dirset dir="${product.components.root}">
              <include name="*"/>
            </dirset>
          </filepath>
        </available>
      </and>
    </condition>


    <antcall target="post.modelgen">
      <param
        name="evidencebroker.installed"
        value="${evidencebroker.installed}"
      />
    </antcall>


    <touch file="${sysenv.SERVER_DIR}/build/svr/evidenceServerGenerated.marker"/>


  </target>
  <!-- END, CR00190139 -->
</project>
