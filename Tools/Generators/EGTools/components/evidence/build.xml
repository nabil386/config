<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed Materials - Property of IBM

PID 5725-H26

Copyright IBM Corporation 2010-2023. All Rights Reserved.

US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant build file for Evidence products.
  This file is broadly organised into the following sections:

  GENERATE        - Generate targets for server, inf and client files.

  CLEAN           - Clean targets for generated server,inf and client files.

  UPDATE          - Update target checks for server, inf and client files.

  UTILITIY        - Common targets, used by all sections.

-->
<project
  default="evidence.build"
  name="egtools.evidence"
>


  <dirname
    file="${ant.file.egtools.evidence}"
    property="egtools.evidence.basedir"
  />


  <property file="${product.properties.file}"/>


  <!-- BEGIN, CR00195292. POB -->
  <property file="${env.CURAMSDEJ}/lib/third_party_version.properties"/>


  <property
    name="commons_beanutils_jar"
  	value="${env.CURAMSDEJ}/lib/commons-beanutils-${version-commons-beanutils}.jar"
  />
	
	
  <property
    name="commons_collections_jar"
  	value="${env.CURAMSDEJ}/lib/commons-collections-${version-commons-collections}.jar"
  />


  <property
    name="commons_logging_jar"
    value="${env.CURAMSDEJ}/lib/commons-logging-${version-commons-logging}.jar"
  />


  <property
    name="commons_lang_jar"
    value="${env.CURAMSDEJ}/lib/commons-lang-${version-commons-lang}.jar"
  />
	
  <property
    name="commons_text_jar"
    value="${env.CURAMSDEJ}/lib/commons-text-${version-commons-text}.jar"
  />
  <!-- END, CR00195292 -->


  <property
    name="EvGenTasksJar"
    value="${project.lib}/EvGenTask.jar"
  />


  <!-- BEGIN, CR00098592, CD -->
  <property
    name="product.evidence.dir"
    value="${basedir}"
  />
  <!-- END, CR00098592 -->


  <!-- Set the default project properties TSTAMP, DSTAMP and TODAY -->
  <tstamp/>


  <!-- BEGIN, CR00100251, CD -->
  <property
    name="build.server.metadata"
    value="${product.evidence.build.root}/metadata/server"
  />
  <property
    name="build.product.metadata"
    value="${product.evidence.build.root}/metadata/product"
  />
  <property
    name="build.integrated.metadata"
    value="${product.evidence.build.root}/metadata/integrated"
  />
  <!-- END, CR00100251, CD -->


  <!-- ************************  INITIALISATION TARGETS     ************************ -->
  <!-- 
    Checks if the component is called evidence and decides the package structure accordingly 
  -->
  <target
    depends="check.product.ejb.package.is.evidence, set.product.custom.impl.dir.ifevidence, set.product.custom.impl.dir.ifnotevidence"
    name="init"
  />


  <target
    description="Checks if the component is called evidence"
    name="check.product.ejb.package.is.evidence"
  >


    <condition property="product.ejb.package.is.evidence">
      <equals
        arg1="evidence"
        arg2="${product.ejb.package}"
        casesensitive="true"
        trim="false"
      />
    </condition>


  </target>


  <target
    description="Sets the package structure, if the component is called evidence."
    if="product.ejb.package.is.evidence"
    name="set.product.custom.impl.dir.ifevidence"
  >


    <!-- BEGIN, CR00319240, CD -->
    <property
      name="product.custom.classpath"
      value="curam/evidence"
    />


    <property
      name="custom.custom.classpath"
      value="curam/custom/evidence"
    />
    <!-- END, CR00319240 -->


    <property
      name="product.custom.impl.dir"
      value="${product.component.root}/source/curam/evidence"
    />


    <!-- BEGIN, CR00100405, CD -->
    <property
      name="custom.custom.impl.dir"
      value="${product.components.root}/custom/source/curam/custom/evidence"
    />
    <!-- END, CR00100405 -->


    <!-- BEGIN, CR00099487, DG -->
    <property
      name="build.source.root"
      value="${dir.evgen.tmp}/curam/evidence"
    />
    <!-- END, CR00099487 -->


    <!-- BEGIN, CR00300852, CD -->
    <property
      name="dir.custom.source.tmp"
      value="${evidence.build.root}/temp_custom/curam/evidence"
    />
    <!-- END, CR00300852 -->


    <!-- BEGIN, CR00129392, POB -->
    <property
      name="broker.properties.dir"
      value="${build.root}/svr/cls/curam/evidence"
    />
    <!-- END, CR00129392 -->


    <!-- BEGIN, CR00310426, CD -->
    <property
      name="dir.unzipped.source.tmp"
      value="${product.evidence.build.root}/unzipped/curam/evidence"
    />
    <!-- END, CR00310426 -->


  </target>


  <target
    description="Sets the package structure, if the component is not called evidence."
    name="set.product.custom.impl.dir.ifnotevidence"
    unless="product.ejb.package.is.evidence"
  >


    <!-- BEGIN, CR00319240, CD -->
    <property
      name="product.custom.classpath"
      value="curam/${product.ejb.package}/evidence"
    />


    <property
      name="custom.custom.classpath"
      value="curam/custom/${product.ejb.package}/evidence"
    />
    <!-- END, CR00319240 -->


    <property
      name="product.custom.impl.dir"
      value="${product.component.root}/source/curam/${product.ejb.package}/evidence"
    />


    <!-- BEGIN, CR00100405, CD -->
    <property
      name="custom.custom.impl.dir"
      value="${product.components.root}/custom/source/curam/custom/${product.ejb.package}/evidence"
    />
    <!-- END, CR00100405 -->


    <!-- BEGIN, CR00099487, DG -->
    <property
      name="build.source.root"
      value="${dir.evgen.tmp}/curam/${product.ejb.package}/evidence"
    />
    <!-- END, CR00099487 -->


    <!-- BEGIN, CR00300852, CD -->
    <property
      name="dir.custom.source.tmp"
      value="${evidence.build.root}/temp_custom/curam/${product.ejb.package}/evidence"
    />
    <!-- END, CR00300852 -->


    <!-- BEGN, CR00129392, POB -->
    <property
      name="broker.properties.dir"
      value="${build.root}/svr/cls/curam/${product.ejb.package}/evidence"
    />
    <!-- END, CR00129392 -->


    <!-- BEGIN, CR00310426, CD -->
    <property
      name="dir.unzipped.source.tmp"
      value="${product.evidence.build.root}/unzipped/curam/${product.ejb.package}/evidence"
    />
    <!-- END, CR00310426 -->


  </target>


  <!-- BEGIN, CR00098592, CD -->
  <!-- BEGIN, CR00094128, CD -->
  <!-- BEGIN, CR00090430, POB -->
  <!-- 
    Checks to see if the evidence.properties file exists for this product and if so is the 
    product.build.option set to true  and whether any EUIM files exist
  -->
  <target
    depends="check.product.euims.exist, check.integratedCase.euims.exist"
    description="Decides whether or not to build this product"
    name="check.evidence.files.exist"
  >


    <condition property="build.product">
      <and>
        <available file="${product.properties.file}"/>
        <!-- BEGIN, CR00100405, CD -->
        <not>
          <isset property="override.product"/>
        </not>
        <!-- END, CR00100405 -->
        <contains
          casesensitive="No"
          string="${product.build.option}"
          substring="true"
        />
        <or>
          <isset property="product.euims.exist"/>
          <isset property="integratedCase.euims.exist"/>
        </or>
      </and>
    </condition>


    <!-- BEGIN, CR00100405, CD -->
    <echo level="debug">check.evidence.files.exist :- caseType.product.metadata=${caseType.product.metadata}</echo>
    <echo level="debug">check.evidence.files.exist :- caseType.integratedCase.metadata=${caseType.integratedCase.metadata}</echo>


    <echo level="debug">check.evidence.files.exist :- product.euims.exist=${product.euims.exist}</echo>
    <echo level="debug">check.evidence.files.exist :- integratedCase.euims.exist=${integratedCase.euims.exist}</echo>


    <echo level="debug">check.evidence.files.exist :- product.properties.file=${product.properties.file}</echo>
    <echo level="debug">check.evidence.files.exist :- product.build.option=${product.build.option}</echo>
    <echo level="debug">check.evidence.files.exist :- override.product=${override.product}</echo>
    <echo level="debug">check.evidence.files.exist :- build.product=${build.product}</echo>
    <!-- END, CR00100405 -->


  </target>
  <!-- END, CR00090430 -->


  <!-- 
    Checks to see if any Product level EUIM evidence files exists.
  -->
  <target name="check.product.euims.exist">


    <condition property="product.euims.exist">
      <and>
        <!-- check the metadata dir exist -->
        <available
          file="${caseType.product.metadata}"
          property="caseType.product.metadata.dirExists"
          type="dir"
        />
        <!-- check the euims exist -->
        <resourcecount
          count="0"
          when="ne"
        >
          <fileset dir="${caseType.product.metadata}">
            <include name="*.euim"/>
          </fileset>
        </resourcecount>
      </and>
    </condition>


  </target>


  <!-- 
    Checks to see if any IntegratedCase level EUIM evidence files exists.
  -->
  <target name="check.integratedCase.euims.exist">


    <condition property="integratedCase.euims.exist">
      <and>
        <!-- check the metadata dir exist -->
        <available
          file="${caseType.integratedCase.metadata}"
          property="caseType.integratedCase.metadata.dirExists"
          type="dir"
        />
        <!-- check the euims exist -->
        <resourcecount
          count="0"
          when="ne"
        >
          <fileset dir="${caseType.integratedCase.metadata}">
            <include name="*.euim"/>
          </fileset>
        </resourcecount>
      </and>
    </condition>


  </target>
  <!-- END, CR00098592 -->


  <!-- **********************  END OF INITIALISATION TARGETS     ********************** -->
  <!-- END, CR00094128 -->


  <!--
      Main public target for build, called from external build script, initiates evidence generation
  -->
  <target
    depends="init, check.evidence.files.exist"
    description="Sets option to build/clean products evidence and calls target specified"
    if="build.product"
    name="evidence.build"
  >


    <!-- BEGIN, CR00100405, CD -->
    <echo level="debug">ENTERING SUBANT evidence.build -&gt; '${antTarget}'</echo>


    <!-- Call target specified through antTarget property in main build subant call -->
    <antcall target="${antTarget}"/>


    <echo level="debug">EXITING SUBANT evidence.build -&gt; '${antTarget}'</echo>
    <!-- END, CR00100405 -->


  </target>


  <!-- ***************************     GENERATE TARGETS     *************************** -->


  <!--
    This is the main target in the evidence generator which controls the flow of the build i.e.
    calling other targets in sequence. The evidence is built if the build.product in the products
    evidence.properties is set and files are not up to date.
  -->
  <target
    description="Generates evidence from the metadata."
    if="build.product"
    name="egtools.evidence.generate"
  >


    <!--
      Set the root.dir to basedir, basedir is context based and controlled by the subant
      task called through the EGTools build.xml. As each product is visited, the
      basedir is set relative to the product.
      e.g. basedir = EJBServer\components\SampleEGProduct\evidence
    -->
    <property
      name="root.dir"
      value="${basedir}"
    />


    <!-- Call generate targets -->
    <antcall target="server.impl.inf.evidence.generate"/>
    <!-- BEGIN, CR00098722, CD -->
    <!-- Removing call to client generation as it should only happen during a client build
    <antcall target="client.evidence.generate"/>
    -->
    <!-- END, CR00098722 -->


  </target>


  <!--===========================================================================================================-->


  <!--
    This target generates all server related evidence files. Should only be called when either
    a new EUIM or server xml file is added or a change is made to an existing one.
  -->
  <target
    depends="checkServerEvidenceEntityFilesExist,checkIsServerUpdateNeeded"
    description="Generates server evidence from the metadata."
    if="build.product"
    name="server.impl.inf.evidence.generate"
    unless="serverUpToDate"
  >


    <!--
      Set the root.dir to basedir, basedir is context based and controlled by the subant
      task called through the EGTools build.xml. As each product is visited, the
      basedir is set relative to the product.
      e.g. basedir = EJBServer\components\SampleEGProduct\evidence
    -->
    <property
      name="root.dir"
      value="${basedir}"
    />


    <!-- Call client generate targets -->
    <antcall target="server.evidence.generate"/>


    <!--
      Remove serverset of EUIM's. Do this here in case at some point the user removes an EUIM from
      either the Product or Integrated directory. By removing the serverset of EUIM's after each
      server build we ensure that the next time the generator is run and a serverset of EUIM's is built
      it will only contain EUIM's that currently exist
    -->
    <delete>


      <fileset dir="${build.server.metadata}">
        <exclude name="*.xml"/>
      </fileset>


    </delete>


  </target>


  <!-- BEGIN, CR00100251, CD -->
  <target
    name="copy.ootb.metadata.to.build.dir"
    unless="override.product"
  >


    <!-- BEGIN, CR00100999, CD -->
    <mkdir dir="${product.evidence.build.root}/properties"/>
    <mkdir dir="${product.evidence.build.root}/metadata/product"/>
    <mkdir dir="${product.evidence.build.root}/metadata/integrated"/>
    <mkdir dir="${product.evidence.build.root}/metadata/server"/>


    <!-- BEGIN, CR00353709, CD -->
    <script language="javascript">
	var productName = project.getProperty( "product.name" );
	var commaProductNameUnderscore = "," + productName + "_";
    project.setProperty( "reverse.locale.list", productName + commaProductNameUnderscore + project.getProperty( "env.LOCALE_LIST" )
      .toString().split( "," ).reverse( ).join( commaProductNameUnderscore ) );
	</script>


    <for
      delimiter=","
      list="${reverse.locale.list}"
      param="product.name.locale"
    >
      <sequential>
        <antcall target="copy.ootb.metadata.to.build.dir.all.locales">
          <param
            name="metadata.source"
            value="${product.components.root}/@{product.name.locale}/evidence"
          />
        </antcall>
      </sequential>
    </for>


    <!-- BEGIN, CR00100405, CD -->
    <!-- antcall override.metadata.with.custom -->
    <antcall target="override.metadata.with.custom"/>


  </target>
  <!-- END, CR00100251, CD -->


  <target name="copy.ootb.metadata.to.build.dir.all.locales">


    <!-- Properties -->
    <copy
      preservelastmodified="true"
      todir="${product.evidence.build.root}/properties"
    >
      <fileset
        dir="${metadata.source}/properties"
        erroronmissingdir="false"
      >
        <include name="*.properties"/>
      </fileset>
    </copy>
    <!-- END, CR00100999 -->


    <!-- Product Metadata -->
    <copy
      preservelastmodified="true"
      todir="${product.evidence.build.root}/metadata/product"
    >
      <fileset
        dir="${metadata.source}/product/metadata"
        erroronmissingdir="false"
      >
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>


    <!-- IC Metadata -->
    <copy
      preservelastmodified="true"
      todir="${product.evidence.build.root}/metadata/integrated"
    >
      <fileset
        dir="${metadata.source}/integrated/metadata"
        erroronmissingdir="false"
      >
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>


    <!-- Server Metadata -->
    <copy
      preservelastmodified="true"
      todir="${product.evidence.build.root}/metadata/server"
    >
      <fileset
        dir="${metadata.source}/server/metadata"
        erroronmissingdir="false"
      >
        <include name="*.xml"/>
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>
  </target>
  <!-- END, CR00353709, CD -->


  <target name="override.metadata.with.custom">


    <!-- get all evidence dirs in a list -->
    <pathconvert
      pathsep=","
      property="custom.evidence.dir.list"
      setonempty="true"
    >
      <path>
        <dirset
          dir="${product.components.root}/custom/"
          includes="**/evidence"
        />
      </path>
    </pathconvert>


    <echo level="debug">override.metadata.with.custom :- evidence.build.target=${evidence.build.target}</echo>
    <echo level="debug">override.metadata.with.custom :- custom.evidence.dir.list=${custom.evidence.dir.list}</echo>
    <echo level="debug">override.metadata.with.custom :- caseType.product.metadata=${caseType.product.metadata}</echo>
    <echo level="debug">override.metadata.with.custom :- caseType.integratedCase.metadata=${caseType.integratedCase.metadata}</echo>


    <for
      delimiter=","
      list="${custom.evidence.dir.list}"
      param="evidenceProduct"
    >


      <sequential>


        <!-- subant call to copy custom metadata to build dir -->
        <subant
          genericantfile="${project.root}/build.xml"
          inheritall="false"
          target="copy.custom.metadata.to.build.dir"
        >
          <dirset
            dir="@{evidenceProduct}\..\"
            includes="evidence"
          />
          <property
            name="productName"
            value="${product.name}"
          />
          <property
            name="productPropertiesFile"
            value="${product.properties.file}"
          />
          <property
            name="evidenceBuildRoot"
            value="${evidence.build.root}"
          />
        </subant>


      </sequential>


    </for>


  </target>


  <target
    depends="set.custom.properties, check.override.this.product"
    if="override.this.product"
    name="copy.custom.metadata.to.build.dir"
  >


    <!-- BEGIN, CR00100999, CD -->
    <!-- Properties -->
    <copy
      overwrite="true"
      preservelastmodified="true"
      todir="${evidenceBuildRoot}/${product.prefix}/properties/"
      verbose="false"
    >
      <fileset dir="${properties.home}">
        <include name="*.properties"/>
      </fileset>
    </copy>
    <!-- END, CR00100999 -->


    <!-- Product Metadata -->
    <copy
      overwrite="true"
      preservelastmodified="true"
      todir="${evidenceBuildRoot}/${product.prefix}/metadata/product"
      verbose="false"
    >
      <fileset dir="${caseType.product.metadata}">
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>


    <!-- IC Metadata -->
    <copy
      overwrite="true"
      preservelastmodified="true"
      todir="${evidenceBuildRoot}/${product.prefix}/metadata/integrated"
      verbose="false"
    >
      <fileset dir="${caseType.integratedCase.metadata}">
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>


    <!-- Server Metadata -->
    <copy
      overwrite="true"
      preservelastmodified="true"
      todir="${evidenceBuildRoot}/${product.prefix}/metadata/server"
      verbose="false"
    >
      <fileset dir="${server.metadata}">
        <include name="*.xml"/>
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>
    </copy>


  </target>


  <target
    description="Checks whether or not this custom product overrides the current ootb one"
    name="check.override.this.product"
  >


    <echo level="debug">check.override.this.product :- productName = ${productName}</echo>
    <echo level="debug">check.override.this.product :- override.product = ${override.product}</echo>


    <condition property="override.this.product">
      <and>
        <isset property="override.product"/>
        <equals
          arg1="${productName}"
          arg2="${override.product}"
          casesensitive="true"
          trim="false"
        />
      </and>
    </condition>


    <echo level="debug">check.override.this.product :- override.this.product = ${override.this.product}</echo>


  </target>


  <target
    description="Imports custom properties file and sets up some other properties"
    name="set.custom.properties"
  >


    <echo level="debug">set.custom.properties :- evidenceBuildRoot = ${evidenceBuildRoot}</echo>
    <echo level="debug">set.custom.properties :- productPropertiesFile = ${productPropertiesFile}</echo>


    <property
      name="evidence.build.root"
      value="${evidenceBuildRoot}"
    />


    <property
      name="product.properties.file"
      value="${productPropertiesFile}"
    />


    <!-- all the project level properties should be reset here -->
    <dirname
      file="${ant.file.egtools.evidence}"
      property="egtools.evidence.basedir"
    />


    <property file="${product.properties.file}"/>


    <property
      name="product.evidence.dir"
      value="${basedir}"
    />


    <tstamp/>


    <property
      name="build.server.metadata"
      value="${product.evidence.build.root}/metadata/server"
    />
    <property
      name="build.product.metadata"
      value="${product.evidence.build.root}/metadata/product"
    />
    <property
      name="build.integrated.metadata"
      value="${product.evidence.build.root}/metadata/integrated"
    />


    <echo level="debug">set.custom.properties :- ant.file.egtools.evidence = ${ant.file.egtools.evidence}</echo>
    <echo level="debug">set.custom.properties :- product.properties.file = ${product.properties.file}</echo>
    <echo level="debug">set.custom.properties :- basedir = ${basedir}</echo>
    <echo level="debug">set.custom.properties :- product.evidence.build.root = ${product.evidence.build.root}</echo>


  </target>
  <!-- END, CR00100405 -->


  <!--===========================================================================================================-->


  <!--
    This target generates all client related evidence files. Should only be called when either
    a new EUIM file is added to the Integrated/Product directory or a change is made to an existing one.
  -->
  <target
    depends="checkIsClientUpToDate"
    description="Generates client evidence from the metadata."
    if="build.product"
    name="client.evidence.generate"
    unless="clientFilesUpToDate"
  >


    <!--
      Set the root.dir to basedir, basedir is context based and controlled by the subant
      task called through the EGTools build.xml. As each product is visited, the
      basedir is set relative to the product.
    -->
    <property
      name="root.dir"
      value="${basedir}"
    />


    <!-- Call client generate targets -->
    <antcall target="integratedClient.evidence.generate"/>
    <antcall target="productClient.evidence.generate"/>


  </target>


  <!--===========================================================================================================-->


  <!--
       This target generates all server related files such as impl layers and
       infrastructure (i.e. Curam2.xml). Should only be called when a new EUIM
       file is added to either Product or Integrated directory, a change is
       made to the model and is reflected in the server evidence entities metadata
       xml files or a change is made to an EUIM which can affect server side
       implementation i.e. a new attribute is added that has a metatype associated
       with CaseParticipant. NOTE: if the EUIM file is present in both the
       Integrated and Product folders the client must ensure to update this type
       of change in each to reflect the change on the model. This also means that
       we will always have the latest version of the EUIM file changed in the
       server folder regardless of which case type folder it was copied from and
       therefore should always rebuild when necessary.
  -->
  <target
    description="Generates server specific files from metadata."
    name="server.evidence.generate"
  >


    <!--
      Check if model server directory exists, if not create directory structure
     -->
    <antcall target="makedir">


      <param
        name="fileExist"
        value="${serverfileExist}"
      />
      <param
        name="dirName"
        value="${server.evidence}"
      />


    </antcall>


    <!-- Call digestor for Server evidenceEntities.xml -->
    <antcall target="run.digestor">


      <param
        name="euimDir"
        value="euims=${build.server.metadata}"
      />
      <param
        name="entityDestDir"
        value="evidfile=${server.evidence}/EvidenceEntities.xml"
      />


    </antcall>


    <!--
        Generate temporary files containing imports information.
    -->
    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.evidence.build.root}/gen.tmp/imports/service"
      />
      <param
        name="component.dir"
        value="servicelayer.imports"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/ServiceLayerImports.xslt"
      />


    </antcall>


    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.evidence.build.root}/gen.tmp/imports/entity"
      />
      <param
        name="component.dir"
        value="entitylayer.imports"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/EntityLayerImports.xslt"
      />


    </antcall>


    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.evidence.build.root}/gen.tmp/imports/facade"
      />
      <param
        name="component.dir"
        value="facadelayer.imports"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/FacadeLayerImports.xslt"
      />


    </antcall>


    <!--
        Generate the source code files that are once off generates, only adding new files
        or deleting obsolete files where applicable.
    -->


    <mkdir dir="${product.custom.impl.dir}/temp/service/impl"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/CreateValidationMessageFile.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/msg.gen'"/>
      <arg line="-PARAM messageDir '${product.component.root}/message/'"/>
      <!-- BEGIN, CR00319240, CD -->
      <arg line="-PARAM date ${DSTAMP}"/>
      <!-- END, CR00319240 -->
    </java>


    <mkdir dir="${server.dir}/components/EvGen/message"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/CreateGenericMessageFile.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/msg.gen'"/>
      <!-- BEGIN, CR00353709, CD -->
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <!-- END, CR00353709, CD -->
      <arg line="-PARAM messageDir '${server.dir}/components/EvGen/message/'"/>
      <!-- BEGIN, CR00319240, CD -->
      <arg line="-PARAM date ${DSTAMP}"/>
      <!-- END, CR00319240 -->
    </java>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/ServiceLayer.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/service/impl/impl.gen'"/>
      <arg line="-PARAM productEvidenceHome '${product.evidence.build.root}'"/>
      <arg line="-PARAM date ${DSTAMP}"/>


    </java>


    <mkdir dir="${product.custom.impl.dir}/temp/entity/impl"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/EntityLayer.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/entity/impl/impl.gen'"/>
      <arg line="-PARAM productEvidenceHome '${product.evidence.build.root}'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>


    </java>


    <!-- BEGIN, CR00459476, ZV -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/EvidenceTypeRelationship.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/service/impl/impl.gen'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>


    </java>
    <!-- END, CR00459476 -->


    <!--
      Calls to generate files that are subject to updates when euims are added or deleted,
      i.e. EvidenceMaintenance class and registrar
    -->


    <mkdir dir="${product.custom.impl.dir}/temp/facade/impl"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/FacadeLayer.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/facade/impl/impl.gen'"/>
      <arg line="-PARAM productEvidenceHome '${product.evidence.build.root}'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>


    </java>


    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/service/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/EvidenceRegistrar.xslt"
      />


    </antcall>


    <!-- Generate the menu and nav loaders for Produce Evidence -->
    <mkdir dir="${product.custom.impl.dir}/temp/boloader/"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/BusinessObjectTab/BusinessObjectMenuLoader.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/boloader/impl.gen'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>


    </java>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/BusinessObjectTab/BusinessObjectNavLoader.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/boloader/impl.gen'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>


    </java>


    <!-- Copy the generated business object menu loaders -->
    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${build.source.root}/service/tab/impl"
      />


      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/boloader"
      />


    </antcall>


    <!-- 
      Creates the RegistrarModule class for each evidence generator component
    -->
    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/service/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/RegistrarModule.xslt"
      />


    </antcall>


    <!-- Check if model integrated directory exists, if not create directory structure -->
    <antcall target="makedir">


      <param
        name="fileExist"
        value="${integratedfileExist}"
      />
      <param
        name="dirName"
        value="${product.evidence.build.root}/model/integrated"
      />


    </antcall>


    <!-- Call digestor for Integrated evidenceEntities.xml -->
    <antcall target="run.digestor">


      <param
        name="euimDir"
        value="euims=${build.integrated.metadata}"
      />
      <param
        name="entityDestDir"
        value="evidfile=${casetype.integratedCase.evidence}"
      />


    </antcall>


    <!-- Generate business object tab files for Integrated Evidence -->


    <mkdir dir="${product.custom.impl.dir}/temp/botab"/>
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.integratedCase.evidence}'"/>
      <arg line="-XSL '${xslt.root}/BusinessObjectTab.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/botab/impl.gen'"/>
      <arg line="-PARAM caseType 'Evidence'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>


    </java>


    <!-- 
      Calls to generate the initial version of the app resource dmx and its associated
      property files for the create wizard.
      This INITIALAPPRESOURCE.dmx is appended to for each evidence generator component.
      Note, the resourceID field values cannot be allocated until after this file has been generated for all
      evidence generator components.
    -->


    <mkdir dir="${server.dir}/components/EvGen/data/initial"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.integratedCase.evidence}'"/>
      <arg line="-XSL '${xslt.root}/CreateWizardProperties/InitialAppResource.xslt'"/>
      <arg line="-OUT '${server.dir}/components/EvGen/data/initial/impl.gen'"/>
      <arg line="-PARAM propertyPath '${server.dir}/components/EvGen/data/initial/blob/'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM caseType 'Evidence'"/>


    </java>


    <!-- clean the integrated client -->
    <antcall target="integrated.client.evidence.clean"/>


    <!-- Check if model product directory exists, if not create directory structure -->
    <antcall target="makedir">


      <param
        name="fileExist"
        value="${productfileExist}"
      />
      <param
        name="dirName"
        value="${product.evidence.build.root}/model/product"
      />


    </antcall>


    <!-- Call digestor for Product evidenceEntities.xml -->


    <antcall target="run.digestor">


      <param
        name="euimDir"
        value="euims=${build.product.metadata}"
      />
      <param
        name="entityDestDir"
        value="evidfile=${casetype.product.evidence}"
      />


    </antcall>


    <!-- Generate business object tab files for Product Evidence -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.product.evidence}'"/>
      <arg line="-XSL '${xslt.root}/BusinessObjectTab.xslt'"/>
      <arg line="-OUT '${product.custom.impl.dir}/temp/botab/impl.gen'"/>
      <arg line="-PARAM caseType 'ProductEvidence'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>


    </java>


    <!-- Copy the generated business object tabs -->
    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${server.dir}/components/EvGen/tab/BusinessObjectTab"
      />


      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/botab"
      />


    </antcall>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.product.evidence}'"/>
      <arg line="-XSL '${xslt.root}/CreateWizardProperties/InitialAppResource.xslt'"/>
      <arg line="-OUT '${server.dir}/components/EvGen/data/initial/impl.gen'"/>
      <arg line="-PARAM propertyPath '${server.dir}/components/EvGen/data/initial/blob/'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <arg line="-PARAM date '${DSTAMP}'"/>
      <arg line="-PARAM caseType 'ProductEvidence'"/>


    </java>


    <!-- clean the product client -->
    <antcall target="product.client.evidence.clean"/>


    <!-- BEGIN, CR00100405, CD -->
    <!--
        Generate customisable files to temp folder to prevent overwriting 
        customer written implementation code.
       
       OOTB_ONLY) Write to OOTB dir for all OOTB product entities
      CUSTOM_NEW) Write dummy OOTB version to BUILD dir for brand new entities 
                  that appear in a CUSTOM product which overrides an OOTB 
                  product. Note - this means that service and facade layer code
                  can import this dummy OOTB one which makes maintaining the 
                  generator a lot easier.  The dummy OOTB one will be 
                  overridden by (CUSTOM_EXTENSION) using the replace superclass
                  option.        
CUSTOM_EXTENSION) Write to CUSTOM dir for all extension entities that appear in
                  a CUSTOM product which overrides an OOTB product.                  
     -->
    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/validation/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Validate.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="OOTB_ONLY"
      />
    </antcall>


    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/dummy/validation/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Validate.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_NEW"
      />
    </antcall>


    <antcall target="call.transformer">
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="gen.path"
        value="${dir.custom.source.tmp}/validation/impl"
      />
      <!-- END, CR00300852 -->
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Validate.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_EXTENSION"
      />
    </antcall>


    <!-- BEGIN, CR000XXXXX, POB -->
    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/hook/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Hook.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="OOTB_ONLY"
      />
    </antcall>


    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/dummy/hook/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Hook.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_NEW"
      />
    </antcall>


    <antcall target="call.transformer">
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="gen.path"
        value="${dir.custom.source.tmp}/hook/impl"
      />
      <!-- END, CR00300852 -->
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/Hook.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_EXTENSION"
      />
    </antcall>
    <!-- END, CR000XXXXX-->


    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/relatedattribute/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/RelatedEntityAttribute.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="OOTB_ONLY"
      />
    </antcall>


    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/dummy/relatedattribute/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/RelatedEntityAttribute.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_NEW"
      />
    </antcall>


    <antcall target="call.transformer">
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="gen.path"
        value="${dir.custom.source.tmp}/relatedattribute/impl"
      />
      <!-- END, CR00300852 -->
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/RelatedEntityAttribute.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_EXTENSION"
      />
    </antcall>


    <!-- Removed OverrideCallout.xslt -->


    <!-- BEGIN, CR000XXXXX, POB -->
    <!--
      Create customise class for each service layer class that requires it
    -->
    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/customise/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/CustomiseServiceLayer.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="OOTB_ONLY"
      />
    </antcall>


    <antcall target="call.transformer">
      <param
        name="gen.path"
        value="${product.custom.impl.dir}/temp/dummy/customise/impl"
      />
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/CustomiseServiceLayer.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_NEW"
      />
    </antcall>


    <antcall target="call.transformer">
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="gen.path"
        value="${dir.custom.source.tmp}/customise/impl"
      />
      <!-- END, CR00300852 -->
      <param
        name="component.dir"
        value="impl.gen"
      />
      <param
        name="xslt.file"
        value="${xslt.root}/CustomiseServiceLayer.xslt"
      />
      <param
        name="entitiesToGenerate"
        value="CUSTOM_EXTENSION"
      />
    </antcall>
    <!-- END, CR00100405 -->


    <!--
        Calls to generate any new files and delete old obsolete (i.e. euim no
        longer exists) files for attribution, validation,
        relatedEntityAttribute, service, facade and entity layers.
    -->
    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${build.source.root}/service/impl"
      />


      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/service/impl"
      />


    </antcall>


    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${build.source.root}/entity/impl"
      />
      <!-- END, CR000YYYYYY, CD -->
      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/entity/impl"
      />


    </antcall>


    <!-- BEGIN, CR00100405, CD -->
    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${build.source.root}"
      />


      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/dummy"
      />


    </antcall>


    <!-- BEGIN, CR00310426, CD -->
    <antcall target="unzip.handcrafted.from.jar"/>
    <!-- END, CR00310426 -->


    <!-- BEGIN, CR00098722, CD -->
    <antcall target="incremental.generate.custom">
      <!-- END, CR00098722 -->
      <param
        name="srcDirName"
        value="${product.custom.impl.dir}/validation/impl"
      />
      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/validation/impl"
      />
      <!-- BEGIN, CR00310426, CD -->
      <param
        name="classDirName"
        value="${dir.unzipped.source.tmp}/validation/impl"
      />
      <!-- END, CR00310426 -->
    </antcall>


    <antcall target="incremental.generate.custom">
      <param
        name="srcDirName"
        value="${custom.custom.impl.dir}/validation/impl"
      />
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="tempDirName"
        value="${dir.custom.source.tmp}/validation/impl"
      />
      <!-- END, CR00300852 -->
    </antcall>


    <!-- BEGIN, CR00098722, CD -->
    <antcall target="incremental.generate.custom">
      <!-- END, CR00098722 -->
      <param
        name="srcDirName"
        value="${product.custom.impl.dir}/hook/impl"
      />
      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/hook/impl"
      />
      <!-- BEGIN, CR00310426, CD -->
      <param
        name="classDirName"
        value="${dir.unzipped.source.tmp}/hook/impl"
      />
      <!-- END, CR00310426 -->
    </antcall>


    <antcall target="incremental.generate.custom">
      <param
        name="srcDirName"
        value="${custom.custom.impl.dir}/hook/impl"
      />
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="tempDirName"
        value="${dir.custom.source.tmp}/hook/impl"
      />
      <!-- END, CR00300852 -->
    </antcall>


    <!-- BEGIN, CR00098722, CD -->
    <antcall target="incremental.generate.custom">
      <!-- END, CR00098722 -->
      <param
        name="srcDirName"
        value="${product.custom.impl.dir}/relatedattribute/impl"
      />
      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/relatedattribute/impl"
      />
      <!-- BEGIN, CR00310426, CD -->
      <param
        name="classDirName"
        value="${dir.unzipped.source.tmp}/relatedattribute/impl"
      />
      <!-- END, CR00310426 -->
    </antcall>


    <antcall target="incremental.generate.custom">
      <param
        name="srcDirName"
        value="${custom.custom.impl.dir}/relatedattribute/impl"
      />
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="tempDirName"
        value="${dir.custom.source.tmp}/relatedattribute/impl"
      />
      <!-- END, CR00300852 -->
    </antcall>


    <!-- Removed override -->


    <!-- BEGIN, CR00098722, CD -->
    <antcall target="incremental.generate.custom">
      <!-- END, CR00098722 -->
      <param
        name="srcDirName"
        value="${product.custom.impl.dir}/customise/impl"
      />
      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/customise/impl"
      />
      <!-- BEGIN, CR00310426, CD -->
      <param
        name="classDirName"
        value="${dir.unzipped.source.tmp}/customise/impl"
      />
      <!-- END, CR00310426 -->
    </antcall>
    <antcall target="incremental.generate.custom">
      <param
        name="srcDirName"
        value="${custom.custom.impl.dir}/customise/impl"
      />
      <!-- BEGIN, CR00300852, CD -->
      <param
        name="tempDirName"
        value="${dir.custom.source.tmp}/customise/impl"
      />
      <!-- END, CR00300852 -->
    </antcall>
    <!-- END, CR00100405 -->


    <antcall target="incremental.generate">


      <param
        name="srcDirName"
        value="${build.source.root}/facade/impl"
      />


      <param
        name="tempDirName"
        value="${product.custom.impl.dir}/temp/facade/impl"
      />


    </antcall>


    <!-- Removed duplicated service layer generation -->


    <!--
        Build Service and Facade layer framework (inf).
        Build this components inf.xml against metadata.
    -->
    <antcall target="call.transformer">


      <param
        name="gen.path"
        value="${product.evidence.build.root}/gen.tmp/facadeSLInf/model"
      />
      <param
        name="component.dir"
        value="impl"
      />
      <param
        name="xslt.file"
        value="${infgen.root}/buildSLFacadeInf.xslt"
      />


    </antcall>


    <!--
        Concatenate all inf files into 1 inf.xml in this products inf specific directory.
    -->
    <concat
      destfile="${product.inf.xml}/${product.name}Inf.xml"
      fixlastline="yes"
    >


      <fileset
        dir="${product.evidence.build.root}/gen.tmp/facadeSLInf/model"
        includes="*.xml"
      />


    </concat>


    <!--
        Remove any unwanted generated output.
    -->
    <delete dir="${server.dir}/build/gen.tmp"/>
    <delete dir="${product.evidence.build.root}/gen.tmp"/>
    <delete dir="${product.custom.impl.dir}/temp"/>
    <!-- BEGIN, CR00300852, CD -->
    <!-- Removed deletion of custom source temp directory -->
    <!-- as this is now located in the build directory.   -->
    <!-- END, CR00300852 -->


    <delete>


      <fileset dir="${build.source.root}/service/impl">
        <exclude name="*.java"/>
      </fileset>


    </delete>


    <delete>


      <fileset dir="${build.source.root}/facade/impl">
        <exclude name="*.java"/>
      </fileset>


    </delete>


    <delete>


      <fileset dir="${build.source.root}/entity/impl">
        <exclude name="*.java"/>
      </fileset>


    </delete>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target generates all integrated casetype client related evidence files.
    Should only be called when either a new EUIM file is added to the Integrated
    directory or a change is made to an existing one.
  -->
  <!-- BEGIN, CR00094128, CD -->
  <target
    depends="check.integratedCase.euims.exist"
    description="Generates Integrated Case evidence client screens from the metadata."
    if="integratedCase.euims.exist"
    name="integratedClient.evidence.generate"
    unless="integratedUpToDate"
  >
    <!-- END, CR00094128 -->


    <!-- Check if model integrated directory exists, if not create directory structure -->
    <antcall target="makedir">


      <param
        name="fileExist"
        value="${integratedfileExist}"
      />
      <param
        name="dirName"
        value="${product.evidence.build.root}/model/integrated"
      />


    </antcall>


    <!-- Call digestor for Integrated evidenceEntities.xml -->
    <antcall target="run.digestor">


      <param
        name="euimDir"
        value="euims=${build.integrated.metadata}"
      />
      <param
        name="entityDestDir"
        value="evidfile=${casetype.integratedCase.evidence}"
      />


    </antcall>


    <!-- Integrate Case User Interface File Generation -->
    <!-- CR00114067, POB, Changing all integrateduserinterface references to iui -->
    <mkdir dir="${product.evidence.build.root}/iui"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.integratedCase.evidence}'"/>
      <arg line="-XSL '${xslt.root}/UserInterfaceLayer.xslt'"/>
      <arg line="-OUT '${product.evidence.build.root}/iui/userinterface.gen'"/>
      <arg line="-PARAM caseType 'Evidence'"/>
      <!-- BEGIN, CR00094128, CD -->
      <arg line="-PARAM serverBuildDir '${build.root}'"/>
      <!-- END, CR00094128 -->
      <arg line="-PARAM date '${DSTAMP}'"/>
      <!-- BEGIN, PADDY -->
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <!-- END, PADDY -->
      <arg line="-PARAM createEmploymentLink '${create.employment.link}'"/>
      <arg line="-PARAM createClientListForEmployment '${create.clientlist.for.employment}'"/>


    </java>


    <!-- BEGIN, CR00099720, DG -->
    <!-- Generate the GeneratedImages.imm and the GeneratedImagesText.properties for the integrated case -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.integratedCase.evidence}'"/>
      <arg line="-XSL '${xslt.root}/UserInterface/GenerateImages.xslt'"/>
      <arg line="-OUT '${product.evidence.build.root}/iui/generatedimages.gen'"/>
      <arg line="-PARAM clientDir '${product.webclient}'"/>
      <!-- BEGIN, CR00353709, CD -->
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <!-- END, CR00353709, CD -->


    </java>
    <!-- END, CR00099720 -->


    <!-- BEGIN, CR00092541, CD -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.integratedCase.evidence}'"/>
      <arg line="-XSL '${xslt.root}/Evidence2ProductXML.xslt'"/>
      <arg line="-OUT '${evidence.build.root}/Products.gen'"/>
      <arg line="-PARAM buildRoot '${evidence.build.root}'"/>
      <arg line="-PARAM clientDir '${product.webclient}'"/>
      <arg line="-PARAM prefix '${product.prefix}'"/>
      <!-- BEGIN, CR00094128, CD -->
      <arg line="-PARAM serverBuildDir '${build.root}'"/>
      <!-- END, CR00094128 -->


    </java>
    <!-- END, CR00092541 -->


    <!-- BEGIN, CR00101047, CD -->
    <antcall target="incremental.generate.client">
      <!-- END, CR00101047 -->


      <param
        name="srcDirName"
        value="${product.webclient}/Evidence"
      />
      <param
        name="tempDirName"
        value="${product.evidence.build.root}/iui"
      />


    </antcall>


    <!-- remove any unwanted generated output -->
    <delete dir="${product.evidence.build.root}/iui"/>


  </target>


  <!-- =========================================================================================================== -->


  <!--
    This target generates all product delivery casetype client related evidence
    files. Should only be called when either a new EUIM file is added to the
    Integrated directory or a change is made to an existing one.
  -->
  <!-- BEGIN, CR00094128, CD -->
  <target
    depends="check.product.euims.exist"
    description="Generates Product Delivery evidence client screens from the metadata."
    if="product.euims.exist"
    name="productClient.evidence.generate"
    unless="productUpToDate"
  >


    <!-- END, CR00094128 -->


    <!-- Check if model product directory exists, if not create directory structure -->
    <antcall target="makedir">


      <param
        name="fileExist"
        value="${productfileExist}"
      />
      <param
        name="dirName"
        value="${product.evidence.build.root}/model/product"
      />


    </antcall>


    <!-- Call digestor for Product evidenceEntities.xml -->
    <antcall target="run.digestor">


      <param
        name="euimDir"
        value="euims=${build.product.metadata}"
      />
      <param
        name="entityDestDir"
        value="evidfile=${casetype.product.evidence}"
      />


    </antcall>


    <!-- BEGIN, PADDY -->
    <!-- change productuserinterface to pui to resolve file name length issue -->
    <mkdir dir="${product.evidence.build.root}/pui"/>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN  '${casetype.product.evidence}'"/>
      <arg line="-XSL '${xslt.root}/UserInterfaceLayer.xslt'"/>
      <arg line="-OUT '${product.evidence.build.root}/pui/pui.gen'"/>
      <arg line="-PARAM caseType 'ProductEvidence'"/>
      <!-- BEGIN, CR00094128, CD -->
      <arg line="-PARAM serverBuildDir '${build.root}'"/>
      <!-- END, CR00094128 -->
      <arg line="-PARAM date '${DSTAMP}'"/>
      <!-- BEGIN, PADDY -->
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <!-- END, PADDY -->
      <arg line="-PARAM createEmploymentLink '${create.employment.link}'"/>
      <arg line="-PARAM createClientListForEmployment '${create.clientlist.for.employment}'"/>


    </java>


    <!-- BEGIN, CR00099720, DG -->
    <!-- Generate the GeneratedImages.imm and the GeneratedImagesText.properties for the product case -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/UserInterface/GenerateImages.xslt'"/>
      <arg line="-OUT '${product.evidence.build.root}/generatedimages.gen'"/>
      <arg line="-PARAM clientDir '${product.webclient}/Product'"/>
      <!-- BEGIN, CR00353709, CD -->
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>
      <!-- END, CR00353709, CD -->


    </java>
    <!-- END, CR00099720 -->


    <!-- BEGIN, CR00092541, CD -->
    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${casetype.product.evidence}'"/>
      <arg line="-XSL '${xslt.root}/Evidence2ProductXML.xslt'"/>
      <arg line="-OUT '${evidence.build.root}/Products.gen'"/>
      <arg line="-PARAM buildRoot '${evidence.build.root}'"/>
      <arg line="-PARAM clientDir '${product.webclient}'"/>
      <arg line="-PARAM prefix '${product.prefix}'"/>
      <!-- BEGIN, CR00094128, CD -->
      <arg line="-PARAM serverBuildDir '${build.root}'"/>
      <!-- END, CR00094128 -->


    </java>
    <!-- END, CR00092541 -->


    <!-- BEGIN, CR00101047, CD -->
    <antcall target="incremental.generate.client">
      <!-- END, CR00101047 -->


      <param
        name="srcDirName"
        value="${product.webclient}/Product/Evidence"
      />
      <param
        name="tempDirName"
        value="${product.evidence.build.root}/pui"
      />


    </antcall>


    <!-- Delete client screens from EJBServer build directory -->
    <delete dir="${product.evidence.build.root}/pui"/>
    <!-- END, PADDY -->


  </target>


  <!-- BEGIN, CR00119218, CD -->
  <!-- Generate all the domain properties files for evidence brokering merge widget. -->
  <target
    description="Generate all the domain properties files for evidence brokering merge widget."
    name="evidence.domain.properties"
  >


    <!--
      Set the root.dir to basedir, basedir is context based and controlled by the subant
      task called through the EGTools build.xml. As each product is visited, the
      basedir is set relative to the product.
      e.g. basedir = EJBServer\components\SampleEGProduct\evidence
    -->
    <property
      name="root.dir"
      value="${basedir}"
    />


    <!-- BEGIN,  CR00129392, POB -->
    <property
      name="properties.temp.dir"
      value="${evidence.build.root}/properties/temp"
    />
    <mkdir dir="${properties.temp.dir}"/>
    <!-- BEGIN, CR00300852, CD -->
    <!-- Removed the creation of temp directory for service layer code. -->
    <!-- END, CR00300852 -->


    <path id="evgen.models.path">
      <fileset dir="${server.dir}">
        <include name="layeredmodels/*.xml"/>
        <include name="build/${SERVER_MODEL_NAME}*.xml"/>
      </fileset>
    </path>


    <pathconvert
      pathsep=","
      property="evgen.modelfiles"
      refid="evgen.models.path"
    />


    <java
      classname="curam.evidencegen.tasks.MergeWidgetDomains"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >
      <classpath>
        <pathelement location="${EvGenTasksJar}"/>
      </classpath>
      <arg line="'${server.evidence}/EvidenceEntities.xml'"/>
      <arg value="${evgen.modelfiles}"/>
      <arg line="'${properties.temp.dir}'"/>
    </java>


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN '${server.evidence}/EvidenceEntities.xml'"/>
      <arg line="-XSL '${xslt.root}/MergeWidgetLabels.xslt'"/>
      <arg line="-OUT '${properties.temp.dir}/labels.gen'"/>
      <arg line="-PARAM outputDir '${properties.temp.dir}'"/>
      <arg line="-PARAM localeList '${env.LOCALE_LIST}'"/>


    </java>


    <!--
        Calls to generate any new files and delete old obsolete (i.e. euim no
        longer exists) files for service layer property files
    -->
    <antcall target="incremental.generate">
      <param
        name="srcDirName"
        value="${broker.properties.dir}/service/impl"
      />
      <param
        name="tempDirName"
        value="${properties.temp.dir}"
      />
      <!-- END, CR00129392 -->
    </antcall>


  </target>
  <!-- END, CR00119218 -->


  <!-- *************************** END OF GENERATE TARGETS *************************** -->


  <!-- ***************************      CLEAN TARGETS      *************************** -->


  <!-- Clean all of product if build.product is set -->
  <target
    description="Clean all the evidence generated files/dirs."
    if="build.product"
    name="egtools.evidence.clean"
  >


    <antcall target="server.evidence.clean"/>
    <antcall target="client.evidence.clean"/>


  </target>


  <!--===========================================================================================================-->


  <!-- Clean server impl layers -->
  <target
    description="Clean all the server generated evidence impl layer files/dirs."
    if="build.product"
    name="server.evidence.clean"
  >


    <property
      name="root.dir"
      value="${basedir}"
    />


    <!--
      TODO if SearchAlternateIDFacade,SearchAlternateIDServiceLayer,
      EmploymentService,EmploymentFacade are removed need to be able to delete them -->


    <delete
      dir="${build.source.root}/service/impl"
      includeEmptyDirs="true"
    />
    <delete
      dir="${build.source.root}/facade/impl"
      includeEmptyDirs="true"
    />
    <delete
      dir="${build.source.root}/entity/impl"
      includeEmptyDirs="true"
    />


  </target>


  <!--===========================================================================================================-->


  <!-- Clean server impl custom layers -->
  <target
    depends="getConfirmation"
    description="Clean all the server customisable evidence impl layer files/dirs."
    if="confirm.customised.delete"
    name="server.customised.evidence.clean"
  >


    <property
      name="root.dir"
      value="${basedir}"
    />


    <delete
      dir="${product.custom.impl.dir}/validation/impl"
      includeEmptyDirs="true"
    />
    <!-- BEGIN, CR000XXXXX, POB -->
    <delete
      dir="${product.custom.impl.dir}/hook/impl"
      includeEmptyDirs="true"
    />
    <delete
      dir="${product.custom.impl.dir}/relatedattribute/impl"
      includeEmptyDirs="true"
    />
    <!-- BEGIN, CR00100405, CD -->
    <!-- Removed override -->
    <!-- END, CR00100405 -->
    <delete
      dir="${product.custom.impl.dir}/customise/impl"
      includeEmptyDirs="true"
    />


  </target>


  <!--===========================================================================================================-->


  <!-- Clean client screens -->
  <target
    description="Clean all the evidence generated files/dirs."
    if="build.product"
    name="client.evidence.clean"
  >


    <antcall target="integrated.client.evidence.clean"/>
    <antcall target="product.client.evidence.clean"/>


  </target>


  <!--===========================================================================================================-->


  <!-- Clean integrated client screens and associated files -->
  <target
    description="Clean all the client evidence generated files/dirs."
    name="integrated.client.evidence.clean"
  >


    <delete file="${casetype.integratedCase.evidence}"/>
    <delete
      failonerror="${delete.failonerror}"
      includeEmptyDirs="true"
    >
      <fileset dir="${product.webclient}/Evidence"/>
    </delete>


  </target>


  <!--===========================================================================================================-->


  <!-- Clean product if build.product is set -->
  <target
    description="Clean all the evidence generated files/dirs."
    name="product.client.evidence.clean"
  >


    <delete file="${casetype.product.evidence}"/>
    <delete
      failonerror="${delete.failonerror}"
      includeEmptyDirs="true"
    >


      <fileset dir="${product.webclient}/Product/Evidence"/>


    </delete>


  </target>


  <!-- *************************** END OF CLEAN TARGETS *************************** -->


  <!-- *************************** UPDATE CHECK TARGETS *************************** -->


  <!--
    This target sets the main update indicator, if set then don't need to call
    Digester or Evidence Generator as no metadata or evidence model data has been
    changed since the last generation.
  -->
  <target
    depends="checkArePropertiesUpToDate,checkIsIntegratedUpdateNeeded,checkIsProductUpdateNeeded"
    description="Sets the main update indicator, if set then don't need to call Digester or Evidence Generator"
    name="checkIsClientUpToDate"
  >


    <condition property="clientFilesUpToDate">
      <and>
        <isset property="propertiesUpToDate"/>
        <isset property="integratedUpToDate"/>
        <isset property="productUpToDate"/>
      </and>
    </condition>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target checks if the respective evidenceEntities.xml files exist
    in their corresponding directories.
  -->
  <target
    description="Checks if the respective evidenceEntities.xml files exist in their corresponding directories"
    name="checkClientEvidenceEntityFilesExist"
  >


    <condition property="integratedfileExist">
      <available file="${casetype.integratedCase.evidence}"/>
    </condition>


    <condition property="productfileExist">
      <available file="${casetype.product.evidence}"/>
    </condition>


    <!-- if file exists - set property -->
    <condition property="clientFilesExist">
      <and>
        <isset property="integratedfileExist"/>
        <isset property="productfileExist"/>


      </and>
    </condition>


  </target>


  <!--===========================================================================================================-->
  <!--
      This target checks if the respective evidenceEntities.xml files exist
      in their corresponding directories.
  -->
  <target
    description="Checks if the respective evidenceEntities.xml files exist in their corresponding directories"
    name="checkServerEvidenceEntityFilesExist"
  >


    <!-- if file exists - set property -->
    <condition property="serverfileExist">
      <available file="${server.evidence}/EvidenceEntities.xml"/>
    </condition>


  </target>


  <!--===========================================================================================================-->


  <!--
      This target checks to see if either the evidence model data or any of the
      euim set that is used for server generation has been edited since the last
      generation. If set not necessary to pass server related files to digestor
      or to call server evidence generation.
  -->
  <target
    depends="get.euims"
    description="Checks to see if either the evidence model data or any of the euim set that is used for server generation has been edited since the last generation"
    if="serverfileExist"
    name="checkIsServerUpdateNeeded"
  >


    <uptodate
      property="serverUpToDate"
      targetfile="${server.evidence}/EvidenceEntities.xml"
    >


      <srcfiles dir="${build.server.metadata}/">
        <include name="*.xml"/>
        <include name="*.euim"/>
      </srcfiles>


    </uptodate>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target checks to see if either the general or employment properties file
    has been changed. If either has been changed both integrated and product files
    need to be regenerated.
  -->
  <target
    depends="checkClientEvidenceEntityFilesExist"
    description="Checks to see if either the general or employment properties file has been edited since the last generation."
    if="clientFilesExist"
    name="checkArePropertiesUpToDate"
  >


    <uptodate
      property="propertiesUpToDate"
      targetfile="${casetype.integratedCase.evidence}"
    >


      <srcfiles dir="${properties.home}">
        <include name="*.properties"/>
      </srcfiles>


    </uptodate>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target checks to see if any of the euim set that are used for the
    integrated casetype screen generation have been edited since the last
    generation. If set not necessary to pass integrated related files to digestor
    or to call integrated evidence generation.
  -->
  <target
    description="Checks to see if any of the euim set that is used for the integrated casetype screen generation has been edited since the last generation."
    if="propertiesUpToDate"
    name="checkIsIntegratedUpdateNeeded"
  >


    <uptodate
      property="integratedUpToDate"
      targetfile="${casetype.integratedCase.evidence}"
    >


      <srcfiles dir="${caseType.integratedCase.metadata}/">
        <include name="*.euim"/>
        <include name="*.properties"/>
      </srcfiles>


    </uptodate>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target checks to see if any of the euim set that are used for the product
    delivery casetype screen generation have been edited since the last generation.
    If set not necessary to pass product related files to digestor or to call
    product evidence generation.
  -->
  <target
    description="Checks to see if any of the euim set that is used for the product delivery casetype screen generation has been edited since the last generation"
    if="propertiesUpToDate"
    name="checkIsProductUpdateNeeded"
  >


    <uptodate
      property="productUpToDate"
      targetfile="${casetype.product.evidence}"
    >


      <srcfiles dir="${caseType.product.metadata}">
        <include name="*.euim"/>
        <include name="*.properties"/>
      </srcfiles>


    </uptodate>


  </target>


  <!-- *********************     END OF UPDATE CHECK TARGETS     ********************* -->


  <!-- ***************************     UTILITY TARGETS     *************************** -->


  <target
    description="Examines each directory containing euim files if all files are not up to date"
    name="get.euims"
  >


    <!-- Call into evidence metadata subdirectories for each CaseType -->
    <subant
      genericantfile="${project.root}/build.xml"
      inheritall="true"
      target="set.serverset"
    >
      <dirset dir="${build.integrated.metadata}/"/>
    </subant>


    <subant
      genericantfile="${project.root}/build.xml"
      inheritall="true"
      target="set.serverset"
    >
      <dirset dir="${build.product.metadata}/"/>
    </subant>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target sets up the list of EUIM's that are combined with ServerEntities.xml and used to
    generate the server-side code and infrastructure. All we want here is a non repeating full list
    of all EUIM's present regardless of CaseType. If an EUIM is present in more that one CaseType folder
    it will be overwritten by the final occurence of that file. This is fine as the possible differences between
    files affect only client side generation, for the purposes of server side generation any of the versions
    is fine.
  -->
  <target
    description="Copies definitive fileset of EUIM's to {SERVER_BUILD_DIR_NAME}"
    name="set.serverset"
  >


    <property
      name="metadata.dir"
      value="${basedir}"
    />


    <copy
      preservelastmodified="true"
      todir="${build.server.metadata}"
    >


      <!-- select the files to copy -->
      <fileset dir="${metadata.dir}">
        <include name="*.euim"/>
        <include name="*.properties"/>
      </fileset>


    </copy>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target calls into the XMLDigestor tool passing the
    following arguments:
    Directory name of euims to be converted.
    Destination directory name for converted euims (EvidenceEntities.xml).
    Directory name where server evidence entity metadata is located.
    Name of Ruleset used for conversion.
    Name of package for the Product evidence is currently being generated for.
    Name of Product for the Product evidence is currently being generated for.
  -->
  <target
    description="Calls on the XMLDigestor"
    name="run.digestor"
  >


    <!-- BEGIN, CR00353709, CD -->
    <java
      classname="curam.evidencegen.tasks.MergeOOTBAndProductProperties"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >
      <classpath>
        <pathelement location="${EvGenTasksJar}"/>
      </classpath>
      <arg line="${product.evidence.build.root}/properties/"/>
      <arg line="${project.home}/properties/"/>
    </java>
    <!-- END, CR00353709, CD -->


    <java
      classname="curam.tool.XMLDigestTool"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <classpath>
        <pathelement location="${digestor.jar}"/>
        <pathelement location="${jobs.jar}"/>
        <!-- BEGIN, CR00122120, POB -->
        <pathelement location="${commons_beanutils_jar}"/>
      	<pathelement location="${commons_collections_jar}"/>
        <pathelement location="${commons_logging_jar}"/>
        <pathelement location="${commons_lang_jar}"/>
      	<pathelement location="${commons_text_jar}"/>
        <!-- END, CR00122120 -->
      </classpath>
      <!-- BEGIN, PADDY -->
      <sysproperty
        key="LOCALE_LIST"
        value="${env.LOCALE_LIST}"
      />
      <!-- END, PADDY -->
      <arg value="${euimDir}"/>
      <arg value="${entityDestDir}"/>
      <arg value="-d=${build.server.metadata}"/>
      <arg value="-e=xml"/>
      <arg value="-r=SERVEREVIDENCE.xml"/>
      <arg value="package=${product.ejb.package}"/>
      <arg value="product=${product.name}"/>
      <arg value="prefix=${product.prefix}"/>
      <arg value="displayAltID=${product.appendAltID}"/>
      <!-- BEGIN, CR00100999, CD -->
      <arg value="propDirectory=${product.evidence.build.root}/properties/"/>
      <!-- END, CR00100999 -->


    </java>


  </target>


  <!--===========================================================================================================-->


  <!--
    This target calls the XSLT transformer directly. This is done to ensure we are calling the transformer of
    our choice, in this case the xalan-2.6.0.jar. Moreover, we keep a copy of this jar in our lib directory to
    ensure the generator is unaffected by future upgrades.
  -->
  <target
    description="Calls on the XMLDigestor"
    name="call.transformer"
  >


    <available
      file="${gen.path}"
      property="dirExists"
      type="dir"
    />


    <antcall target="makedir">


      <param
        name="fileExist"
        value="${dirExists}"
      />
      <param
        name="dirName"
        value="${gen.path}"
      />


    </antcall>


    <property
      name="destinationDir"
      value="${gen.path}/${component.dir}"
    />
    <!-- BEGIN, CR00100405, CD -->
    <antcall target="transform.normal"/>
    <antcall target="transform.custom"/>


  </target>


  <target
    name="transform.normal"
    unless="entitiesToGenerate"
  >


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN ${server.evidence}/EvidenceEntities.xml"/>
      <arg line="-XSL ${xslt.file}"/>
      <arg line="-OUT ${destinationDir}"/>
      <arg line="-PARAM date ${DSTAMP}"/>


    </java>


  </target>


  <target
    if="entitiesToGenerate"
    name="transform.custom"
  >


    <java
      classname="org.apache.xalan.xslt.Process"
      failonerror="true"
      fork="true"
      jvm="${dev.jdk.home.dir}/bin/java"
      maxmemory="512m"
    >


      <!-- BEGIN, CR00316524, KH -->
      <jvmarg value="-Xbootclasspath/p:${jar.xalan}${path.separator}${jar.serializer}${path.separator}${jar.xerces}"/>
      <!-- END, CR00316524 -->
      <arg line="-IN ${server.evidence}/EvidenceEntities.xml"/>
      <arg line="-XSL ${xslt.file}"/>
      <arg line="-OUT ${destinationDir}"/>
      <arg line="-PARAM date ${DSTAMP}"/>
      <arg line="-PARAM entitiesToGenerate ${entitiesToGenerate}"/>


    </java>


  </target>
  <!-- END, CR00100405 -->


  <!--===========================================================================================================-->
  <!--
    This target carries out comparisons between files generated into a temp layer and existing
    files in the product. The directories of each are specified by 2 parameters, the srcDir
    and tempDir.
    The comparisons and checks are as follows:
    Check if srcDir exists, if not then we are generating for the first time and a srcDir is created.
    Check if files existing in srcDir are also present in tempDir. If not present, delete from srcDir
    as euim for this file is no longer present on system.
    Check if files existing on tempDir are present in srcDir. If not present copy over as these represent
    euims added to the product since the last generation.
    Check if files existing on tempDir are also present in srcDir. If they are do a comparision check between
    the 2 excluding timestamp. If the file in tempDir is different it means a change has been made to the euim.
    If this is the case overwrite the existing file in srcDir with the updated version from tempDir.
  -->
  <target name="incremental.generate">


    <!-- Check if attribution/validation/relatedEntityAttribute directory exists, if it does
         not this means that we are generating evidence for the first time and therefore need
         to create directory structure for each.
    -->
    <available
      file="${srcDirName}"
      property="dirExists"
      type="dir"
    />


    <antcall target="makedir">


      <param
        name="fileExist"
        value="${dirExists}"
      />
      <param
        name="dirName"
        value="${srcDirName}"
      />


    </antcall>


    <!-- BEGIN, CR00098722, CD -->
    <!-- Removing deletion of existing src from tmp, as it should only happen for custom code -->
    <!-- END, CR00098722 -->


    <!--
        Copy any file over from the temp directory which is different to the corressponding file in
        the src directory. Note: If there is no corresponding file present in the scr directory,
        different defaults to true and the file from the temp directory is copied over. This will
        occur if a new EUIM has been added.
    -->
    <copy
      overwrite="false"
      todir="${srcDirName}"
      verbose="false"
    >


      <fileset dir="${tempDirName}">
        <exclude name="*.gen"/>
        <exclude name="product/"/>
        <exclude name="*.log/"/>
      </fileset>


    </copy>


  </target>


  <!-- BEGIN, CR00101047, CD -->
  <!--===========================================================================================================-->
  <!--
    This target is identical to incremental.generate except that it never overwrites an existing file unless it is 
    different to the new one (ignoring dates).  This is to avoid the uim generator having to rebuild unchanged uims
    on sequential builds.
  -->
  <target name="incremental.generate.client">


    <!-- Check if attribution/validation/relatedEntityAttribute directory exists, if it does
         not this means that we are generating evidence for the first time and therefore need
         to create directory structure for each.
    -->
    <available
      file="${srcDirName}"
      property="dirExists"
      type="dir"
    />


    <antcall target="makedir">


      <param
        name="fileExist"
        value="${dirExists}"
      />
      <param
        name="dirName"
        value="${srcDirName}"
      />


    </antcall>


    <!-- BEGIN, CR00098722, CD -->
    <!-- Removing deletion of existing src from tmp, as it should only happen for custom code -->
    <!-- END, CR00098722 -->


    <!--
        Copy any file over from the temp directory which is different to the corressponding file in
        the src directory. Note: If there is no corresponding file present in the scr directory,
        different defaults to true and the file from the temp directory is copied over. This will
        occur if a new EUIM has been added.
    -->
    <copy
      overwrite="false"
      todir="${srcDirName}"
      verbose="false"
    >


      <fileset dir="${tempDirName}">
        <exclude name="*.gen"/>
        <exclude name="product/"/>
        <exclude name="*.log/"/>
        <different
          ignoreFileTimes="true"
          targetdir="${srcDirName}"
        />
      </fileset>


    </copy>


  </target>
  <!-- END, CR00101047 -->


  <!-- BEGIN, CR00098722, CD -->
  <!--===========================================================================================================-->
  <!--
    This target is identical to incremental.generate except that it never overwrites an existing file.  This is
    to avoid overwriting custom code.
  -->
  <target name="incremental.generate.custom">


    <!-- Check if attribution/validation/relatedEntityAttribute directory exists, if it does
         not this means that we are generating evidence for the first time and therefore need
         to create directory structure for each.
    -->
    <available
      file="${srcDirName}"
      property="dirExists"
      type="dir"
    />


    <!-- BEGIN, CR00300852, CD -->
    <!-- Removing creation of srcDirName as copy will take  -->
    <!-- care of it without resulting in empty directories. -->


    <!-- BEGIN, CR000XXXXX, POB -->
    <!-- Deletes all temp files that are present in both the src and temp directories. This stops the generator overwriting any files
    already included in the source directory so no developer changes are lost -->
    <delete
      includeEmptyDirs="true"
      verbose="false"
    >
      <fileset dir="${tempDirName}">
        <present
          present="both"
          targetdir="${srcDirName}"
        />
      </fileset>
    </delete>


    <!-- BEGIN, CR00310426, CD -->
    <!-- Deletes all temp files that are present in both the unzipped jar and temp directories. This stops the generator overwriting any files
    already included on the classpath via a precompiled jar, so no developer changes are lost -->
    <delete
      includeEmptyDirs="true"
      verbose="false"
    >
      <fileset dir="${tempDirName}">
        <present
          present="both"
          targetdir="${classDirName}"
        />
      </fileset>
    </delete>
    <!-- END, CR00310426 -->


    <!--
        Copy any file over from the temp directory which is different to the corressponding file in
        the src directory. Note: If there is no corresponding file present in the scr directory,
        different defaults to true and the file from the temp directory is copied over. This will
        occur if a new EUIM has been added.
    -->
    <copy
      includeEmptyDirs="false"
      overwrite="false"
      todir="${srcDirName}"
      verbose="false"
    >


      <fileset dir="${tempDirName}">
        <exclude name="*.gen"/>
        <exclude name="product/"/>
        <exclude name="*.log/"/>
      </fileset>


    </copy>
    <!-- END, CR00300852 -->


  </target>
  <!-- END, CR00098722 -->


  <!--===========================================================================================================-->


  <!--
    This target simply creates a directory structure based on the parameter dirName if the param
    property fileExists is true. This is useful when we are generating for the first time or after
    a clean when the directory in question may not exist
  -->
  <target
    description="Creates directory structure for an evidenceEntities.xml file in the EJBServer/build folder if none exists. Should only be necessary if an appbuild clean has been performed"
    name="makedir"
    unless="$fileExist"
  >


    <mkdir dir="${dirName}"/>


  </target>


  <!--
    This target is used to confirm if the user wishes to delete the attribution,validation and relatedEntityAttribute
    layers. We use this additional validation from the user to ensure they are aware that they are
    deleting non generated customised code. If also allows them the option of not deleting these layers, but
    continuing with the deletion of everything else. Note: This target will only be called if the calling target
    is the evidence.clean target referenced through the EJBServer/appbuild.bat.
  -->
  <target
    if="evidence.clean.target"
    name="getConfirmation"
  >


    <input
      addproperty="delete.customized.evidence"
      message="Do you wish to delete the attribution,validation and relatedEntityAttribute impl layers. Note: by choosing n the clean of all other layers will continue but these layers will be unaffected. Continue?"
      validargs="y,n"
    />


    <condition property="confirm.customised.delete">
      <equals
        arg1="y"
        arg2="${delete.customized.evidence}"
      />
    </condition>


  </target>


  <!-- BEGIN, CR00310426, CD -->
  <!--
    This target is used to check for the existance of a layered stream's 
    source jar, to unzip a portion of it if it exists and rename the class 
    files as java files. This folder will subsequently be used as a fileset 
    pattern for a delete operation on another directory.
  -->
  <target
    depends="check.layered.jar.exists"
    if="layered.jar.exists"
    name="unzip.handcrafted.from.jar"
  >


    <mkdir dir="${product.evidence.build.root}/unzipped"/>


    <unzip
      dest="${product.evidence.build.root}/unzipped"
      src="${product.component.root}/lib/${product.name}.jar"
    >
      <patternset>
        <!-- BEGIN, CR00319240, CD -->
        <include name="${product.custom.classpath}/customise/impl/*.class"/>
        <include name="${product.custom.classpath}/hook/impl/*.class"/>
        <include name="${product.custom.classpath}/relatedattribute/impl/*.class"/>
        <include name="${product.custom.classpath}/validation/impl/*.class"/>
        <!-- END, CR00319240 -->
      </patternset>
      <globmapper
        from="*.class"
        to="*.java"
      />
    </unzip>


  </target>


  <target name="check.layered.jar.exists">
    <available
      file="${product.component.root}/lib/${product.name}.jar"
      property="layered.jar.exists"
      type="file"
    />


  </target>
  <!-- END, CR00310426 -->


  <!-- ************************  END OF UTILITY TARGETS     ************************ -->


</project>
