<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2021. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant initialization file for Curam projects.
  It includes any initialization tasks that need to be performed before a application can be built.

-->
<project name="app_init" default="init">

  <!--  ************************  -->
  <!--  ***  INITIALISATION  ***  -->
  <!--  ************************  -->
  <target name="init">

    <!-- Set the starting time stamp for use in file names -->
    <tstamp><format property="tim.start.sort" pattern="yyyyMMddHHmmss"/></tstamp>

    <!-- Start recording progress to a log file -->
    <mkdir dir="${dir.bld.log}"/>
    <record name="${dir.bld.log}/${tim.start.sort}.log" loglevel="${prp.loglevel}" />

    <tstamp><format property="time.now" pattern="HH:mm:ss"/></tstamp>
    <echo message="${time.now} Build Started"/>

    <!-- Check for a CuramSDEJ installation -->
    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="CURAMSDEJ"/>
      <param name="prm.prop" value="sysenv.CURAMSDEJ"/>
    </antcall>

    <!-- Check for a J2EE installation -->
    <antcall target="check.j2ee.envvar" inheritall="false"/>

    <!-- Check for a SERVER_DIR variable -->
    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="SERVER_DIR"/>
      <param name="prm.prop" value="SERVER_DIR"/>
    </antcall>

    <!-- Check for a SERVER_MODEL_NAME variable -->
    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="SERVER_MODEL_NAME"/>
      <param name="prm.prop" value="SERVER_MODEL_NAME"/>
    </antcall>

    <condition property="prop.file.available">
        <available file="${prop.file}"/>
    </condition>
    <antcall target="check.prop.file" />

    <!-- Create required directories -->
    <antcall target="ini.directories" inheritAll="false"/>

  </target>

  <target name="check.j2ee.envvar" depends="appserver.check" unless="vendor.equals.wlp">
    <!-- Check for a J2EE installation -->
    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="J2EE_JAR"/>
      <param name="prm.prop" value="sysenv.J2EE_JAR"/>
    </antcall>
  </target>

  <!--  *************************************************  -->
  <!--  ***  A P P S E R V E R . F I L E . C H E C K  ***  -->
  <!--  *************************************************  -->
  <target name="check.appserver.prop.file">
    <!-- Check whether an appserver property file exists -->
    <available property="appserver.prop.file.available" file="${app.prop.location}"/>
  </target>

  <!--  ****************************************  -->
  <!--  ***  A P P  S E R V E R . C H E C K  ***  -->
  <!--  ****************************************  -->
  <target name="appserver.check"
    depends="check.appserver.prop.file" if="appserver.prop.file.available">

    <property file="${app.prop.location}"/>

    <condition property="vendor.equals.ibm">
      <equals arg1="${as.vendor}" arg2="ibm" casesensitive="false"/>
    </condition>
    <condition property="vendor.equals.bea">
      <equals arg1="${as.vendor}" arg2="bea" casesensitive="false"/>
    </condition>
    <condition property="vendor.equals.wlp">
      <equals arg1="${as.vendor}" arg2="wlp" casesensitive="false"/>
    </condition>

  </target>
  
<!--   FIX 240298 CP -->
  <target name="updateRegistry.for.propertyfile" if="crypto.file.exists">
     <condition property="registry.jar.crypto.exists">
            <available file="${dir.sde.lib}/Registry.jar"/>
    </condition>
    
    <condition property="registry.wlp.jar.crypto.exists">
            <available file="${dir.sde.lib}/WLPRegistry.jar"/>
    </condition>
    
    <condition property="curammbean.jar.crypto.exists">
        <available file="${dir.sde.lib}/CuramMBean.jar"/>
    </condition>
    
    <antcall target="updateRegistryjar.crypto" />
    <antcall target="updateWLPRegistryjar.crypto" />
    <antcall target="updateCuramMBeanjar.crypto" />
  </target>  
  
  <target name="updateRegistryjar.crypto" if="registry.jar.crypto.exists">
    <path id="cryptoconfig.path">
      <fileset dir="${crypto.prop.file.location}">
        <include name="CryptoConfig*.properties"/>
      </fileset>
    </path>
      <jar
        destfile="${dir.sde.lib}/Registry.jar"
        filesonly="true" level="${jar.compression}"
        update="true">
        <path refid="cryptoconfig.path"/>
      </jar>
  </target>

  <target name="updateWLPRegistryjar.crypto" if="registry.wlp.jar.crypto.exists">
    <path id="cryptoconfig.path">
      <fileset dir="${crypto.prop.file.location}">
        <include name="CryptoConfig*.properties"/>
      </fileset>
    </path>
      <jar
        destfile="${dir.sde.lib}/WLPRegistry.jar"
        filesonly="true" level="${jar.compression}"
        update="true">
        <path refid="cryptoconfig.path"/>
      </jar>
  </target>
<!--   END FIX 240298 CP -->

  <target name="updateCuramMBeanjar.crypto" if="curammbean.jar.crypto.exists">
    <path id="cryptoconfig.path">
      <fileset dir="${crypto.prop.file.location}">
        <include name="CryptoConfig*.properties"/>
      </fileset>
    </path>
      <jar
        destfile="${dir.sde.lib}/CuramMBean.jar"
        filesonly="true" level="${jar.compression}"
        update="true">
        <path refid="cryptoconfig.path"/>
      </jar>
  </target>

  <target name="internal.verify.project.dir.path"
    depends="internal.check.crypto.location"
    if="crypto.file.exists">
    <property name="overwritecryptojar" value="false"/>
       <condition property="crypto.jar.exists">
        <and>
         <available
         file="${crypto.ext.dir}/${crypto.jar.file}" type="file"/>
          <not>
           <equals arg1="${overwritecryptojar}"
            arg2="true" casesensitive="false"/>
         </not>
        </and>
       </condition>
       <antcall target="internal.update.crypto.jar" inheritall="true"/>
  </target>

  <target name="internal.update.crypto.jar" unless="crypto.jar.exists">
    <condition property="vendor.dir" value="ibm">
        <contains string="${java.vm.vendor}" substring="ibm" casesensitive="no"/>
    </condition>
    <condition property="vendor.dir" value="sun">
      <or>
      <contains string="${java.vm.vendor}" substring="sun" casesensitive="no"/>
      <contains string="${java.vm.vendor}" substring="oracle" casesensitive="no"/>
      <contains string="${java.vm.vendor}" substring="hewlett" casesensitive="no"/>
    </or>
    </condition>

   <copy file="${crypto.prop.file.location}/${vendor.dir}/${crypto.ks.file}"
            todir="${crypto.prop.file.location}" overwrite="true" failonerror="${false}"/>
  <mkdir dir="${dir.bld}"/>
  <delete file="${dir.bld}/${crypto.jar.file}"/>
     <jar destfile="${dir.bld}/${crypto.jar.file}" update="true"
                                      filesonly="true" level="0">
    <fileset dir="${crypto.prop.file.location}">
                       <include name="${crypto.ks.file}"/>
                       <include name="${crypto.prop.file}"/>
                       <include name="${crypto.jvm.vendor}/${crypto.ks.file}"/>
                       <include name="sun/${crypto.ks.file}"/>
                       </fileset>
                 </jar>
                 <copy file="${dir.bld}/${crypto.jar.file}"
      toFile="${crypto.ext.dir}/${crypto.jar.file}" overwrite="${overwritecryptojar}"/>
  </target>
  <target name="internal.check.crypto.location">
 <condition property="crypto.file.exists">
 <available
      file="${crypto.prop.file.location}/${crypto.prop.file}" />
  </condition>
  </target>
</project>
