<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2023. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant file building an EAR file.

-->
<project name="app_buildEAR" default="main"
         xmlns:if="ant:if" xmlns:unless="ant:unless">

  <import file="./app_properties.xml" />

  <import file="./app_utilities.xml" />

  <import file="./app_macros.xml" />

  <!-- For WAS and WLS -->
  <property name="sde.lib.list" value="coreinf.jar
                                       ehcache-core-${version-ehcache-core}.jar
                                       profiler-core.jar
                                       slf4j-api-${version-slf4j-api}.jar
                                       slf4j-jdk14-${version-slf4j-jdk14}.jar
                                       rules.jar
                                       rules_debugger.jar
                                       jde-commons.jar
                                       security-inf.jar
                                       appinf.jar
                                       appinf_internal.jar
                                       gss.jar
                                       guice-${version-guice}.jar
                                       guava-${version-guava}.jar
                                       failureaccess-${version-failureaccess}.jar
                                       javax.inject-${version-javax-inject}.jar
                                       guice-assistedinject-${version-guice-assistedinject}.jar
                                       guice-multibindings-${version-guice-multibindings}.jar
                                       guice-throwingproviders-${version-guice-throwingproviders}.jar
                                       aopalliance.jar
                                       JSON4J_Apache.jar
                                       dom4j-${version-dom4j}.jar
                                       log4j-core-${version-log4j}.jar
                                       log4j-api-${version-log4j}.jar
                                       log4j2-config.jar
                                       icu4j-${version-icu4j}.jar
                                       castor-xml-${version-castor}.jar
									   gson-${version-gson}.jar
                                       xalan-${version-xalan}.jar
                                       serializer-${version-serializer}.jar
                                       xerces-${version-xerces}.jar
                                       commons-pool-${version-commons-pool}.jar
                                       commons-codec-${version-commons-codec}.jar
                                       commons-dbcp-${version-commons-dbcp}.jar
                                       commons-discovery-${version-commons-discovery}.jar
                                       commons-logging-${version-commons-logging}.jar
                                       commons-collections4-${version-commons-collections4}.jar
                                       commons-collections-${version-commons-collections}.jar
                                       commons-beanutils-${version-commons-beanutils}.jar
                                       commons-digester-${version-commons-digester}.jar
                                       commons-validator-${version-commons-validator}.jar
                                       commons-lang-${version-commons-lang}.jar
                                       commons-text-${version-commons-text}.jar
                                       compass.jar
                                       jackson-annotations-${version-jackson-annotations}.jar
                                       jackson-core-${version-jackson-core}.jar
                                       jackson-databind-${version-jackson-databind}.jar
                                       lucene-core-${version-lucene-core}.jar
                                       lucene-analyzers-${version-lucene-analyzers}.jar
                                       wsdl4j-${version-wsdl4j}.jar
                                       java_cup-${version-java_cup}.jar
                                       antlr-${version-antlr}.jar
                                       wss4j-${version-wss4j}.jar
                                       xmlsec-${version-xmlsec}.jar
                                       xmlunit-core-${version-xmlunit-core}.jar
                                       bcel-${version-bcel}.jar
                                       license_metric_logger_${version-license-metric-logger}.jar
									   cglib-nodep-${version-cglib-nodep}.jar
                                       java-jwt-${version-java-jwt}.jar"/>

  <property name="app.lib.list" value="properties.jar
                                       application.jar
                                       codetable.jar
                                       messages.jar
                                       message_properties.jar
                                       events.jar
                                       struct.jar
                                       implementation.jar
                                       axis2-wsc-proxy.jar"/>

  <property name="dd.type" value=""/>
  <property name="wls.lib.dir" value="${WLS_HOME}/lib"/>
  <path id="sde.class.path">
    <fileset dir="${dir.sde.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>


  <property file="${app.prop.location}"/>

  <!-- By default the run as username is SYSTEM. -->
  <!-- This can be overwritten in AppServer.properties. -->
  <property name="runas.user"     value="SYSTEM"/>
  <property name="curam.principal.name" value="Curam"/>

  <target name="get.appserver">
    <condition property="isWAS">
      <equals arg1="${dd.type}" arg2="WAS"/>
    </condition>
    <condition property="isWLP">
      <equals arg1="${dd.type}" arg2="WLP"/>
    </condition>
    <condition property="isWLS">
      <equals arg1="${dd.type}" arg2="WLS"/>
    </condition>


    <!-- Populate the appropriate vendor name -->
    <condition property="vendor.name" value="IBM">
      <equals arg1="${dd.type}" arg2="WAS"/>
    </condition>
    <condition property="vendor.name" value="WLP">
      <equals arg1="${dd.type}" arg2="WLP"/>
    </condition>
    <condition property="vendor.name" value="BEA">
      <equals arg1="${dd.type}" arg2="WLS"/>
    </condition>
    <property name="vendor.name" value="" />

  </target>

  <target name="set.build.facade">
    <condition property="build.facade">
      <resourcecount when="greater" count="0">
        <fileset dir="${dir.bld.svr.gen}">
          <include name="${project.package}/**/remote/*Bean.java"/>
        </fileset>
      </resourcecount>
    </condition>
  </target>

  <!--  *****************  -->
  <!--  ***  M A I N  ***  -->
  <!--  *****************  -->
  <target name="main" description="Builds ear file" depends="get.appserver, set.build.facade">
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting buildEAR"/>
    </antcall>

    <!-- Check to see if the AppServer.properties file exists -->
    <echo message="Using properties file '${app.prop.location}'."/>
    <condition property="appserver.properties.exists">
      <available file="${app.prop.location}" type="file"/>
    </condition>
    <antcall target="check.properties.exists"/>

    <delete dir="${dir.ear.tmp}"/>
    <delete dir="${dir.ear}/WAS/META-INF"/>
    <delete dir="${dir.ear}/WLP/META-INF"/>
    <delete dir="${dir.ear}/WLS/META-INF"/>
    <delete dir="${dir.ear.combined}"/>

    <mkdir dir="${dir.ear.tmp}"/>
    <mkdir dir="${dir.ear.combined}"/>
    <mkdir dir="${dir.ear.combined}/META-INF"/>
	<mkdir dir="${dir.ear.combined}/lib"/>
    <mkdir dir="${dir.ear.extrajars}"/>
    <mkdir dir="${dir.ear}/${dd.type}"/>

    <taskdef name="handleclasspath" classname="curam.util.tools.AntHandleOptionalClassPath"
      classpath="${jar.tools}:${jar.coreinf}:${jar.coreinf.ejb.interfaces}:${jar.coreinf.ejb}"/>

    <handleclasspath to="manipulated.preclasspath"  from="${sysenv.PRE_CLASSPATH}"  outDir="${dir.ear.extrajars}"/>

    <handleclasspath to="manipulated.component.classpath"  outDir="${dir.ear.extrajars}">
      <fileset dir="${base.dir}/components">
        <include name="*/lib/**/*.jar"/>
        <exclude name="*/lib/*_graphql.jar"/>
      </fileset>
    </handleclasspath>

    <handleclasspath to="manipulated.postclasspath" from="${sysenv.POST_CLASSPATH}" outDir="${dir.ear.extrajars}"/>

    <available file="${jar.axis2.wsc.proxy}"  type="file" property="axis2.wsc.proxy.present"  value="axis2-wsc-proxy.jar" />
    <property name="axis2.wsc.proxy.present"  value=""/>

    <!-- coreinf-ejb-interfaces.jar causes conflicts with Registry.jar in the Liberty classloader. -->
    <condition property="include.coreinf.interfaces" value="coreinf-ejb-interfaces.jar">
      <not>
        <equals arg1="${dd.type}" arg2="WLP" casesensitive="no"/>
      </not>
    </condition>
    <property name="include.coreinf.interfaces" value=""/>

    <manifest file="${dir.ear.tmp}/Manifest.mf">
      <attribute name="Class-Path" value="
        ${manipulated.preclasspath}
        application.jar
        codetable.jar
        messages.jar
        message_properties.jar
        properties.jar
        struct.jar
        events.jar
        ${axis2.wsc.proxy.present}
        ${manipulated.component.classpath}
        appinf.jar
        appinf_internal.jar
        gss.jar
        coreinf.jar
        ${include.coreinf.interfaces}
        ehcache-core-${version-ehcache-core}.jar
        profiler-core.jar
        slf4j-api-${version-slf4j-api}.jar
        slf4j-jdk14-${version-slf4j-jdk14}.jar
        rules.jar
        rules_debugger.jar
        jde-commons.jar
        dom4j-${version-dom4j}.jar
        security-inf.jar
        guice-${version-guice}.jar
        guava-${version-guava}.jar
        failureaccess-${version-failureaccess}.jar
        javax.inject-${version-javax-inject}.jar
        guice-assistedinject-${version-guice-assistedinject}.jar
        guice-multibindings-${version-guice-multibindings}.jar
        guice-throwingproviders-${version-guice-throwingproviders}.jar
        aopalliance.jar
        JSON4J_Apache.jar
        log4j-core-${version-log4j}.jar
        log4j-api-${version-log4j}.jar
        log4j2-config.jar
        icu4j-${version-icu4j}.jar
        commons-pool-${version-commons-pool}.jar
        commons-codec-${version-commons-codec}.jar
        commons-discovery-${version-commons-discovery}.jar
        commons-logging-${version-commons-logging}.jar
        commons-collections4-${version-commons-collections4}.jar
        commons-collections-${version-commons-collections}.jar
        commons-beanutils-${version-commons-beanutils}.jar
        commons-digester-${version-commons-digester}.jar
        commons-validator-${version-commons-validator}.jar
        commons-lang-${version-commons-lang}.jar
        commons-text-${version-commons-text}.jar
        commons-dbcp-${version-commons-dbcp}.jar
        compass.jar
        jackson-annotations-${version-jackson-annotations}.jar
        jackson-core-${version-jackson-core}.jar
        jackson-databind-${version-jackson-databind}.jar
        lucene-core-${version-lucene-core}.jar
        lucene-analyzers-${version-lucene-analyzers}.jar
        wsdl4j-${version-wsdl4j}.jar
        java_cup-${version-java_cup}.jar
        antlr-${version-antlr}.jar
        castor-xml-${version-castor}.jar
		gson-${version-gson}.jar
        xalan-${version-xalan}.jar
        serializer-${version-serializer}.jar
        xerces-${version-xerces}.jar
        wss4j-${version-wss4j}.jar
        xmlsec-${version-xmlsec}.jar
        bcel-${version-bcel}.jar
        license_metric_logger_${version-license-metric-logger}.jar
        xmlunit-core-${version-xmlunit-core}.jar
		cglib-nodep-${version-cglib-nodep}.jar
        java-jwt-${version-java-jwt}.jar
      ${sde.lib.axis2.list}
      ${sde.lib.axis2.rampart.list}
      ${manipulated.postclasspath}"/>
      <section name="common">
        <attribute name="Specification-Title"   value="CuramSDEJ"/>
        <attribute name="Specification-Vendor"  value="IBM Corporation"/>
      </section>
    </manifest>

    <echo message="Building the component pieces of ${SERVER_MODEL_NAME}.ear..."/>

    <copy toDir="${dir.ear}/WAS/META-INF">
      <fileset dir="${dir.templates}">
        <include name="*.xml"/>
        <include name="*.mf"/>
        <include name="*.policy"/>
        <exclude name="application-j2ee-engine.xml"/>
        <exclude name="jms-resources.xml"/>
        <exclude name="data-sources*.xml"/>
      </fileset>
    </copy>

    <copy toDir="${dir.ear}/WLP/META-INF">
      <fileset dir="${dir.templates}">
        <include name="*.xml"/>
        <include name="*.mf"/>
        <include name="*.policy"/>
        <exclude name="application-j2ee-engine.xml"/>
        <exclude name="jms-resources.xml"/>
        <exclude name="data-sources*.xml"/>
      </fileset>
    </copy>

    <copy toDir="${dir.ear}/WLS/META-INF">
      <fileset dir="${dir.templates}">
        <include name="*.xml"/>
        <include name="*.mf"/>
        <include name="*.policy"/>
        <exclude name="application-j2ee-engine.xml"/>
        <exclude name="jms-resources.xml"/>
        <exclude name="data-sources*.xml"/>
      </fileset>
    </copy>


    <available property="multiple.clients.required" file="${deployment.packaging.file}" />

    <copy toDir="${dir.ear}/Multiple">
      <fileset dir="${dir.ear}/${dd.type}" includes="META-INF/*" excludes="META-INF/app-Manifest.mf"/>
    </copy>

    <echo message="org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactoryImpl"
          file="${dir.ear.combined}/commons-logging.properties"/>


    <!-- Server needs to be generated before the client as it is used in multiple EAR files -->
    <antcall target="generate.server"/>

    <antcall target="generate.client"/>

    <condition property="prop.standard.ear.build">
      <or>
        <istrue value="${server.only}"/>
        <not><isset property="multiple.clients.required"></isset></not>
      </or>
    </condition>

    <antcall target="create.standard.ear"/>

    <!-- delete temp -->
    <delete dir="${dir.ear.tmp}"/>
    <delete dir="${dir.ear.combined}"/>
    <delete dir="${dir.ear}/WAS/META-INF"/>
    <delete dir="${dir.ear}/WLP/META-INF"/>
    <delete dir="${dir.ear}/WLS/META-INF"/>
    <delete dir="${dir.ear}/Multiple"/>

  </target>

  <target name="create.standard.ear" if="prop.standard.ear.build">

    <copy toDir="${dir.ear.combined}">
      <fileset dir="${dir.ear}/${dd.type}" includes="META-INF/*" excludes="META-INF/app-Manifest.mf"/>
    </copy>

    <replace dir="${dir.ear.combined}/META-INF">
      <include name="application.xml"/>
      <replacefilter token="@PROJECTNAME@" value="${SERVER_MODEL_NAME}"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@WEB_MODULE@" value=""/>
      <replacefilter token="@HELP_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear.combined}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@WEB_MODULE@" value=""/>
      <replacefilter token="@HELP_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear.combined}/META-INF">
      <include name="ibm-application-ext.xmi"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear.combined}">
      <include name="jms*.xml"/>
      <replacefilter token="@APPLICATION_NAME@" value="${SERVER_MODEL_NAME}"/>
    </replace>
	
    <!--Copy implementation.jar to the EAR Bundled Library directory-->
    <copy toDir="${dir.ear.combined}/lib" file="${jar.implementation}"/>	

    <antcall target="create.single.ear">
      <param name="ear.name"          value="${SERVER_MODEL_NAME}"/>
      <param name="source.directory"  value="${dir.ear.combined}"/>
      <param name="appxml"            value="${dir.ear.combined}/META-INF/application.xml"/>
    </antcall>

  </target>

  <target name="create.single.ear">

    <delete file="${dir.ear}/${dd.type}/${ear.name}.ear"/>

    <ear
      destfile="${dir.ear}/${dd.type}/${ear.name}.ear"
      appxml="${appxml}"
      manifest="${dir.templates}/app-Manifest.mf"
      basedir="${source.directory}" duplicate="preserve">
    </ear>

  </target>

  <target name="generate.client" unless="server.only">
    <antcall target="generate.multiple.client"/>
    <antcall target="generate.single.client"/>
  </target>

  <target name="generate.multiple.client" if="multiple.clients.required">

    <delete dir="${client.dir}/build/clients"/>
    <mkdir dir="${client.dir}/build/clients"/>

    <taskdef name="clientcopy"
      classname="curam.util.tools.AntClientCopy"
      classpath="${jar.tools}:${jar.coreinf}:${jar.dom4j}:${jar.commons}:${jar.guice}:${jar.guava}:${jar.failureaccess}:${jar.javax.inject}:
                 ${jar.aopalliance}:${jar.guice-assistedinject}:
                 ${jar.guice-multibindings}:${jar.guice-throwingproviders}"/>

    <clientcopy
      clientdir="${client.dir}"
      deploymentconfig="${deployment.packaging.file}"
      locales="${sysenv.LOCALE_LIST}"
      outdir="${client.dir}/build/clients">
    </clientcopy>

    <subant verbose="true" target="looped.client.build" inheritall="false" genericantfile="${dir.sde.bin}/app_buildEAR.xml">
      <dirset dir="${client.dir}/build/clients" includes="*"/>
    </subant>

  </target>

  <!--  *****************************  -->
  <!--  ***  LOOPED.CLIENT.BUILD  ***  -->
  <!--  *****************************  -->
  <target name="looped.client.build" depends="get.appserver">
    <delete dir="${dir.ear.client}"/>
    <mkdir dir="${dir.ear.client}"/>
    <mkdir dir="${basedir}/components/core"/>

    <loadproperties srcFile="${basedir}/deployment.properties"/>

    <delete dir="${dir.ear}/${ear.name}"/>
    <mkdir dir="${dir.ear}/${ear.name}"/>

    <!-- Default to a fresh copy, this is overriden by
         the server versions if this module includes the server -->
    <copy toDir="${dir.ear}/${ear.name}">
      <fileset dir="${dir.ear}/Multiple" includes="META-INF/*" excludes="META-INF/app-Manifest.mf, META-INF/LoginModuleConfiguration.xml"/>
    </copy>

    <property name="filtered.files"
      value="**/application.xml,**/web.xml,**/weblogic-application.xml,**/weblogic-ejb-jar.xml" />

    <!-- Copy all the required files except those that will be filtered. -->
    <copy todir="${dir.ear.client}">
      <fileset dir="${dir.cde.ear}/common" excludes="${filtered.files}" />
      <fileset dir="${dir.cde.ear}/${dd.type}" excludes="${filtered.files}" />
    </copy>

    <!-- In the event of an EAR being split, Liberty JNDI lookups need
         to know where to look for the server code. -->
    <condition property="SERVERCONN_APP_NAME" value="${curam.ejbserver.app.name}" else="${SERVER_MODEL_NAME}">
        <isset property="curam.ejbserver.app.name"/>
    </condition>

    <copy todir="${dir.ear.client}" verbose="true" overwrite="true">
      <fileset dir="${dir.cde.ear}/${dd.type}" includes="**/ServerConnection.properties" />
      <filterset>
        <filter token="SVRCONN_APP_NAME" value="${SERVERCONN_APP_NAME}" />
        <filter token="SVRCONN_MOD_NAME" value="coreinf-ejb" />
      </filterset>
    </copy>

    <!-- Move all curam-config.deployment to curam-config.xml files. -->
    <move todir="${basedir}/components" overwrite="true">
      <fileset dir="${basedir}/components">
        <include name="*/curam-config.deployment"/>
      </fileset>
      <mapper type="glob" from="*.deployment" to="*.xml"/>
    </move>

    <condition property="looped.server.required">
       <istrue value="${ear.requireServer}"/>
    </condition>
    <condition property="looped.server.required.multi">
       <istrue value="${ear.multi.requireServer}"/>
    </condition>

    <antcall target="append.to.ApplicationConfiguration"/>
    <property name="ear.component.order" value=" "/>

    <exec executable="cmd.exe"
      dir="${client.dir}"
      osfamily="windows"
      failonerror="true">
      <arg line="/c call"/>
      <arg line="${client.dir}/build.bat"/>
      <arg line="client"/>
      <env key="ANT_CMD_LINE_ARGS"      value=""/>
      <env key="CLIENT_DIR"             path="${basedir}"/>
      <env key="CLIENT_COMPONENT_ORDER" value="${ear.component.order}"/>
      <env key="SKIP_ENV"               value="TRUE"/>
    </exec>

    <exec executable="${client.dir}/build.sh"
      dir="${client.dir}"
      osfamily="unix"
      failonerror="true">
      <arg line="client"/>
      <env key="CLIENT_DIR"             path="${basedir}"/>
      <env key="CLIENT_COMPONENT_ORDER" value="${ear.component.order}"/>
      <env key="SKIP_ENV"               value="TRUE"/>
    </exec>

    <!-- Is the Server Required -->
    <antcall target="looped.server.build"/>

    <!-- Load web.xml configuration settings generated from client build.
         These will be used in the following filter.
      -->
    <loadfile property="init.params.text"
              srcFile="${basedir}/build/web-init-params.xml"/>

    <copy todir="${dir.ear.client}">
      <fileset dir="${dir.cde.ear}/common" includes="${filtered.files}" />
      <fileset dir="${dir.cde.ear}/${dd.type}" includes="${filtered.files}" />
      <filterset>
        <filter token="APP_NAME"           value="${SERVER_MODEL_NAME}" />
        <filter token="SERVER"             value="localhost" />
        <filter token="PORT"               value="${curam.server.port}" />
        <filter token="LOCALE_INIT_PARAMS" value="${init.params.text}" />
        <!-- A boolean used to enable or disable the secure URLs solution -->
        <filter token="ENABLE_SECURE_URLS" value="${enable.secure.urls}" />
      </filterset>
    </copy>

    <!-- Copy the web.xml from the override directory if it exists. -->
    <available property="customWebXml" file="${ear.custom.web.xml}/web.xml" />
    <antcall target="copy.customWebXml">
      <param name="web.xml.temp.location" value="${dir.ear.client}/war/WEB-INF"/>
      <param name="web.xml.override.location" value="${ear.custom.web.xml}"/>
    </antcall>

    <antcall target="client.substitute.principal.name"/>

    <mkdir dir="${dir.ear.client}/war/WEB-INF/lib" />
    <echo file="${basedir}/WebContent/WEB-INF/classes/curam/omega3/ApplicationConfiguration.properties"
      append="true">${line.separator}vendor=${dd.type}${line.separator}</echo>

    <path id="classes.path">
      <fileset dir="${basedir}/WebContent/WEB-INF/classes" />
    </path>

    <antcall target="create.class.checksum" inheritall="false">
      <param name="checksumbasedir" value="${basedir}/WebContent/WEB-INF/classes"/>
      <param name="checksumpath" value="classes.path"/>
      <reference refid="classes.path" />
    </antcall>

    <jar destfile="${dir.ear.client}/war/WEB-INF/lib/${SERVER_MODEL_NAME}_classes.jar">
      <fileset dir="${basedir}/WebContent/WEB-INF/classes" />
    </jar>

    <delete>
      <fileset dir="${basedir}/WebContent/WEB-INF/classes">
        <include name="**/${fil.jar.checksum}"/>
      </fileset>
    </delete>

    <!-- Once we have copied all files into the ClientModule.war file structure, we then need to extract out the
    contents of the 1_struct.jar file. This is due to the fact we do not know how this jar may be loaded.
    It will depend on the system. Therefore, by extracting the contents and putting the class files in the
    web-inf/classes directory, the classes in this struct.jar file that may contain customized classes
    are guaranteed to take precedence. -->
    <unzip src="${basedir}/WebContent/WEB-INF/lib/1_struct.jar"
           dest="${basedir}/WebContent/WEB-INF/lib/temp_1_struct/WEB-INF/classes"/>

    <antcall target="-update.serverconnection.properties">
      <param name="path.to.omega3coreinf" value="${basedir}/WebContent/WEB-INF/lib/omega3-coreInf.jar" />
      <param name="path.to.webinf-classes" value="${dir.ear.client}/war/WEB-INF/classes" />
    </antcall>

    <jar destfile="${dir.ear}/${ear.name}/ClientModule.war">
      <fileset dir="${basedir}/WebContent">
        <exclude name="WEB-INF/classes/**" />
        <exclude name="WEB-INF/lib/${CLIENT_PROJECT_NAME}_classes.jar" />
        <exclude name="**/*.xmi" />
        <exclude name="**/web.xml" />
        <exclude name="WEB-INF/lib/temp_1_struct/**"/>
        <exclude name="WEB-INF/lib/1_struct.jar"/>
        <exclude name="WEB-INF/lib/coreinf-ejb-interfaces.jar" if:set="isWLP" />
        <exclude name="WEB-INF/lib/log4j2-config.jar"/>
      </fileset>
      <!-- include the expanded 1_struct.jar contents -->
      <fileset dir="${basedir}/WebContent/WEB-INF/lib/temp_1_struct"/>
      <fileset dir="${dir.ear.client}/war" />
    </jar>
    <!-- delete the temp directory -->
    <delete dir="${basedir}/WebContent/WEB-INF/lib/temp_1_struct"/>

    <replace dir="${dir.ear}/${ear.name}/META-INF">
      <include name="application.xml"/>
      <replacefilter
        token="@WEB_MODULE@"
        value="&lt;module id=&quot;WebModule_ClientModule&quot;&gt;&lt;web&gt;&lt;web-uri&gt;ClientModule.war&lt;/web-uri&gt;&lt;context-root&gt;${ear.context.root}&lt;/context-root&gt;&lt;/web&gt;&lt;/module&gt;"/>
    </replace>

    <replace dir="${dir.ear}/${ear.name}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter
        token="@WEB_MODULE@"
        value="&lt;module-ref&gt;&lt;module-uri&gt;${ear.context.root}&lt;/module-uri&gt;&lt;/module-ref&gt;"/>
    </replace>

    <antcall target="create.invalidation.module">
      <param name="dd.directory"     value="${dir.ear}/${ear.name}/META-INF"/>
      <param name="output.directory" value="${dir.ear}/${ear.name}"/>
    </antcall>

    <replace dir="${dir.ear}/${ear.name}/META-INF">
      <include name="application.xml"/>
      <replacefilter token="@PROJECTNAME@" value="${ear.name}"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@WEB_MODULE@" value=""/>
      <replacefilter token="@HELP_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear}/${ear.name}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@WEB_MODULE@" value=""/>
      <replacefilter token="@HELP_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear}/${ear.name}/META-INF">
      <include name="ibm-application-ext.xmi"/>
      <replacefilter token="@EJB_MODULE@" value=""/>
      <replacefilter token="@INFRASTRUCTURE_MODULE@" value=""/>
      <replacefilter token="@FACADE_MODULE@" value=""/>
      <replacefilter token="@SEARCH_MODULE@" value=""/>
    </replace>

    <replace dir="${dir.ear.combined}">
      <include name="jms*.xml"/>
      <replacefilter token="@APPLICATION_NAME@" value="${SERVER_MODEL_NAME}"/>
    </replace>
	
    <!--Copy implementation.jar to the EAR Bundled Library directory when building the Curam.ear client-->
    <antcall target="include.bundled.library.in.Curam.ear">
      <param name="ear.name" value="${ear.name}"/>
    </antcall>	

    <antcall target="create.single.ear">
      <param name="ear.name"          value="${ear.name}"/>
      <param name="source.directory"  value="${dir.ear}/${ear.name}"/>
      <param name="appxml"            value="${dir.ear}/${ear.name}/META-INF/application.xml"/>
    </antcall>

    <delete dir="${dir.ear}/${ear.name}"/>
    <delete dir="${dir.ear.client}"/>

  </target>

  <target name="-update.serverconnection.properties" if="isWLP">

    <property name="path.to.omega3coreinf" value="" />
    <property name="path.to.webinf-classes" value="" />
    <condition property="can.update.serverconnection">
      <and>
        <available file="${path.to.omega3coreinf}" />
        <available file="${path.to.webinf-classes}/curam/omega3/ServerConnection.properties" />
      </and>
    </condition>

    <jar destfile="${path.to.omega3coreinf}" update="true" if:set="can.update.serverconnection">
      <zipfileset dir="${path.to.webinf-classes}"
                  includes="curam/omega3/ServerConnection.properties"
                  fullpath="curam/omega3/ServerConnection.properties"/>
    </jar>

  </target>

  <target name="append.to.ApplicationConfiguration" unless="looped.server.required">
    <echo file="${basedir}/JavaSource/curam/omega3/ApplicationConfiguration.properties"
      append="true">
dynamicUIMInitModelOnStart=false
    </echo>

  </target>

  <target name="looped.server.build"
    if="looped.server.required" >

    <antcall target="looped.server.build.single"/>
    <antcall target="looped.server.build.multi"/>
    <copy toDir="${dir.ear}/${ear.name}" overwrite="true">
      <fileset dir="${dir.ear}/${dd.type}" includes="META-INF/*" excludes="META-INF/app-Manifest.mf"/>
    </copy>

  </target>

  <target name="looped.server.build.single" unless="looped.server.required.multi">
    <mkdir dir="${dir.ear}/${ear.name}" />
    <move todir="${dir.ear}/${ear.name}">
      <fileset dir="${dir.ear.combined}">
        <include name="**/*.jar"/>
      </fileset>
    </move>
  </target>

  <target name="looped.server.build.multi" if="looped.server.required.multi">
    <mkdir dir="${dir.ear}/${ear.name}" />
    <copy todir="${dir.ear}/${ear.name}">
      <fileset dir="${dir.ear.combined}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!--  ************************************  -->
  <!--  ***  CREATE.INVALIDATION.MODULE  ***  -->
  <!--  ************************************  -->
  <target name="create.invalidation.module">

    <replace dir="${dd.directory}">
      <include name="ibm-application-ext.xmi"/>
      <replacefilter
        token="@EJB_MODULE@"
        value="&lt;moduleExtensions xmi:type=&quot;applicationext:EjbModuleExtension&quot; xmi:id=&quot;EjbModule_InvalidationModule&quot; altRoot=&quot;ALT-INF/InvalidationModule.jar&quot;&gt;
        &lt;module xmi:type=&quot;application:EjbModule&quot; href=&quot;META-INF/application.xml#EjbModule_InvalidationModule&quot;/&gt;
      &lt;/moduleExtensions&gt;"/>
    </replace>

    <replace dir="${dd.directory}">
      <include name="application.xml"/>
      <replacefilter
        token="@EJB_MODULE@"
        value="&lt;module id=&quot;EjbModule_InvalidationModule&quot;&gt;&lt;ejb&gt;InvalidationModule.jar&lt;/ejb&gt;&lt;/module&gt;"/>
    </replace>

    <replace dir="${dd.directory}">
      <include name="weblogic-application.xml"/>
      <replacefilter
        token="@EJB_MODULE@"
        value="&lt;module-ref&gt;&lt;module-uri&gt;InvalidationModule.jar&lt;/module-uri&gt;&lt;/module-ref&gt;"/>
    </replace>

    <antcall target="client.substitute.run.as"/>

    <jar destfile="${output.directory}/InvalidationModule.jar">
      <fileset dir="${dir.ear.client}/ejb-jar" />
    </jar>

  </target>

  <!--  *** Substitute with the 'runas.user' property, if specified. Else default to SYSTEM -->
  <target name="client.substitute.run.as">
    <replace dir="${dir.ear.client}/ejb-jar/META-INF">
      <include name="weblogic-ejb-jar.xml"/>
      <replacefilter token="$RUN_AS_USER_NAME$" value="${runas.user}"/>
    </replace>
  </target>

   <!--  *** Substitute with the 'principal.name' property, if specified. Else default to Curam -->
  <target name="client.substitute.principal.name">
    <replace dir="${dir.ear.client}/war/WEB-INF">
      <include name="weblogic.xml"/>
      <replacefilter token="$CURAM_PRINCIPAL_NAME$" value="${curam.principal.name}"/>
    </replace>
  </target>

  <!--  ********************************  -->
  <!--  ***  GENERATE.SINGLE.CLIENT  ***  -->
  <!--  ********************************  -->
  <target name="generate.single.client" unless="multiple.clients.required">

    <delete dir="${dir.ear.client}"/>
    <mkdir dir="${dir.ear.client}"/>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="application.xml"/>
      <replacefilter
        token="@WEB_MODULE@"
        value="&lt;module id=&quot;WebModule_ClientModule&quot;&gt;&lt;web&gt;&lt;web-uri&gt;ClientModule.war&lt;/web-uri&gt;&lt;context-root&gt;/${CLIENT_PROJECT_NAME}&lt;/context-root&gt;&lt;/web&gt;&lt;/module&gt;"/>
    </replace>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter
        token="@WEB_MODULE@"
        value="&lt;module-ref&gt;&lt;module-uri&gt;/${CLIENT_PROJECT_NAME}&lt;/module-uri&gt;&lt;/module-ref&gt;"/>
    </replace>

    <property name="filtered.files"
      value="**/application.xml,**/web.xml,**/weblogic-application.xml,**/weblogic-ejb-jar.xml" />

    <!-- Copy all the required files except those that will be filtered. -->
    <copy todir="${dir.ear.client}">
      <fileset dir="${dir.cde.ear}/common" excludes="${filtered.files}" />
      <fileset dir="${dir.cde.ear}/${dd.type}" excludes="${filtered.files}" />
    </copy>

    <!-- In the event of an EAR being split, Liberty JNDI lookups need
         to know where to look for the server code. -->
    <condition property="SERVERCONN_APP_NAME" value="${curam.ejbserver.app.name}" else="${SERVER_MODEL_NAME}">
        <isset property="curam.ejbserver.app.name"/>
    </condition>

    <copy todir="${dir.ear.client}" verbose="true" overwrite="true">
      <fileset dir="${dir.cde.ear}/${dd.type}" includes="**/ServerConnection.properties" />
      <filterset>
        <filter token="SVRCONN_APP_NAME" value="${SERVERCONN_APP_NAME}" />
        <filter token="SVRCONN_MOD_NAME" value="coreinf-ejb" />
      </filterset>
    </copy>

    <!-- Load web.xml configuration settings generated from client build.
         These will be used in the following filter.  -->
    <loadfile property="init.params.text" srcFile="${client.dir}/build/web-init-params.xml"/>

    <!-- Copy all the files that will be filtered and apply the filter -->
    <copy todir="${dir.ear.client}">
      <fileset dir="${dir.cde.ear}/common" includes="${filtered.files}" />
      <fileset dir="${dir.cde.ear}/${dd.type}" includes="${filtered.files}" />
      <filterset>
        <filter token="APP_NAME"           value="${SERVER_MODEL_NAME}" />
        <filter token="SERVER"             value="localhost" />
        <filter token="PORT"               value="${curam.server.port}" />
        <filter token="LOCALE_INIT_PARAMS" value="${init.params.text}" />
        <!-- A boolean used to enable or disable the secure URLs solution -->
        <filter token="ENABLE_SECURE_URLS" value="${enable.secure.urls}" />
      </filterset>
    </copy>

    <antcall target="create.invalidation.module">
      <param name="dd.directory"     value="${dir.ear}/${dd.type}/META-INF"/>
      <param name="output.directory" value="${dir.ear.combined}"/>
    </antcall>

    <!-- Copy the web.xml from the override directory if it exists. -->
    <available property="customWebXml" file="${client.dir}/project/ear/${dd.type}/web.xml" />
    <antcall target="copy.customWebXml">
      <param name="web.xml.temp.location" value="${dir.ear.client}/war/WEB-INF"/>
      <param name="web.xml.override.location" value="${client.dir}/project/ear/${dd.type}"/>
    </antcall>

    <antcall target="-update.serverconnection.properties">
      <param name="path.to.omega3coreinf" value="${client.dir}/WebContent/WEB-INF/lib/omega3-coreInf.jar" />
      <param name="path.to.webinf-classes" value="${dir.ear.client}/war/WEB-INF/classes" />
    </antcall>

    <jar destfile="${dir.ear.combined}/ClientModule.war">
      <fileset dir="${client.dir}/WebContent">
        <exclude name="WEB-INF/classes/**" />
        <exclude name="**/*.xmi" />
        <exclude name="**/web.xml" />
      </fileset>
      <fileset dir="${dir.ear.client}/war" />
    </jar>
    <delete dir="${dir.ear.client}"/>
  </target>


  <!-- Copy the web.xml from the override directory if it exists and apply
       filterset.
    -->
  <target name="copy.customWebXml" if="customWebXml">
    <copy todir="${web.xml.temp.location}" overwrite="true">
      <fileset dir="${web.xml.override.location}" includes="web.xml" />
      <filterset>
        <filter token="APP_NAME"           value="${SERVER_MODEL_NAME}" />
        <filter token="SERVER"             value="localhost" />
        <filter token="PORT"               value="${curam.server.port}" />
        <filter token="LOCALE_INIT_PARAMS" value="${init.params.text}" />
        <!-- A boolean used to enable or disable the secure URLs solution -->
        <filter token="ENABLE_SECURE_URLS" value="${enable.secure.urls}" />
      </filterset>
    </copy>
  </target>

  <!--  ***************************************  -->
  <!--  ***  G E N E R A T E   S E R V E R  ***  -->
  <!--  ***************************************  -->
  <target name="generate.server" unless="client.only">

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="application.xml"/>
      <replacefilter
        token="@INFRASTRUCTURE_MODULE@"
        value="&lt;module id=&quot;EjbModule_InfrastructureModule&quot;&gt;&lt;ejb&gt;coreinf-ejb.jar&lt;/ejb&gt;&lt;/module&gt;"/>
    </replace>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter
        token="@INFRASTRUCTURE_MODULE@"
        value="&lt;module-ref&gt;&lt;module-uri&gt;coreinf-ejb.jar&lt;/module-uri&gt;&lt;/module-ref&gt;"/>
    </replace>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="ibm-application-ext.xmi"/>
      <replacefilter
        token="@INFRASTRUCTURE_MODULE@"
        value="&lt;moduleExtensions xmi:type=&quot;applicationext:EjbModuleExtension&quot; xmi:id=&quot;EjbModule_InfrastructureModule&quot; altRoot=&quot;ALT-INF/coreinf-ejb.jar&quot;&gt;
    &lt;module xmi:type=&quot;application:EjbModule&quot; href=&quot;META-INF/application.xml#EjbModule_InfrastructureModule&quot;/&gt;
  &lt;/moduleExtensions&gt;"/>
    </replace>

  <!-- Call the mergeShortnames target to ensure that the shortnames get merged and the
     CombinedShortNames.properties file gets created. If the user does not run the
     database target, then the CombinedShortNames.properties may not have been created. -->
    <ant
      antfile="${dir.sde.bin}/build.xml"
      target="mergeshortnames"
      inheritall="false">
    </ant>

    <!-- Generate stubs and skeletons for EJBs -->
    <antcall target="generatewasstub"/>
    <antcall target="generatewlpstub"/>
    <antcall target="generatewlsstub"/>

     <antcall target="updateiegjar" inheritall="false">
      <param name="ieg.jar.name" value="IntelligentEvidenceGathering.jar"/>
      <param name="ieg.jar.full.path" value="${dir.ear.combined}"/>
    </antcall>

    <antcall target="include-cglib-in-server"/>

  </target>

  <target name="include-cglib-in-server" if="server.only">

    <echo message="Including ${jar.cglib.nodep} in the Server Code ear."/>
    <copy todir="${dir.ear.combined}" file="${jar.cglib.nodep}"/>

  </target>
  
  <target name="include.bundled.library.in.Curam.ear" if="is.curam.ear" depends="test.if.curam.ear" >
    <echo message="Including the ${jar.implementation} in the Curam.ear bundled library."/>
    <copy toDir="${dir.ear}/${ear.name}/lib" file="${jar.implementation}"/>
  </target>

  <target name="test.if.curam.ear">
    <condition property="is.curam.ear">
      <matches string="${ear.name}" pattern="^Curam$"/>
    </condition>
  </target>  

  <!-- Copy various properties files to the EAR build directory. -->
  <target name="-copypropsfiles">
    <copy todir="${dir.ear}" >
      <fileset dir="${prop.file.location}" casesensitive="false">
        <include name="*.properties" />
        <include name="log4j2*" />
        <exclude name="*Shortnames.properties"/>
        <exclude name="*CryptoConfig.properties"/>
        <exclude name="JWTKeystore.properties"/>
        <exclude name="Application.properties" />
        <exclude name="AppServer.properties" />
        <exclude name="WebsphereApplication.properties" />
        <exclude name="WLSApplication.properties" />
        <exclude name="WLSApplication.properties" />
        <exclude name="Bootstrap.properties" />
      </fileset>
      <fileset dir="${dir.project.properties}" casesensitive="false">
        <include name="*.properties" />
        <exclude name="*CryptoConfig.properties"/>
        <exclude name="*Shortnames.properties"/>
        <exclude name="JWTKeystore.properties"/>
        <exclude name="Application.properties" />
        <exclude name="AppServer.properties" />
        <exclude name="WebsphereApplication.properties" />
        <exclude name="WLSApplication.properties" />
        <exclude name="WLSApplication.properties" />
        <exclude name="Bootstrap.properties" />
      </fileset>
      <fileset dir="${dir.bld.svr.cls}" casesensitive="false">
        <include name="CombinedShortNames.properties"/>
      </fileset>
    </copy>

    <!-- Include other bootstrap properties. -->
    <antcall target="import.bootstrap.properties">
      <param name="output.file" value="${dir.ear}/Bootstrap.properties"/>
      <param name="extra.arg.1" value="curam.environment.as.vendor=${vendor.name}"/>
      <param name="extra.arg.2" value="#"/>
    </antcall>

    <!-- Update instance details for SLM Logger. -->
    <taskdef name="updateProperty" classname="curam.util.tools.UpdateApplicationStaticProperty"
              classpath="${jar.coreinf}:${jar.tools}"/>
    <copy todir="${dir.ear}" file="${dir.sde.lib}/license_metric_logger.properties"/>
    <hostinfo prefix="host"/>
    <updateProperty propLocation="${dir.ear}/license_metric_logger.properties"
        propertyName="curam.license.metric.logger.build.host"
        propValue="${host.NAME}"/>
    <pathconvert targetos="unix" property="replaced.SERVER_DIR">
        <path location="${SERVER_DIR}"/>
    </pathconvert>
    <updateProperty propLocation="${dir.ear}/license_metric_logger.properties"
        propertyName="curam.license.metric.logger.build.location"
        propValue="${replaced.SERVER_DIR}"/>

</target>


  <!--  *******************************************  -->
  <!--  ***  G E N E R A T E   W L S   S T U B  ***  -->
  <!--  *******************************************  -->
  <!-- Generates stubs and skeletons for EJBs -->
  <target name="generatewlsstub" if="isWLS">

  <!-- Copy the property files -->
  <antcall target="-copypropsfiles" />

    <!-- Create the properties.jar -->
    <antcall target="create.properties.jar" />

    <antcall target="updateejbjar" inheritall="false">
      <param name="facade" value="InfrastructureModule"/>
      <param name="ejb.jar.name" value="coreinf-ejb.jar"/>
      <param name="ejb.jar.full.path" value="${jar.coreinf.ejb}"/>
    </antcall>
    <antcall target="updatefacadejar" inheritall="false"/>

    <copy toDir="${dir.ear.combined}">
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.rampart.list}"/>
      <fileset dir="${dir.sde.lib}" includes="coreinf-ejb-interfaces.jar"/>
      <fileset dir="${dir.bld.jar}" includes="${app.lib.list}"/>
      <fileset dir="${dir.ear.extrajars}" includes="*.jar"/>
    </copy>

    <copy toDir="${dir.ear.combined}" overwrite="true">
      <fileset dir="${dir.ear.tmp}">
        <include name="*.jar"/>
      </fileset>
    </copy>

  </target>


  <!--  *************************************  -->
  <!--  ***  U P D A T E   E J B   J A R  ***  -->
  <!--  *************************************  -->
  <target name="updateejbjar" depends="get.appserver">

    <echo message="Creating the ${facade} Enterprise Bean ..."/>
    <copy toDir="${dir.ear.tmp}" file="${ejb.jar.full.path}"/>

    <!--  *** Substitute with the 'runas.user' property, if specified. Else default to SYSTEM -->
    <unzip src="${dir.ear.tmp}/${ejb.jar.name}"
      dest="${dir.ear.tmp}/RunAs">
      <patternset>
        <include name="META-INF/weblogic-ejb-jar.xml"/>
        <include name="META-INF/*-ejb-jar-bnd.xml"/>
      </patternset>
    </unzip>

    <replace dir="${dir.ear.tmp}/RunAs/META-INF">
      <include name="weblogic-ejb-jar.xml"/>
      <replacefilter token="$RUN_AS_USER_NAME$" value="${runas.user}"/>
    </replace>

    <copy
      file="${dir.ear.tmp}/RunAs/META-INF/wlp-ejb-jar-bnd.xml"
      tofile="${dir.ear.tmp}/RunAs/META-INF/ibm-ejb-jar-bnd.xml"
      overwrite="true" verbose="true" if:set="isWLP"
    />

    <path id="coreinf-ejb.path">
      <fileset dir="${dir.ear.tmp}/RunAs" />
    </path>

    <antcall target="create.class.checksum" inheritall="false">
      <param name="checksumbasedir" value="${j.dst.message}"/>
      <param name="checksumpath" value="coreinf-ejb.path"/>
      <reference refid="coreinf-ejb.path" />
    </antcall>

    <jar destfile="${dir.ear.tmp}/${ejb.jar.name}"
      manifest="${dir.ear.tmp}/Manifest.mf"
      update="true">
      <fileset dir="${dir.ear.tmp}/RunAs">
        <include name="META-INF/weblogic-ejb-jar.xml"/>
        <include name="META-INF/*-ejb-jar-bnd.xml"/>
      </fileset>
    </jar>
    <delete dir="${dir.ear.tmp}/RunAs"/>

  </target>

  <target name="updatefacadejar"
    depends="set.build.facade,-updatefacadejar"/>

  <target name="-updatefacadejar" if="build.facade">

    <echo message="Creating the Application Facade Module ..."/>
    <copy toDir="${dir.ear.tmp}" file="${jar.implementation}"/>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="application.xml"/>
      <replacefilter
        token="@FACADE_MODULE@"
        value="&lt;module id=&quot;EjbModule_FacadeModule&quot;&gt;&lt;ejb&gt;implementation.jar&lt;/ejb&gt;&lt;/module&gt;"/>
    </replace>

    <replace dir="${dir.ear}/${dd.type}/META-INF">
      <include name="weblogic-application.xml"/>
      <replacefilter
        token="@FACADE_MODULE@"
        value="&lt;module-ref&gt;&lt;module-uri&gt;implementation.jar&lt;/module-uri&gt;&lt;/module-ref&gt;"/>
    </replace>

    <jar destfile="${dir.ear.tmp}/implementation.jar"
      manifest="${dir.ear.tmp}/Manifest.mf"
      update="true"/>

  </target>

  <target name="updateiegjar" depends="jar.check" if="jar.exists">
    <mkdir dir="${ieg.jar.full.path}/IEG"/>

    <unzip src="${ieg.jar.full.path}/${ieg.jar.name}"
      dest="${ieg.jar.full.path}/IEG">
      <patternset>
        <include name="curam/ieg/definition/impl/jaxb.properties"/>
        <include name="curam/ieg/player/impl/jaxb.properties"/>
      </patternset>
    </unzip>

    <propertyfile file="${ieg.jar.full.path}/IEG/curam/ieg/definition/impl/jaxb.properties">
      <entry key="javax.xml.bind.context.factory" value="com.sun.xml.bind.v2.ContextFactory"/>
    </propertyfile>

    <propertyfile file="${ieg.jar.full.path}/IEG/curam/ieg/player/impl/jaxb.properties">
      <entry key="javax.xml.bind.context.factory" value="com.sun.xml.bind.v2.ContextFactory"/>
    </propertyfile>

    <jar destfile="${ieg.jar.full.path}/${ieg.jar.name}"
      update="true">
      <fileset dir="${ieg.jar.full.path}/IEG">
        <include name="curam/ieg/definition/impl/jaxb.properties"/>
        <include name="curam/ieg/player/impl/jaxb.properties"/>
      </fileset>
    </jar>
    <delete dir="${ieg.jar.full.path}/IEG"/>

  </target>

  <target name="jar.check">
    <condition property="jar.exists">
      <available file="${dir.ear.combined}/IntelligentEvidenceGathering.jar"/>
    </condition>
  </target>

  <!--  *******************************************  -->
  <!--  ***  G E N E R A T E   W A S   S T U B  ***  -->
  <!--  *******************************************  -->
  <!-- Generates stubs and skeletons for EJBs -->
  <target name="generatewasstub"  if="isWAS">
    <echo message="Building the component pieces of ${SERVER_MODEL_NAME}.ear..."/>

  <!-- Copy the property files -->
  <antcall target="-copypropsfiles" />

    <!-- Create the properties.jar -->
    <antcall target="create.properties.jar" />

    <!-- build application bean jar files -->
    <antcall target="updateejbjar" inheritall="false">
      <param name="facade" value="InfrastructureModule"/>
      <param name="ejb.jar.name" value="coreinf-ejb.jar"/>
      <param name="ejb.jar.full.path" value="${jar.coreinf.ejb}"/>
    </antcall>
    <antcall target="updatefacadejar" inheritall="false"/>

    <!-- Build ear files from existing libraries and bean jar files -->
    <echo message="Creating the ${SERVER_MODEL_NAME}.ear file..."/>

    <copy todir="${dir.ear.combined}">
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.rampart.list}"/>
      <fileset dir="${dir.sde.lib}" includes="coreinf-ejb-interfaces.jar"/>
      <fileset dir="${dir.bld.jar}" includes="${app.lib.list}"/>
      <fileset dir="${dir.ear.extrajars}" includes="*.jar"/>
    </copy>

    <copy toDir="${dir.ear.combined}" overwrite="true">
      <fileset dir="${dir.ear.tmp}">
        <include name="*.jar"/>
      </fileset>
    </copy>

  </target>

  <!--  *******************************************  -->
  <!--  ***  G E N E R A T E   W L P   S T U B  ***  -->
  <!--  *******************************************  -->
  <!-- Generates stubs and skeletons for EJBs -->
  <target name="generatewlpstub"  if="isWLP">
    <echo message="Building the component pieces of ${SERVER_MODEL_NAME}.ear..."/>

  <!-- Copy the property files -->
  <antcall target="-copypropsfiles" />

    <!-- Create the properties.jar -->
    <antcall target="create.properties.jar" />

    <antcall target="updateejbjar" inheritall="false">
      <param name="facade" value="InfrastructureModule"/>
      <param name="ejb.jar.name" value="coreinf-ejb.jar"/>
      <param name="ejb.jar.full.path" value="${jar.coreinf.ejb}"/>
    </antcall>
    <antcall target="updatefacadejar" inheritall="false"/>

    <!-- Build ear files from existing libraries and bean jar files -->
    <echo message="Creating the WLP ${SERVER_MODEL_NAME}.ear file ..."/>

    <copy todir="${dir.ear.combined}" overwrite="true">
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.list}"/>
      <fileset dir="${dir.sde.lib}" includes="${sde.lib.axis2.rampart.list}"/>
      <fileset dir="${dir.bld.jar}" includes="${app.lib.list}"/>
      <fileset dir="${dir.ear.extrajars}" includes="*.jar"/>
    </copy>

    <copy toDir="${dir.ear.combined}" overwrite="true">
      <fileset dir="${dir.ear.tmp}">
        <include name="*.jar"/>
      </fileset>
    </copy>

  </target>


  <!-- Print message if AppServer.properties cannot be found. -->
  <target name="check.properties.exists" unless="appserver.properties.exists">
    <fail message="The AppServer.properties file could not be found. (See AppServer.properties.sample.)"/>
  </target>


  <target name="create.properties.jar">
    <jar destfile="${dir.ear.tmp}/properties.jar"
      manifest="${dir.templates}/app-Manifest.mf" >
      <fileset dir="${dir.ear}">
        <include name="*.properties" />
        <include name="log4j2*" />
      </fileset>
    </jar>  
  </target>

</project>
