<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2020,2021. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant runtime support file for Curam projects running on WLP.
  It includes tasks to start, stop and restart an application server, install and uninstall
  an application, configure an application server and precompile the JSPs of an installed client.

  This file is dependant on the AppServer.properties file and if this file does not exist any
  of the targets will fail.

-->
<project name="app_runtimewlp" default="start"
  xmlns:if="ant:if" xmlns:unless="ant:unless">

  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="./app_properties.xml" />

  <import file="./app_utilities.xml" />

  <import file="./app_macros.xml" />

  <!--  *******************************  -->
  <!--  ***  App server Properties  ***  -->
  <!--  *******************************  -->
  <property file="${app.prop.location}"/>

  <!--  *******************************  -->
  <!--  ***  Macros  ***  -->
  <!--  *******************************  -->
  <import file="./app_utilitiesWLP.xml"/>

  <!-- By default the run as username and password. -->
  <!-- These can be overwritten in AppServer.properties. -->
  <property name="curam.security.credentials.async.username" value="SYSTEM"/>
  <property name="curam.security.credentials.async.password" value="yq0KlHpuxSuDL/Et2+z6cA=="/>
  <property name="runas.user"     value="${curam.security.credentials.async.username}"/>
  <property name="runas.password" value="${curam.security.credentials.async.password}"/>
  <property name="curam.wlp.explode.ear" value="true" description="Explode EARs during install" />
  <property name="curam.wlp.precompile.timeout" value="5400" description="Timeout in seconds for precompilation of JSPs" />

  <!-- Server setup location -->
  <property name="server.setup.location" value="${WLP_HOME}/usr/servers/${curam.server.name}"/>
  <property name="wlp_server_app_xml" value="${server.setup.location}/adc_conf/server_applications.xml"/>
  <property name="wlp.shared.resource.dir" value="${WLP_HOME}/usr/shared/resources" />

  <!-- Macro for interacting with application_APP.xml fragments -->
  <macrodef name="appXmlOP">
    <attribute name="operation" description="JavaScript Operation" />
    <attribute name="appName" description="Application Name" />
    <attribute name="defaultMainApp" description="The name of the EJBServer backend to use for JNDI lookups" />
    <sequential>
      <script language="javascript">
        var dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        dbf.setIgnoringComments(false);
        dbf.setNamespaceAware(true);
        dbf.setExpandEntityReferences(false);
        var documentBuilder = dbf.newDocumentBuilder();

        var transformerFactory = javax.xml.transform.TransformerFactory.newInstance();
        var transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes");

        var serverAppConfig = new java.io.File(wlp_server_app_xml);

        // Extract the name of the ServerCode EAR from deployment_packaging.xml
        function parseDeploymentPackaging() {
          var deploymentPackagingFile = new java.io.File(project.getProperty("deployment.packaging.file"));
          if (deploymentPackagingFile.exists()) {
            var deploymentPackaging = documentBuilder.parse(deploymentPackagingFile);
            var nl = deploymentPackaging.getDocumentElement().getElementsByTagName("ear");

            for (var i = 0; i &lt; nl.getLength(); i++) {
              var ear = nl.item(i);
              if ("true".equalsIgnoreCase(ear.getAttribute("requireServer"))) {
                return ear.getAttribute("name");
              }
            }
          } else {
            project.log("Unable to find deployment packaging file: " + deploymentPackagingFile.getAbsolutePath(), project.MSG_WARN);
            project.log("Using default application name:  @{defaultMainApp}", project.MSG_WARN);
          }
          return "@{defaultMainApp}";
        }

        // Update the JNDI entry in the application_APP.xml fragment
        function updateEJBServerApp(appXml) {
          var ejbServerApp = parseDeploymentPackaging();
          var nl = appXml.getDocumentElement().getElementsByTagName("jndiEntry");

          for (var i = 0; i &lt; nl.getLength(); i++) {
            var jndiEntry = nl.item(i);
            if ("curamejb/ApplicationName".equals(jndiEntry.getAttribute("jndiName"))) {
              jndiEntry.setAttribute("value", ejbServerApp);
              return;
            }
          }
        }

        // Open the server_applications.xml fragment
        function openAppXML() {
          return documentBuilder.parse(serverAppConfig);
        }

        // Write the server_applications.xml fragment
        function writeAppXML(appXml) {
          var source = new javax.xml.transform.dom.DOMSource(appXml);
          var result = new javax.xml.transform.stream.StreamResult(serverAppConfig);
          transformer.transform(source, result);
        }

        // Delete the application_APP.xml fragment reference from server_applications.xml
        function deleteApp(appName) {
          var appXml = openAppXML();
          var docEl = appXml.getDocumentElement();
          var eeApps = docEl.getElementsByTagName("include");
          var update = false;
          var appConfigFileName = "application_" + appName + ".xml";

          for (var i = 0; i &lt; eeApps.getLength(); i++) {
            var appEl = eeApps.item(i);
            if (appConfigFileName.equals(appEl.getAttribute('location'))) {
              docEl.removeChild(appEl);
              update = true;
            }
          }

          if (update) {
            writeAppXML(appXml);
          }
        }

        // Add the application_APP.xml fragment reference to server_applications.xml
        function addApp(appName) {
          var appXml = openAppXML();
          var docEl = appXml.getDocumentElement();
          var include = appXml.createElement("include");
          include.setAttribute("location", "application_" + appName + ".xml");

          docEl.appendChild(include);

          updateEJBServerApp(appXml);

          writeAppXML(appXml);
        }

        // Run the selected operation
        @{operation}(new java.lang.String("@{appName}"));
      </script>
    </sequential>
  </macrodef>

  <!--  **************  -->
  <!--  ***  Init  ***  -->
  <!--  **************  -->
  <target name="init">
    <!-- Check to see if the AppServer.properties file contains the correct settings -->
    <condition property="appserver.properties.valid">
      <and>
        <isset property="curam.client.httpport"/>
        <isset property="curam.webservices.httpport"/>
        <isset property="curam.server.name"/>
      </and>
    </condition>
    <antcall target="check.appserver.properties.valid"/>

    <!-- Check to see if the wlp.home variable has been setup. -->
    <condition property="wlp.environment.variable.set">
      <available file="${wlp.home}" type="dir"/>
    </condition>
    <antcall target="check.wlp.environment.variable"/>

    <!-- Check to see if the node.name contains a space -->
    <condition property="node.name.contains.space">
      <contains string="${node.name}" substring=" "/>
    </condition>
    <antcall target="check.node.name.valid"/>

    <!-- Setup the default EJBServer app. -->
    <property name="curam.ejbserver.app.name" value="${sysenv.SERVER_MODEL_NAME}"/>

  </target>

  <!-- Fail if some properties are missing. -->
  <target name="check.appserver.properties.valid" unless="appserver.properties.valid">
    <fail message="Missing properties from AppServer.properties file. See AppServer.properties.sample."/>
  </target>

  <!-- Print message if environment variable does not exist. -->
  <target name="check.wlp.environment.variable" unless="wlp.environment.variable.set">
    <fail message="WLP_HOME environment variable is not set."/>
  </target>

  <!-- Check node.name does not contain a space. -->
  <target name="check.node.name.valid" if="node.name.contains.space">
    <fail message="The node.name property cannot contain spaces."/>
  </target>


  <!--  *************************************  -->
  <!--  ***  Start an application server  ***  -->
  <!--  *************************************  -->
  <target name="start" depends="init, check.server.name">

    <condition property="wlp.start.args" value="--clean">
      <isset property="clean.start" />
    </condition>
    <property name="wlp.start.args" value="" />

    <echo message="Starting ${server.name} .. "/>
    <wlpserver operation="start" args="${wlp.start.args}" />

  </target>

  <!--  ************************************  -->
  <!--  ***  Stop an application server  ***  -->
  <!--  ************************************  -->
  <target name="stop" depends="init, check.server.name, get.decrypted.appserver.password">

    <echo message="Stopping ${server.name} .."/>
    <wlpserver operation="stop" failonerror="${fail.on.error}"/>

  </target>


  <!--  ***************************************  -->
  <!--  ***  Restart an application server  ***  -->
  <!--  ***************************************  -->
  <target name="restart" depends="init, check.server.name">

    <antcall target="stop">
      <param name="fail.on.error" value="false"/>
    </antcall>

    <antcall target="start">
      <param name="fail.on.error" value="true"/>
    </antcall>

  </target>

  <!--  *********************************************  -->
  <!--  ***     Configure web server plugin       ***  -->
  <!--  *********************************************  -->
  <target name="configure.webserver.plugin" depends="init, check.server.name, get.decrypted.appserver.password">

    <echo message="Configuring web server plugin for Liberty ..."/>
    
    <condition property="subject.string.isset">
        <isset property="subject.string"/>
    </condition>
    <fail unless:set="subject.string.isset" message="ERROR - Property subject.string must be passed on the command line to set the subject for the certificate."/>
    
    <condition property="certificate.password.isset">
        <isset property="certificate.password"/>
    </condition>
    <fail unless:set="certificate.password" message="ERROR - Property certificate.password must be passed on the command line to set certificate and keystore passwords."/>

    <property name="certificate.location"         value="${server.setup.location}/resources/security/"/>
    <available file="${certificate.location}"     property="certificate.location.found"/>
    <fail unless:set="certificate.location.found" message="ERROR - Location for certificate files (${certificate.location}) not found."/>
    
    <!-- Note: Derivation of the default curam.webserver.name value is problematic across OSes
               as it's based on the short hostname that isn't implemented consistently.
               This works on most UNIX flavours: ihs_`hostname -s` 
               Otherwise, the curam.webserver.name property value must be passed on the command line. 
    -->
    <exec executable="hostname" failonerror="true" outputproperty="host.short.name" osfamily="unix">
      <arg line="-s"/>
    </exec>
    <property if:set="host.short.name"  name="curam.webserver.name"    value="ihs_${host.short.name}"/>
    
    <property name="plugin.home"             value="${sysenv.PLG_HOME}"/>
    <property name="plugin.config"           value="${plugin.home}/config"/>
    <property name="plugin.webserver.config" value="${plugin.config}/${curam.webserver.name}"/>
    <available file="${plugin.webserver.config}"      property="plugin.webserver.config.found"/>
    <fail unless:set="plugin.webserver.config.found"  message="ERROR - Plugin configuration path (${plugin.webserver.config}) not found."/>

    <property name="certificate.days"     value="3650"/>
    <property name="key.length"           value="2048"/>

    <available file="openssl"  filepath="${sysenv.PATH}"  property="openssl.found"/>
    <fail unless:set="openssl.found" message="ERROR - openssl command not found in PATH."/>

    <available file="keytool"  filepath="${sysenv.PATH}"  property="keytool.found"/>
    <fail unless:set="keytool.found" message="ERROR - keytool command not found in PATH."/>
    
    <available file="gskcmd"   filepath="${sysenv.PATH}"  property="gskcmd.found"/>
    <fail unless:set="gskcmd.found"  message="ERROR - gskcmd command not found in PATH."/>
    
    <available file="pluginUtility"   filepath="${sysenv.PATH}"  property="pluginUtility.found"/>
    <fail unless:set="pluginUtility.found"  message="ERROR - pluginUtility command not found in PATH."/>
    
    <wlpserverstatus statusproperty="wlp.server.status" failonerror="false" />
    <condition property="if.server.started">
      <matches pattern=".*${curam.server.name} is running.*" string="${wlp.server.status}"/>
    </condition>
    <fail unless:set="if.server.started"  message="ERROR - Liberty server ${curam.server.name} is not running. You must start it first."/>

    <echo>INFO - 1. Convert JKS format to CMS for PLG/IHS</echo>
    <execos command="gskcmd" fail.required="true"
            options="-keydb -convert -pw ${certificate.password} -db ${certificate.location}/key.jks -old_format jks -target ${certificate.location}/plugin-key.kdb -new_format cms -stash"/>
            
    <echo>INFO - 2. Move relevant files to the Plugin configuration</echo>
    <move todir="${plugin.webserver.config}" overwrite="true" verbose="true">
      <fileset dir="${certificate.location}">
        <include name="plugin-key.*"/>
      </fileset>
    </move>
    
    <echo>INFO - 3. Generate a plugin-cfg.xml file</echo>
    <execos command="pluginUtility" fail.required="true"
            options="generate --server=${curam.server.name} --targetPath=${plugin.webserver.config}"/>
    
    <echo>INFO - The Liberty server must be restarted and, if not running, IHS must be started.</echo>
    
  </target>
  
  
  <target name="-extract.properties.jar" if="extract.properties.jar">
    <unzip src="${ear.file}" dest="${wlp.shared.resource.dir}" overwrite="true">
      <patternset>
        <include name="properties.jar" />
      </patternset>
    </unzip>
    <deleteFromZip zip="${ear.file}">
      <include name="properties.jar" />
    </deleteFromZip>
  </target>
  
  
  <!--  ********************************  -->
  <!--  ***  Install an application  ***  -->
  <!--  ********************************  -->
  <target name="install" depends="init, check.server.name, get.decrypted.appserver.password">
    <echo message="Installing ${application.name} (${ear}) on ${server.name}..."/>

    <!-- Encode the password -->
    <!-- Decrypt the runas.password. -->
    <decrypt to="decrypted.runas.password" from="${runas.password}" type="decrypt"/>
    <wlpEncodePassword password="${decrypted.runas.password}" property="runas.password.encoded"/>

    <!-- Decrypt the curam.security.credentials.async.password. -->
    <decrypt to="decrypted.curam.security.credentials.async.password" from="${curam.security.credentials.async.password}" type="decrypt"/>
    <wlpEncodePassword password="${decrypted.curam.security.credentials.async.password}" property="curam.security.credentials.async.password.encoded"/>

    <property name="app.setup.location.ear" value="${server.setup.location}/apps/${application.name}.ear"/>

    <!-- Install the app -->
    <echo message="Copying ear to ${app.setup.location.ear}"/>

    <!-- Binary EAR install -->
    <copy file="${ear.file}" tofile="${app.setup.location.ear}" unless:true="${curam.wlp.explode.ear}"/>
    <condition property="extract.properties.jar">
      <and>
        <equals arg1="${application.name}" arg2="${curam.ejbserver.app.name}" casesensitive="no" />
        <isfalse value="${curam.wlp.explode.ear}" />
      </and>
    </condition>
    <antcall target="-extract.properties.jar" />

    <!-- Exploded EAR install -->
    <delete dir="${app.setup.location.ear}" failonerror="false" verbose="true"/>
    <delete file="${app.setup.location.ear}" failonerror="false"  verbose="true"/>
    <mkdir dir="${app.setup.location.ear}"/>

    <unzip src="${ear.file}" dest="${app.setup.location.ear}" if:true="${curam.wlp.explode.ear}"/>
    <!-- If exploding the EAR, need to be aware of the WAR name for subsequent configuration. -->
    <script language="javascript" if:true="${curam.wlp.explode.ear}">
      <![CDATA[
      var setupLoc = new java.io.File(project.getProperty("app.setup.location.ear"));
      var files = setupLoc.listFiles();
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        if (file.getName().endsWith(".war")) {

          project.setProperty("app.setup.war.name", file.getName());
          var origWar = new java.io.File(file.getAbsolutePath() + ".orig");
          // Rename the original WAR
          file.renameTo(origWar);

          // Make dirs of the same path
          file.mkdirs();

          // Unzip the war
          var unzipTask = project.createTask("unzip");
          unzipTask.setSrc(origWar);
          unzipTask.setDest(file);
          unzipTask.perform();

          // Clean up the old war
          var deleteTask = project.createTask("delete");
          deleteTask.setFile(origWar);
          deleteTask.perform();
        }
      }
      ]]>
    </script>
    <echo>INFO - ${ear.file} unzips complete.</echo>

    <antcall target="update.wlp.deployment.files"/>
  </target>


  <target name="update.wlp.deployment.files">
    <echo message="Generating Liberty application_${application.name}.xml file" />

    <property name="classloader.ordering" value="parentFirst"/>
    
    <echo message="Adding ${application.name} to Liberty server_applications.xml file" />
    <!-- On its own appApp can add entries into server_applications.xml
         redundantly.  So, cleaning up first.
    -->
    <appXmlOP operation="deleteApp" appName="${application.name}" defaultMainApp="${curam.ejbserver.app.name}"/>
    <appXmlOP operation="addApp" appName="${application.name}" defaultMainApp="${curam.ejbserver.app.name}"/>
    
    <condition property="mdb.activation.required">
      <and>
        <equals arg1="${application.name}" arg2="${curam.ejbserver.app.name}" casesensitive="no" />
        <available file="${server.setup.location}/apps/${application.name}.ear/coreinf-ejb.jar" />
      </and>
    </condition>
    
    <!-- Move properties.jar from ServerCode/MDB EAR to shared resources -->
    <move
      file="${server.setup.location}/apps/${application.name}.ear/properties.jar"
      todir="${wlp.shared.resource.dir}"
      overwrite="true"
      if:set="mdb.activation.required"
    />
    
    <!-- Add the application to the relevantly named file -->
    <echoxml file="${server.setup.location}/adc_conf/application_${application.name}.xml">
      <server>
      
        <classloading useJarUrls="true"/>
        <library id="${application.name}Lib">
          <fileset dir="$${server.config.dir}/apps/${application.name}.ear/${app.setup.war.name}/WEB-INF/lib" includes="*.jar" if:set="app.setup.war.name" />
          <fileset dir="$${server.config.dir}/apps/${application.name}.ear" includes="*.jar" unless:set="app.setup.war.name" />
        </library>
        <enterpriseApplication id="${application.name}.ear" location="${application.name}.ear" name="${application.name}">
          <classloader delegation="${classloader.ordering}" commonLibraryRef="customLoginLib" privateLibraryRef="${application.name}Lib" />

          <application-bnd>
            <security-role name="mdbuser">
              <run-as password="${runas.password.encoded}" userid="${runas.user}" />
            </security-role>

            <security-role name="AllAuthenticated">
              <special-subject type="ALL_AUTHENTICATED_USERS" />
            </security-role>

            <security-role name="everyone">
              <special-subject type="ALL_AUTHENTICATED_USERS" />
            </security-role>

            <security-role name="mbeancreator">
              <user name="superuser" />
            </security-role>

          </application-bnd>
          
          <ejb-jar-bnd moduleName="coreinf-ejb" if:set="mdb.activation.required">
            <message-driven name="DPEnactmentMDB">
              <jca-adapter activation-spec-binding-name="eis/DPEnactmentAS" />
            </message-driven>
            <message-driven name="WorkflowEnactmentMDB">
              <jca-adapter activation-spec-binding-name="eis/WorkflowEnactmentAS" />
            </message-driven>
            <message-driven name="WorkflowErrorMDB">
              <jca-adapter activation-spec-binding-name="eis/WorkflowErrorAS" />
            </message-driven>
            <message-driven name="WorkflowActivityMDB">
              <jca-adapter activation-spec-binding-name="eis/WorkflowActivityAS" />
            </message-driven>
            <message-driven name="DPErrorMDB">
              <jca-adapter activation-spec-binding-name="eis/DPErrorAS" />
            </message-driven>
          </ejb-jar-bnd>
        </enterpriseApplication>
      </server>
    </echoxml>
    
    

  </target>

  <!--  **********************************  -->
  <!--  ***  Uninstall an application  ***  -->
  <!--  **********************************  -->
  <target name="uninstall" depends="init, check.server.name">
    <echo message="Stopping ${application.name} on ${server.name}..."/>
    <wlpserver operation="stop" failonerror="false" />

    <property name="app.setup.location.ear" value="${server.setup.location}/apps/${application.name}.ear"/>

    <echo message="Uninstalling ${application.name} on ${server.name}..."/>

    <!-- Delete as both directory / file to be safe -->
    <delete file="${app.setup.location.ear}" failonerror="false" />
    <delete dir="${app.setup.location.ear}" failonerror="false" />

    <appXmlOP operation="deleteApp" appName="${application.name}" defaultMainApp="${curam.ejbserver.app.name}"/>
  </target>


  <!--  *****************************************  -->
  <!--  ***  Configure an application server  ***  -->
  <!--  *****************************************  -->
  <target name="configure" depends="init" description="Setup and configure WLP">

    <!-- Task for decrypting passwords -->
    <taskdef name="decrypt" classname="curam.util.tools.AntStrings"
      classpath="${crypto.prop.file.location}:${jar.coreinf}:${jar.tools}"/>

    <!-- Decrypt the runas.password. -->
    <decrypt to="decrypted.runas.password" from="${runas.password}" type="decrypt"/>

    <ant
      antfile="./app_configureWLP.xml"
      target="setup"
      inheritall="false">
      <property name="runas.user" value="${runas.user}" />
      <property name="decrypted.runas.password" value="${decrypted.runas.password}"/>
    </ant>
  </target>

  <!--  *****************************  -->
  <!--  ***  Precompile the JSPs  ***  -->
  <!--  *****************************  -->
  <target name="precompile" depends="init, check.ear.file, -wlp.check.if.servercode"
          unless="${is.servercode.ear}">
    <taskdef
      name="compileJSPs"
      classname="io.openliberty.tools.ant.jsp.CompileJSPs"
      classpath="${jar.liberty-ant-tasks}"
    />

    <property name="temp.dir" value="${dir.bld}/precompile_ear"/>
    <property name="temp.dir.war" value="${dir.bld}/precompile_war"/>

    <!-- Unpack the specified client EAR file -->
    <delete dir="${temp.dir}"/>
    <delete dir="${temp.dir.war}"/>
    <mkdir dir="${temp.dir}"/>
    <mkdir dir="${temp.dir.war}"/>

    <unjar src="${ear.file}" dest="${temp.dir}"/>

    <script language="javascript">
      <![CDATA[
      var tmpEarLoc = new java.io.File(project.getProperty("temp.dir"));
      var files = tmpEarLoc.listFiles();
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        if (file.getName().endsWith(".war")) {
          project.setProperty("precompile.war.name", file.getName());
        }
      }
      ]]>
    </script>
    <unjar src="${temp.dir}/${precompile.war.name}" dest="${temp.dir.war}"/>

    <compileJSPs
      srcdir="${temp.dir.war}"
      destdir="${temp.dir.war}/WEB-INF/classes"
      features="javaee-7.0,jaxb-2.2,jndi-1.0"
      installDir="${WLP_HOME}"
      timeout="${curam.wlp.precompile.timeout}"
      classpath="${temp.dir}${path.separator}${temp.dir.war}/WEB-INF/lib"
    />
    
    <jar destfile="${temp.dir}/${precompile.war.name}" basedir="${temp.dir.war}"
      includes="**/*.class" update="yes"
      zip64Mode="as-needed" />
    
    <jar destfile="${ear.file}" basedir="${temp.dir}"
      includes="${precompile.war.name}" update="yes"
      zip64Mode="as-needed" />

    <!-- Delete the temporary directories used -->
    <delete dir="${temp.dir.war}"/>
    <delete dir="${temp.dir}"/>
  </target>
  
  <target name="-wlp.check.if.servercode">
    <condition property="is.servercode.ear">
      <contains string="${ear.file}" substring="ServerCode" casesensitive="false" />
    </condition>
  </target>

</project>
