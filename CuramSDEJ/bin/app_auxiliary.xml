<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2018. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant auxiliary compile file for Curam projects.
  It includes tasks for compiling message files, codetables, events and
  meta-data for rules custom functions.

-->
<project name="app_auxiliary" default="msggen">

  <!--  *********************  -->
  <!--  ***  M S G G E N  ***  -->
  <!--  *********************  -->
   <target name="msggen.uptodate" unless="disable.uptodate.check" depends="message.check.new.src.files">
    <condition property="msggen.notRequired" value="true">
    <!-- message update only required if all files are up to date and no new files. -->
    <and>
      <uptodate targetfile="${dir.bld.svr}/msggen.marker">
      <srcfiles dir="${dir.base.components}" includes="*/message/*.xml"/>
      </uptodate>
      <equals arg1="${message.components.uptodate}" arg2="true"/>
    </and>
    </condition>
  </target>

  <!-- This checks for any files that may have been renamed. -->
  <target name="message.check.new.src.files">
   <fileset dir="${dir.base.components}" includes="*/message/**/*.xml" id="new.message.files">
    <present present="srconly" targetdir="${dir.bld.svr.msg.scp}">
    <mapper type="flatten"/>
    </present>
   </fileset>
   <!-- set the property-->
   <property name="new.message.files.exist" refid="new.message.files" />
   <!-- If no files have been changed, set the property to true, otherwise set to false. -->
   <condition property="message.components.uptodate" value="true" else="false">
     <equals arg1="${new.message.files.exist}" arg2=""/>
   </condition>
  </target>


  <target name="msggen.echo" if="msggen.notRequired">
    <echo level="info" message="Skipping Message Generation because all files are up-to-date."/>
  </target>

  <target name="msggen"
    depends="msggen.uptodate, msggen.echo" unless="msggen.notRequired"
    description="Generate message sources from .xml files">

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting msggen"/>
    </antcall>

    <!-- Convert message files into catalog property files and Java sources using Genmsg -->
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Generate message file components"/>
    </antcall>

    <!-- Determine if warnings should be treated as errors. -->
    <condition property="messagegen.warningstoerrors" value="-warningstoerrors">
      <istrue value="${prp.warningstoerrors}"/>
    </condition>
    <property name="messagegen.warningstoerrors" value=""/>

    <!-- Determine if infrastructure message files should be merged. -->
    <condition property="merge.inf.messages" value="-infrastructuremessages ${dir.sde}">
      <not>
        <isset property="noclientmessages"/>
      </not>
    </condition>
    <property name="merge.inf.messages" value=""/>

    <!--
     ! Merge the message files based on SERVER_COMPONENT_ORDER. Perform a dependency
     ! check to see if message files need to be regenerated.
     !-->
    <mkdir dir="${j.gen.message}"/>
    <mkdir dir="${j.dst.message}"/>
    <mkdir dir="${dir.bld.svr.msg.scp}/temp"/>

    <java
      classname="curam.util.tools.message.GenerateMessagesWrapper"
      classpath="${jar.tools}:${jar.coreinf}:${jar.log4j.2.core}:${jar.log4j.2.api}:${jar.clover}:${jar.javatools}:${jar.j2ee}:${prop.file.location}:${jar.commons}:${prop.jde.commons.jars.classpath}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generatemessages"
    >
      <sysproperty key="curam.disable.dynamic.properties" value="true"/>
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg line="-outdir ${j.gen.message}" />
      <arg line="-schemalocation ${dir.sde.lib}" />
      <arg line="-mergedir ${dir.bld.svr.msg.scp}/" />
      <arg line="-tempdir ${dir.bld.svr.msg.scp}/temp" />
      <arg line="-serverdirectory ${SERVER_DIR}" />
      <arg value="-serverlocalelist" />
      <arg value="${SERVER_LOCALE_LIST}" />
      <arg line="${messagegen.warningstoerrors}" />
      <arg line="${merge.inf.messages}" />
      <arg line="-servercomponentorder"/>
      <arg value="${SERVER_COMPONENT_ORDER}" />
    </java>

    <delete dir="${j.gen.message}/temp"/>

    <antcall target="msggen.compile" inheritall="false"/>

  </target>

  <target name="msggen.compile">

    <!-- message -->
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Compile message"/>
    </antcall>

    <javac
      includes="**/*.java"
      srcdir="${j.gen.message}"
      destdir="${j.dst.message}"
      classpathref="j.cp"
      debug="${cmp.debug}"
      fork="${cmp.fork}"
      memoryMaximumSize="${cmp.maxmemory}"
      memoryInitialSize="${cmp.maxmemory}"
      nowarn="${cmp.nowarn}"
      optimize="${cmp.optimize}"
      deprecation="${cmp.deprecation}"
      verbose="${cmp.verbose}"
      includeAntRuntime="${cmp.includeAntRuntime}"
      includeJavaRuntime="${cmp.includeJavaRuntime}"
      failonerror="${cmp.failonerror}"
      updatedProperty="message.compile"
      encoding="UTF-8"
      listfiles="${cmp.listfiles}">
      <compilerarg value="-Xbootclasspath/p:${jars.allxml}" />
      <compilerarg value="-Xmaxwarns"/>
      <compilerarg value="${cmp.maxwarnings}"/>
      <compilerarg line="${cmp.gc}"/>
      <compilerarg line="${cmp.compilerarg}"/>
    </javac>

    <!-- Copy message property files -->
    <copy todir="${j.dst.message}">
      <fileset dir="${j.gen.message}" includes="**/*.properties"/>
    </copy>

    <delete file="${jar.message}"/>
    <delete file="${jar.message.properties}"/>

    <path id="message.path">
      <fileset dir="${j.dst.message}">
        <exclude name="**/*.properties"/>
      </fileset>
    </path>
    
    <antcall target="create.class.checksum" inheritall="false">
      <param name="checksumbasedir" value="${j.dst.message}"/>
      <param name="checksumpath" value="message.path"/>
      <reference refid="message.path" />
    </antcall>
    
    <jar jarfile="${jar.message}"            basedir="${j.dst.message}" filesonly="true" level="${jar.compression}" excludes="**/*.properties"/>
    
    <delete>
		<fileset dir="${j.dst.message}">
  			<include name="**/${fil.jar.checksum}"/>
  		</fileset>
  	</delete>
    
    <jar jarfile="${jar.message.properties}" basedir="${j.dst.message}" filesonly="true" level="${jar.compression}" includes="**/*.properties"/>

    <touch file="${dir.bld.svr}/msggen.marker"/>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Ending msggen"/>
    </antcall>
  </target>

  <!--  *******************  -->
  <!--  ***  C T G E N  ***  -->
  <!--  *******************  -->
  <target name="ctgen.uptodate" unless="disable.uptodate.check">
    <uptodate property="ctgen.notRequired"
      targetfile="${dir.bld.svr}/ctgen.marker">
      <srcfiles dir="${dir.base.components}" includes="*/codetable/*.ctx"/>
    </uptodate>
  </target>

  <target name="ctgen.echo" if="ctgen.notRequired">
    <echo level="info" message="Skipping Codetable Generation because all files are up-to-date."/>
  </target>

  <target name="ctgen"
    depends="ctgen.uptodate, ctgen.echo" unless="ctgen.notRequired"
    description="Generate code table sources from .ctx files">

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting ctgen"/>
    </antcall>

    <!-- Convert codetable files into Java sources using Gencct -->
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Generate codetable components"/>
    </antcall>

    <!-- Determine if warnings should be treated as errors. -->
    <condition property="codetablegen.warningstoerrors" value="-warningstoerrors">
      <istrue value="${prp.warningstoerrors}"/>
    </condition>
    <property name="codetablegen.warningstoerrors" value=""/>

    <!-- Determine if infrastructure codetable files should be merged. -->
    <condition property="merge.inf.codetables" value="-infrastructurecodetables ${dir.sde}">
      <not>
        <isset property="noclientmessages"/>
      </not>
    </condition>
    <property name="merge.inf.codetables" value=""/>
    <property name="codetablegen.extraargs" value=""/>

    <mkdir dir="${j.gen.codetable}"/>
    <mkdir dir="${j.dst.codetable}"/>
    <mkdir dir="${dir.bld.svr.ctx.scp}/temp"/>
    <mkdir dir="${dir.bld.svr.ctx.sql}"/>

    <java
      classname="curam.util.tools.codetable.GenerateCodeTablesWrapper"
      classpathref="database.common.classpath"
      classpath="${jar.javatools}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generatecodetables"
    >
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg value="-serverlocalelist" />
      <arg value="${SERVER_LOCALE_LIST}" />
      <arg line="-servercomponentorder"/>
      <arg value="${SERVER_COMPONENT_ORDER}" />
      <arg line="-outdir ${j.gen.codetable}" />
      <arg line="-schemalocation ${dir.sde.lib}" />
      <arg line="-mergedir ${dir.bld.svr.ctx.scp}" />
      <arg line="-tempdir ${dir.bld.svr.ctx.scp}/temp" />
      <arg line="${merge.inf.codetables}" />
      <arg line="-serverdirectory ${SERVER_DIR}" />
      <arg line="-maxcodetablecodelength ${prp.maxcodetablecodelength}" />
      <arg line="-maxcodetablenamelength ${prp.maxcodetablenamelength}" />
      <arg line="-maxcodetabledescriptionlength ${prp.maxcodetabledescriptionlength}" />
      <arg line="-noninternedstrings ${prp.noninternedstrings}" />
      <arg line="${codetablegen.warningstoerrors}" />
      <arg line="-ctsqloutdir ${dir.bld.svr.ctx.sql}" />
      <arg line="${codetablegen.extraargs}" />
    </java>

    <delete dir="${j.gen.codetable}/temp"/>

    <antcall target="ctgen.compile" inheritall="false"/>

  </target>

  <target name="ctgen.compile">

    <!-- codetables -->
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Compile codetables"/>
    </antcall>

    <javac
      includes="**/*.java"
      srcdir="${j.gen.codetable}"
      destdir="${j.dst.codetable}"
      classpathref="j.cp"
      debug="${cmp.debug}"
      fork="${cmp.fork}"
      memoryMaximumSize="${cmp.maxmemory}"
      memoryInitialSize="${cmp.maxmemory}"
      nowarn="${cmp.nowarn}"
      optimize="${cmp.optimize}"
      deprecation="${cmp.deprecation}"
      verbose="${cmp.verbose}"
      updatedProperty="codetable.compile"
      includeAntRuntime="${cmp.includeAntRuntime}"
      includeJavaRuntime="${cmp.includeJavaRuntime}"
      failonerror="${cmp.failonerror}"
      encoding="UTF-8"
      listfiles="${cmp.listfiles}">
      <compilerarg value="-Xbootclasspath/p:${jars.allxml}" />
      <compilerarg value="-Xmaxwarns"/>
      <compilerarg value="${cmp.maxwarnings}"/>
      <compilerarg line="${cmp.gc}"/>
      <compilerarg line="${cmp.compilerarg}"/>
    </javac>

    <!-- Copy codetable display name property files -->
    <copy todir="${j.dst.codetable}">
      <fileset dir="${j.gen.codetable}" includes="**/*.properties"/>
    </copy>

    <delete file="${jar.codetable}"/>
    
    <path id="codetable.path">
      <fileset dir="${j.dst.codetable}" />
    </path>
    
    <antcall target="create.class.checksum" inheritall="false">
      <param name="checksumbasedir" value="${j.dst.codetable}"/>
      <param name="checksumpath" value="codetable.path"/>
      <reference refid="codetable.path" />
    </antcall>
    
    <jar jarfile="${jar.codetable}" basedir="${j.dst.codetable}" filesonly="true" level="${jar.compression}"/>
    
    <delete>
		<fileset dir="${j.dst.codetable}">
  			<include name="**/${fil.jar.checksum}"/>
  		</fileset>
  	</delete>

    <touch file="${dir.bld.svr}/ctgen.marker"/>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Ending ctgen"/>
    </antcall>
  </target>


  <!--  *******************  -->
  <!--  ***  E V G E N  ***  -->
  <!--  *******************  -->
  <target name="evgen" description="Generate event class/type sources from .evx files">
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting evgen"/>
    </antcall>

    <!-- Convert events files into Java sources -->
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Generate event components"/>
    </antcall>

    <!-- Determine if warnings should be treated as errors. -->
    <condition property="eventsgen.warningstoerrors" value="-warningstoerrors">
      <istrue value="${prp.warningstoerrors}"/>
    </condition>
    <property name="eventsgen.warningstoerrors" value=""/>

    <mkdir dir="${j.gen.events}"/>
    <mkdir dir="${j.gen.events}/dmx"/>
    <mkdir dir="${j.dst.events}"/>
    <mkdir dir="${dir.bld.svr.evx.scp}/temp"/>
    <mkdir dir="${dir.bld.svr.evx.scp}/config"/>

    <java
      classname="curam.util.tools.events.GenerateEventsWrapper"
      classpath="${jar.tools}:${jar.coreinf}:${jar.log4j.2.core}:${jar.log4j.2.api}:${jar.clover}:${jar.j2ee}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generateevents"
    >
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg line="-servercomponentorder"/>
      <arg value="${SERVER_COMPONENT_ORDER}" />
      <arg line="-outdir ${j.gen.events}" />
      <arg line="-schemalocation ${dir.sde.lib}" />
      <arg line="-mergedir ${dir.bld.svr.evx.scp}" />
      <arg line="-tempdir ${dir.bld.svr.evx.scp}/temp" />
      <arg line="-serverdirectory ${SERVER_DIR}" />
      <arg line="-serverlocalelist"/>
      <arg value="${SERVER_LOCALE_LIST}" />
    </java>

    <delete dir="${j.gen.events}/temp"/>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Compile events"/>
    </antcall>

    <javac
      includes="**/*.java"
      srcdir="${j.gen.events}"
      destdir="${j.dst.events}"
      classpathref="j.cp"
      debug="${cmp.debug}"
      fork="${cmp.fork}"
      memoryMaximumSize="${cmp.maxmemory}"
      memoryInitialSize="${cmp.maxmemory}"
      nowarn="${cmp.nowarn}"
      optimize="${cmp.optimize}"
      deprecation="${cmp.deprecation}"
      verbose="${cmp.verbose}"
      updatedProperty="events.compile"
      includeAntRuntime="${cmp.includeAntRuntime}"
      includeJavaRuntime="${cmp.includeJavaRuntime}"
      failonerror="${cmp.failonerror}"
      listfiles="${cmp.listfiles}">
      <compilerarg value="-Xbootclasspath/p:${jars.allxml}" />
      <compilerarg value="-Xmaxwarns"/>
      <compilerarg value="${cmp.maxwarnings}"/>
      <compilerarg line="${cmp.gc}"/>
      <compilerarg line="${cmp.compilerarg}"/>
     </javac>

    <copy todir="${j.dst.events}">
      <fileset dir="${dir.bld.svr.evx.scp}/config" includes="handler_config.xml"/>
    </copy>

    <delete file="${jar.events}"/>

    <path id="events.path">
      <fileset dir="${j.dst.events}" />
    </path>    
    
    <antcall target="create.class.checksum" inheritall="false">
      <param name="checksumbasedir" value="${j.dst.events}"/>
      <param name="checksumpath" value="events.path"/>
      <reference refid="events.path" />
    </antcall>    
    
    <jar jarfile="${jar.events}" basedir="${j.dst.events}" update="false" filesonly="true" level="${jar.compression}"/>
    
    <delete>
		<fileset dir="${j.dst.events}">
  			<include name="**/${fil.jar.checksum}"/>
  		</fileset>
  	</delete>    

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Ending evgen"/>
    </antcall>
  </target>


  <!--  ***********************************************  -->
  <!--  ***  R U L E S F U N C T I O N S M E R G E  ***  -->
  <!--  ***********************************************  -->
  <target name="rulesfunctionsmerge.uptodate" unless="disable.uptodate.check">

    <uptodate property="rulesfunctionsmergebuild.notRequired"
      targetfile="${j.gen.rulesfunctionsmetadata}">
      <srcfiles dir="${SERVER_DIR}/components" includes="*/rulesets/functions/CustomFunctionMetaData.xml"/>
    </uptodate>

  </target>

  <target name="rulesfunctionsmerge.echo" if="rulesfunctionsmergebuild.notRequired">
    <echo level="info" message="Skipping Custom Function Merge because all files are up-to-date."/>
  </target>

  <target name="rulesfunctionsmerge" description="Merge rules custom function meta-data from .xml files"
    depends="rulesfunctionsmerge.uptodate, rulesfunctionsmerge.echo" unless="rulesfunctionsmergebuild.notRequired">
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting rulesfunctionsmerge"/>
    </antcall>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Merge custom function meta-data file components"/>
    </antcall>

    <java
      classname="curam.util.tools.customfunctions.MergeCustomFunctorMetaData"
      classpath="${jar.tools}:${jar.coreinf}:${jar.rules}:${jar.log4j.2.core}:${jar.log4j.2.api}:${jar.clover}:${jar.j2ee}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generatecustomfunctionmetadata">
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />

      <arg value="-serverlocalelist" />
      <arg value="${SERVER_LOCALE_LIST}" />
      <arg line="-servercomponentorder"/>
      <arg value="${SERVER_COMPONENT_ORDER}" />
      <arg line="-outfile ${j.gen.rulesfunctionsmetadata}" />
      <arg line="-serverdirectory ${SERVER_DIR}" />
    </java>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Ending rulesfunctionsmerge"/>
    </antcall>
  </target>


  <!--  ***********************************************************  -->
  <!--  ***  P R E F E R E N C E P R O P E R T I E S M E R G E  ***  -->
  <!--  ***********************************************************  -->
  <target name="userpreferenceproperties.uptodate" unless="disable.uptodate.check">

    <uptodate property="userpreferencepropertiesbuild.notRequired"
      targetfile="${dir.bld.svr}/userpreferenceproperties.marker">
      <srcfiles dir="${SERVER_DIR}/components" includes="*/userpreferences/*.*"/>
    </uptodate>

  </target>

  <target name="userpreference.echo" if="userpreferencepropertiesbuild.notRequired">
    <echo level="info" message="Skipping User Preference Merge because all files are up-to-date."/>
  </target>

  <target name="mergeuserpreferenceproperties" description="Merge the user preference properties files"
    depends="userpreferenceproperties.uptodate, userpreference.echo" unless="userpreferencepropertiesbuild.notRequired">
    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting mergeuserpreferenceproperties"/>
    </antcall>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Merge the user preference properties files"/>
    </antcall>

    <java
      classname="curam.util.tools.userpreference.UserPreferenceProperties"
      classpath="${jar.tools}:${jar.coreinf}:${jar.log4j.2.core}:${jar.log4j.2.api}:${jar.clover}:${jar.commons}:${jar.j2ee}:${jar.ant}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="mergeuserpreferenceproperties">
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />

      <arg value="-serverDirectory" />
      <arg value="${SERVER_DIR}" />
      <arg line="-componentList" />
      <arg line="${SERVER_COMPONENT_ORDER}" />
      <arg value="-localeList" />
      <arg value="${SERVER_LOCALE_LIST}" />
    </java>

    <touch file="${dir.bld.svr}/userpreferenceproperties.marker"/>

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Ending mergeuserpreferenceproperties"/>
    </antcall>
  </target>


  <!--  ***********************  -->
  <!--  ***  P R O P G E N  ***  -->
  <!--  ***********************  -->
  <target name="propgen.uptodate" unless="disable.uptodate.check">
    <uptodate property="propgen.notRequired" targetfile="${dir.bld.svr}/propgen.marker">
      <srcfiles dir="${dir.base.components}" includes="*/properties/Application.prx"/>
      <srcfiles dir="${dir.project.properties}" includes="Application.prx"/>
    </uptodate>
  </target>

  <target name="propgen.echo" if="propgen.notRequired">
    <echo level="info" message="Skipping Property Generation because all files are up-to-date."/>
  </target>

  <target name="propgen"
    depends="propgen.uptodate, propgen.echo" unless="propgen.notRequired"
    description="Generate property constants from .prx files">

    <antcall target="dispmsg" inheritall="false">
      <param name="prm.msg" value="Starting propgen"/>
    </antcall>

    <ant antfile="${dir.sde.bin}/app_propertiesmanager.xml" target="merge.properties" inheritall="false"/>

    <java
      classname="curam.util.tools.properties.GenerateEnvVars"
      classpathref="j.cp"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generateenvvars">
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <sysproperty key="curam.disable.dynamic.properties" value="true"/>

      <arg value="-inputFile" />
      <arg value="${j.gen.properties}/Application.prx" />
      <arg value="-outputFile" />
      <arg value="${dir.bld.svr.gen}/curam/core/impl/EnvVars.java" />
    </java>

    <touch file="${dir.bld.svr}/propgen.marker"/>

  </target>

  <!-- ENTITY ADAPTERS -->
  <target name="adaptersArtifacts.uptodate" unless="disable.uptodate.check">

    <uptodate property="adaptersbuild.notRequired" targetfile="${dir.bld.svr}/adaptersbuild.marker">
      <srcfiles dir="${dir.base.components}" includes="*/properties/adapters.properties"/>
      <srcfiles dir="${dir.bld}" includes="${SERVER_MODEL_NAME}.xml"/>
    </uptodate>

    <condition property="adaptersbuild.notRequired">
      <resourcecount when="equal" count="0">
        <fileset dir="${dir.base.components}">
          <include name="*/properties/adapters.properties"/>
        </fileset>
      </resourcecount>
    </condition>
  </target>

  <target name="adaptersArtifacts.echo" if="adaptersbuild.notRequired">
    <echo level="info" message="Skipping Adapters generation because all files are up-to-date."/>
  </target>

  <target name="generateAdapters" depends="adaptersArtifacts.uptodate, adaptersArtifacts.echo" unless="adaptersbuild.notRequired">

    <echo message="Generating entity adapters..."/>
    <path id="adapters.file.path">
      <fileset dir="${dir.base.components}">
        <include name="*/properties/adapters.properties"/>
      </fileset>
    </path>
    <pathconvert pathsep=";" property="adapterFiles" refid="adapters.file.path"/>

    <!-- Call the java task to generate code -->
    <java
      classname="curam.util.tools.persistence.generator.adapters.AdapterGenerator"
      classpathref="j.cp"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="generateadapters">
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <sysproperty key="curam.disable.dynamic.properties" value="true"/>

      <arg value="${dir.bld.svr.gen}" />
      <arg value="${dir.bld.svr.components}" />
      <arg value="${project.package}" />
      <arg value="${adapterFiles}" />
      <arg value="${fil.xml.project}" />
      <arg value="${componentcodegen}" />
    </java>

    <touch file="${dir.bld.svr}/adaptersbuild.marker"/>

  </target>

</project>
