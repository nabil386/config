<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2020. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--
  This is the ant build file for the Rule Set import and export.
  It contains any utility tasks used by this purpose.
-->
<project name="app_rulesimportexport" default="listrulesets">

  <!--  ***************************  -->
  <!--  ***  Import Properties  ***  -->
  <!--  ***************************  -->
  <import file="./app_properties.xml" />

  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="./app_utilities.xml" />

  <!--  ***************************************************  -->
  <!--  ***  Check rule set output component property   ***  -->
  <!--  ***************************************************  -->
  <target name="check.component.available" unless="component">
    <fail message="The property 'component' must be set. Please use -Dcomponent"/>
  </target>

  <!--  ****************************************  -->
  <!--  ***  Check rule set id  property     ***  -->
  <!--  ****************************************  -->
  <target name="check.rulesetid.available" unless="rulesetid">
    <fail message="The property 'rulesetid' must be set. Please used -Drulesetid"/>
  </target>

  <!--  ***************************************************  -->
  <!--  ***  Check rule set import file name property   ***  -->
  <!--  ***************************************************  -->
  <target name="check.ruleset.import.filename.available" unless="ruleset.file">
    <fail message="The property 'ruleset.file' must be set. Please use -Druleset.file"/>
  </target>

  <!--  ************************************************************  -->
  <!--  ***  Check rule set import overwrite indicator property  ***  -->
  <!--  ************************************************************  -->
  <target name="check.ruleset.import.overwriteInd.available" unless="overwrite.rules">

    <condition property="overwrite.rules" value="true">
       <istrue value="${overwrite}"/>
    </condition>
    <property name="overwrite.rules" value="false"/>

  </target>

  <!--  ********************************************  -->
  <!--  ***  Check  rule set import environment  ***  -->
  <!--  ********************************************  -->
  <target name="check.rulesimport.env"
    depends="check.ruleset.import.filename.available, check.ruleset.import.overwriteInd.available">

    <!-- check if the specified rule set file exists -->
    <available property="ruleset.import.file.exists"
      file="${ruleset.file}" type="file"/>

    <fail unless="ruleset.import.file.exists"
       message="The rule set file ${ruleset.file} specified does not exist."/>
  </target>

  <!--  ********************************************  -->
  <!--  ***  Build  rule set import properties   ***  -->
  <!--  ********************************************  -->
  <target name="build.rulesimport.properties" depends="check.rulesimport.env">

    <property name="batch.program"
      value="curam.util.internal.rules.intf.RuleSetImport.importRuleSet"/>

    <property name="batch.username"  value="superuser"/>
    <property name="importInd"  value="true"/>

  </target>

  <!--  ********************************************  -->
  <!--  ***  Check  rule set export environment  ***  -->
  <!--  ********************************************  -->
  <target name="check.rulesexport.env"
    depends="check.component.available, check.rulesetid.available">

    <!-- check if the specified component directory exists -->
    <available property="component.exists"
      file="${dir.base.components}/${component}" type="dir"/>

    <fail unless="component.exists" message="Component directory must exist in advance."/>

    <!-- check if the rulesets directory exists -->
    <available property="component.rulesets.exists"
      file="${dir.base.components}/${component}/rulesets" type="dir"/>

    <fail unless="component.rulesets.exists"
      message="Directory rulesets must exist in the component's directory."/>

    <!-- set rule sets export dir property -->
    <property name="dir.rulesets.export"
      value="${dir.base.components}/${component}/rulesets"/>

  </target>

  <!--  ************************************  -->
  <!--  ***  List  rule set information  ***  -->
  <!--  ************************************  -->
  <target name="listrulesets"
    depends="check.db.type, run.database.db2, run.database.ora, run.database.zos, run.database.h2,
             get.decrypted.db.password"
    description="List rule set information in database">

    <echo>List of rulesets available in the database</echo>

    <sql
      driver="${db.driver}"
      url="${db.url}"
      userid="${curam.db.username}"
      password="${decrypted.db.password}"
      print="yes"
      onerror="continue">

      <connectionProperty name="sslConnection" value="${curam.db2.ssl}"/>
      <connectionProperty name="sslTrustStoreLocation" value="${curam.db2.ssl.truststore.location}"/>
      <connectionProperty name="sslTrustStorePassword" value="${curam.db2.ssl.truststore.password}"/>
      <classpath>
        <path refid="database.common.classpath"/>
      </classpath>

      Select RULESETID, NAME from RULESETINFORMATION;
    </sql>
  </target>


  <!--  **************************************  -->
  <!--  ***  Export  rule set information  ***  -->
  <!--  **************************************  -->
  <target name="exportruleset"
    description="Export a rule set definition from database to file
      system (specify rule set to be extracted using -Drulesetid=id
      and component using -Dcomponent=component) Disable XML
      reformatting using -Dnoformat=true"
    depends="check.rulesexport.env" >

    <condition property="format.rules.arg" value="true">
      <istrue value="${noformat}"/>
    </condition>
    <property name="format.rules.arg" value="false"/>

    <java
      classname="curam.util.tools.dataextractor.RuleSetExtractor"
      classpathref="database.common.classpath"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="rulesetextractor"
    >
      <sysproperty key="curam.disable.dynamic.properties"     value="true"/>
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg line="-rulesetid ${rulesetid}" />
      <arg line="-outputdir ${dir.rulesets.export}" />
      <arg line="-noformatting ${format.rules.arg}"/>
    </java>

    <echo>The output rule set file has been created in ${dir.rulesets.export}
    </echo>

  </target>

  <!--  **************************************  -->
  <!--  ***  Import rule set information  ***  -->
  <!--  **************************************  -->
  <target name="importruleset" depends="build.rulesimport.properties"
    description="Import a rule set definition from file to database
      (specify rule set file to be imported using -Druleset.file,
       and overwrite indicator using -Doverwrite)">

    <delete dir="${dir.bld.rulesimport}"/>
    <mkdir dir="${dir.bld.rulesimport}" />

    <!-- get temporary file name, the file will be deleted at the end of import -->
    <tempfile
      property="import.ruleset.temp.file"
      destDir="${dir.bld.rulesimport}"
      prefix="rule"
      suffix=".xml"/>
    <xslt
      in="${ruleset.file}"
      out="${import.ruleset.temp.file}"
      style="${dir.sde.bin}/stripxml.xsl">
    </xslt>

    <property name="batch.parameters"
      value="fileName=${import.ruleset.temp.file},overwriteInd=${overwrite.rules},importInd=${importInd}"/>

    <!-- Call app_batchlauncher.xml to launch the Batch Launcher -->
    <ant
      antfile="${dir.sde.bin}/app_batchlauncher.xml"
      target="main"
      inheritall="false">
      <property name="batch.program" value="${batch.program}"/>
      <property name="batch.parameters" value="${batch.parameters}"/>
      <property name="batch.username" value="${batch.username}"/>
      <property name="disable.database.callback" value="${disable.database.callback.flag}"/>
      <property name="force.disable.in.standalone" value="${force.disable.in.standalone.flag}"/>
    </ant>

    <!-- delete temporary file -->
    <delete file="${import.ruleset.temp.file}"/>

    <echo>The rule set file ${ruleset.file} has been imported into the database
    </echo>

  </target>

</project>



