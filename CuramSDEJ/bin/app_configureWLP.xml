<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM
  
  Copyright IBM Corporation 2020,2021. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  Script to configure WLP using AppServer.properties.

-->
<project name="app_configureWLP" default="setup" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

  <!--  ***************************  -->
  <!--  ***  Import Properties  ***  -->
  <!--  ***************************  -->
  <import file="./app_properties.xml" />

  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="./app_utilities.xml" />

  <import file="./app_macros.xml" />

  <!-- App server specific properties -->
  <property file="${app.prop.location}" />

  <!-- Import utilities after Appserver.properties -->
  <import file="./app_utilitiesWLP.xml" />
  
  <!-- Import utilities for WLPRegistry -->
  <import file="./app_init.xml" />

  <!-- The heap min/max is set to the same value -->
  <property name="curam.server.jvm.heap.size" value="4096" />
  
  <!-- HTTP keepalive attribute of the Web Transport Chain's HTTP Inbound Channel -->
  <property name="curam.transportchain.http.keepalive.enabled" value="true" />
  
  <!-- HTTP persistentTimeout attribute of the Web Transport Chain's HTTP Inbound Channel -->
  <property name="curam.transportchain.http.keepalive.timeout" value="30" />
  
  <!-- Default curam.security.usernames.delimiter -->
  <property name="curam.security.usernames.delimiter" value="," />

  <!-- Default curam.security.check.identity.only -->
  <property name="curam.security.check.identity.only" value="false" />

  <!-- Default curam.security.user.registry.enabled -->
  <property name="curam.security.user.registry.enabled" value="false" />

  <!-- Default curam.security.user.registry.enabled.types -->
  <property name="curam.security.user.registry.enabled.types" value="" />

  <!-- Default curam.security.user.registry.disabled.types -->
  <property name="curam.security.user.registry.disabled.types" value="" />

  <!-- Keystore properties for SSL configuration -->
  <property file="${dir.sde.xmlserver}/TLSKeystore.properties" prefix="xmlks" />

  <!-- Properties for JWT keystore -->
  <property file="${dir.project.properties}/JWTKeystore.properties"  />
  
 
  <!-- Set default values for required credentials -->
  <condition
    property="curam.security.credentials.async.username"  value="${runas.user}">
    <isset property="runas.user" />
  </condition>
  <property name="curam.security.credentials.async.username" value="SYSTEM"/>
  
  <condition
    property="curam.security.credentials.async.username"  value="${runas.password}">
    <isset property="runas.password" />
  </condition>
  <property name="curam.security.credentials.async.password" value="yq0KlHpuxSuDL/Et2+z6cA=="/>

  <!-- Curam system login module trace -->
  <property name="curam.security.login.trace" value="false" />

  <!-- Curam system login module sample SAML code -->
  <property name="curam.security.login.saml" value="false" />
  
  <!--  *******************  -->
  <!--  ***  S E T U P  ***  -->
  <!--  *******************  -->
  <target name="setup" depends="init, get.decrypted.db.password, get.decrypted.appserver.password" description="Configure the Liberty server for Curam">

    <condition property="crypto.file.exists" value="true">
      <available file="${crypto.prop.file.location}/CryptoConfig.properties" />
    </condition>

    <condition property="jwt.crypto.dir" value="${sysenv.JAVA_HOME}/jre/lib/ext" else="${sysenv.JAVA_HOME}/lib/ext">
      <available file="${sysenv.JAVA_HOME}/jre/lib/ext"/>
    </condition>
    
    <antcall target="updateRegistry.for.propertyfile"/>

    <property name="wlp.shared.resource.dir" value="${WLP_HOME}/usr/shared/resources" />
    
    <!-- Remove any Registry or WLPRegistry Jar files -->
    <delete dir="${wlp.shared.resource.dir}" includes="*.jar" />

    <!-- Copy registry jar file -->
    <copy toDir="${wlp.shared.resource.dir}" file="${jar.wlp.registry}" overwrite="true" />
    <copy toDir="${wlp.shared.resource.dir}" file="${jar.coreinf.ejb.interfaces}" overwrite="true" />
    <copy todir="${wlp.shared.resource.dir}/drivers" overwrite="true">
      <fileset dir="${dir.sde.drivers}">
        <include name="db2jcc4.jar" />
        <include name="db2jcc_license_cu.jar" />
        <include name="h2-${version-h2}.jar" />
        <include name="ojdbc8.jar" />
      </fileset>
    </copy>

    <antcall target="delete.server" inheritall="false" />
    <antcall target="create.server" inheritall="false" />

     <!-- Decrypt the curam.security.credentials.async.password. -->
     <decrypt to="decrypted.curam.security.credentials.async.password" from="${curam.security.credentials.async.password}" type="decrypt"/>
     <wlpEncodePassword password="${decrypted.curam.security.credentials.async.password}" property="encoded.curam.security.credentials.async.password" />

    <!-- do the configuration steps -->
    <string to="curam.db.type.upper" from="${curam.db.type}" type="uppercase" />
    <wlpEncodePassword password="${decrypted.appserver.password}" property="encoded.appserver.password" />
    <wlpEncodePassword password="${decrypted.db.password}" property="encoded.db.password" />

    <!-- Force overwrite of server.xml -->
    <copy file="${dir.sde.bin}/wlpserver/dynamic/server.xml" todir="${server.setup.location}" overwrite="true" force="true">
      <filterset begintoken="$${%" endtoken="%}">
        <filter token="curam.db.type" value="${curam.db.type.upper}" />
      </filterset>
    </copy>

    <!-- Copy static config files. -->
    <copy todir="${server.setup.location}">
      <fileset dir="${dir.sde.bin}/wlpserver/static" includes="**/*.xml" excludes="server.xml" />
    </copy>
    
    <condition
      property="curam.db.servername"  value="localhost">
      <equals arg1="remote" arg2="${curam.db.h2.mode}" />
    </condition>
    <condition
      property="curam.db.serverport"  value="9092">
      <equals arg1="remote" arg2="${curam.db.h2.mode}" />
    </condition>
    <condition
      property="curam.db.h2.protocol" 
      value="tcp://${curam.db.servername}:${curam.db.serverport}/file:">
      <equals arg1="remote" arg2="${curam.db.h2.mode}" />
    </condition>
    <condition
      property="curam.db.h2.protocol" 
      value="file:">
      <equals arg1="embedded" arg2="${curam.db.h2.mode}" />
    </condition>
    <property name="curam.db.h2.protocol" value="" />
    
    <!-- Default H2 MVCC setting to True, if not set in Bootstrap.properties -->
    <property name="curam.db.h2.mvcc" value="true" />
    
    <condition 
      property="curam.db.oracle.url"
      value="jdbc:oracle:thin:/@//${curam.db.servername}:${curam.db.serverport}/${curam.db.oracle.servicename}">
      <isset property="curam.db.oracle.servicename" />
    </condition>
    <condition 
      property="curam.db.oracle.url"
      value="jdbc:oracle:thin:@${curam.db.servername}:${curam.db.serverport}:${curam.db.name}">
      <and>
        <equals arg1="ora" arg2="${curam.db.type}" casesensitive="no" />
        <not>
          <isset property="curam.db.oracle.servicename" />
        </not>
      </and>
    </condition>
    <property name="curam.db.oracle.url" value="" />

    <!-- Note: Derivation of the default curam.webserver.name value is problematic across OSes
               as it's based on the short hostname that isn't implemented consistently.
               This works on most UNIX flavours: ihs_`hostname -s` 
               Otherwise, the curam.webserver.name property value must be passed on the command line. 
    -->
    <exec executable="hostname" failonerror="true" outputproperty="host.short.name" osfamily="unix">
      <arg line="-s"/>
    </exec>
    <property if:set="host.short.name" name="curam.webserver.name" value="ihs_${host.short.name}"/>
    <property name="curam.webserver.name" value="webserver1"/>
    
    <condition property="gcc.log.dest" value="-Xverbosegclog">
      <contains string="${java.vm.vendor}" substring="ibm" casesensitive="no"/>
    </condition>
    <condition property="gcc.log.dest" value="-Xloggc">
      <or>
        <contains string="${java.vm.vendor}" substring="sun" casesensitive="no"/>
        <contains string="${java.vm.vendor}" substring="oracle" casesensitive="no"/>
        <contains string="${java.vm.vendor}" substring="hewlett" casesensitive="no"/>
      </or>
    </condition>
    <property name="gcc.log.dest" value="#-Xloggc" />

    <antcall target="-copy.db2.truststore" />
    <condition property="db2.sslTrustStoreLocation" value='sslTrustStoreLocation="$${shared.resource.dir}/security/db2TrustStore"'>
      <not>
        <equals arg1="${curam.db2.ssl.truststore.location}" arg2="" />
      </not>
    </condition>
    <property name="db2.sslTrustStoreLocation" value="" />

    <wlpEncodePassword password="${curam.db2.ssl.truststore.password}" property="encoded.db2.sslTrustStorePassword"
      unless:blank="${curam.db2.ssl.truststore.password}" />
    <condition property="db2.sslTrustStorePassword" value='sslTrustStorePassword="${encoded.db2.sslTrustStorePassword}"'>
      <isset property="encoded.db2.sslTrustStorePassword" />
    </condition>
    <property name="db2.sslTrustStorePassword" value="" />
    
    <filterset id="wlp.config.filterset" begintoken="$${%" endtoken="%}">
      <!-- JVM Options -->
      <filter token="curam.server.jvm.heap.size" value="${curam.server.jvm.heap.size}" />
      <filter token="gcc.log.dest" value="${gcc.log.dest}" />

      <!-- Server -->
      <filter token="curam.server.name" value="${curam.server.name}" />
      <filter token="curam.server.port" value="${curam.server.port}" />
      <filter token="curam.client.httpport" value="${curam.client.httpport}" />
      <filter token="curam.webservices.httpport" value="${curam.webservices.httpport}" />
      <filter token="curam.webserver.name" value="${curam.webserver.name}" />

      <!-- HTTP Inbound Channel -->
      <filter token="curam.transportchain.http.keepalive.enabled" value="${curam.transportchain.http.keepalive.enabled}" />
      <filter token="curam.transportchain.http.keepalive.timeout" value="${curam.transportchain.http.keepalive.timeout}" />

      <!-- Server Security -->
      <filter token="security.username" value="${security.username}" />
      <filter token="security.password" value="${encoded.appserver.password}" />
      <filter token="curam.security.credentials.async.username" value="${curam.security.credentials.async.username}"/>
      <filter token="curam.security.credentials.async.password" value="${encoded.curam.security.credentials.async.password}"/>
      <filter token="curam.security.login.trace" value="${curam.security.login.trace}"/>
      <filter token="curam.security.login.saml" value="${curam.security.login.saml}"/>
      <filter token="curam.security.usernames.delimiter" value="${curam.security.usernames.delimiter}"/>
      <filter token="curam.security.check.identity.only" value="${curam.security.check.identity.only}"/>
      <filter token="curam.security.user.registry.enabled" value="${curam.security.user.registry.enabled}"/>
      <filter token="curam.security.user.registry.enabled.types" value="${curam.security.user.registry.enabled.types}"/>
      <filter token="curam.security.user.registry.disabled.types" value="${curam.security.user.registry.disabled.types}"/>

      <!-- DB Related: Common -->
      <filter token="curam.db.type" value="${curam.db.type.upper}" />
      <filter token="curam.db.username" value="${curam.db.username}" />
      <filter token="curam.db.password" value="${encoded.db.password}" />
      <filter token="curam.db.name" value="${curam.db.name}" />
      <filter token="curam.db.servername" value="${curam.db.servername}" />
      <filter token="curam.db.serverport" value="${curam.db.serverport}" />
      
      <!-- DB Relatted: DB2 specific -->
      <filter token="curam.db2.ssl" value="${curam.db2.ssl}"/>
      <filter token="sslTrustStoreLocation" value="${db2.sslTrustStoreLocation}"/>
      <filter token="sslTrustStorePassword" value="${db2.sslTrustStorePassword}"/>
      
      <!-- DB Related: Oracle specific -->
      <filter token="curam.db.oracle.url" value="${curam.db.oracle.url}"/>
      
      <!-- DB Related: H2-specific -->
      <filter token="curam.db.h2.directory" value="${curam.db.h2.directory}" />
      <filter token="curam.db.h2.protocol" value="${curam.db.h2.protocol}" />
      <filter token="curam.db.h2.mvcc" value="${curam.db.h2.mvcc}" />
      <filter token="h2.jar.version" value="${version-h2}" />
    </filterset>

    <!-- Copy dynamic config files. -->
    <copy todir="${server.setup.location}">
      <fileset dir="${dir.sde.bin}/wlpserver/dynamic"
        includes="**/*.xml,**/jvm.options" 
        excludes="**/server_resources_jdbc*.xml" />
      <filterset refid="wlp.config.filterset" />
    </copy>
    <copy todir="${server.setup.location}">
      <fileset dir="${dir.sde.bin}/wlpserver/dynamic"
        includes="**/server_resources_jdbc_${curam.db.type.upper}.xml" />
      <filterset refid="wlp.config.filterset" />
    </copy>

    <antcall target="create.ejbtimer.tables" />

    <!-- Do extra. -->
    <property name="do.extra.file" value="" />
    <antcall target="${do.extra.file}do.extra" inheritall="false" />

    <!-- create keystore for SSLConfiguration -->
    <exec executable="${WLP_HOME}/bin/securityUtility" failonerror="true">
      <arg line="createSSLCertificate"/>
      <arg line="--server=${curam.server.name}"/>
      <arg line="--password=${xmlks.keystore.password}"/>
      <arg line="--keyType=JKS"/>
    </exec>
    <property name="certificate.location" value="${server.setup.location}/resources/security"/>
    <exec executable="keytool" resultproperty="result.prop" failonerror="false" outputproperty="output.prop">
      <arg line="-importcert"/>    
      <arg line="-trustcacerts"/>
      <arg line="-alias ${xmlks.keystore.alias}"/>
      <arg line="-file ${dir.sde.xmlserver}/${xmlks.certificate.filename}"/>
      <arg line="-keystore ${certificate.location}/key.jks"/>
      <arg line="-keypass ${xmlks.keystore.password}"/>
      <arg line="-storepass ${xmlks.keystore.password}"/>
      <arg line="-noprompt"/>
    </exec>

    <!-- import JWT public cert into keystore -->
    <exec executable="keytool" failonerror="false" >
      <arg line="-importcert"/>    
      <arg line="-trustcacerts"/>
      <arg line="-alias ${jwt.cert.alias}"/>
      <arg line="-file ${jwt.crypto.dir}/${jwt.public.cert.filename}"/>
      <arg line="-keystore ${certificate.location}/key.jks"/>
      <arg line="-keypass ${xmlks.keystore.password}"/>
      <arg line="-storepass ${xmlks.keystore.password}"/>
      <arg line="-noprompt"/>
    </exec>

    <wlpEncodePassword password="${xmlks.keystore.password}" property="encoded.certificate.password"/>
    <replaceregexp file="${server.setup.location}/adc_conf/server_security.xml"
                   encoding="UTF-8"
                   match="(&quot;defaultKeyStore&quot; .*)(password=&quot;.*&quot;)( .*/&gt;)"
                   replace="\1 password=&quot;${encoded.certificate.password}&quot; \3"
                   byline="true"/>

  </target>

  <target name="-copy.db2.truststore" depends="-check.db2.truststore"
    if="curam.db2.ssl.truststore.location.available">
    <mkdir dir="${wlp.shared.resource.dir}/security" />
    <copy file="${curam.db2.ssl.truststore.location}" tofile="${wlp.shared.resource.dir}/security/db2TrustStore" overwrite="true" />
  </target>
  
  <target name="-check.db2.truststore">
    <available property="curam.db2.ssl.truststore.location.available" file="${curam.db2.ssl.truststore.location}" type="file" />
  </target>

  <!-- ************************** -->
  <!-- ***  D O .  E X T R A  *** -->
  <!-- ************************** -->
  <import file="./extra_wlp_configuration.xml" optional="true" />
  <target name="do.extra" description="Dummy target to allow hook for extra configuration to be performed." />

  
  <!--  *****************  -->
  <!--  ***  I N I T  ***  -->
  <!--  *****************  -->
  <target name="init">
    <tstamp />
    <echo message="Invoking WLP configuration script" />

    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="WLP_HOME" />
      <param name="prm.prop" value="sysenv.WLP_HOME" />
    </antcall>

  </target>

  <target name="stopOneWLPServer.if.started" if="server.is.started">

    <ant target="stopserver" antfile="./build.xml" inheritAll="false">
      <property name="dir.project.properties" value="${prop.file.location}" />
      <property name="server.name" value="${curam.server.name}" />
      <property name="fail.on.error" value="${fail.on.error}" />
    </ant>

  </target>

  <target name="stopOneWLPServer.if.notstarted" unless="server.is.started">
    <echo message="Server '${curam.server.name}' did not need to be stopped, it wlp not running." />
  </target>

  <!-- ************************************ -->
  <!-- ***  D E L E T E  P R O F I L E  *** -->
  <!-- ************************************ -->
  <target name="delete.server" unless="keep.profile">

    <!-- Stop the server, ignoring errors. -->
    <wlpserver operation="stop" failonerror="false" />

    <!-- Clean up the filesystem. -->
    <delete dir="${server.setup.location}" failonerror="false" />
  </target>

  <!-- ************************************ -->
  <!-- ***  C R E A T E  P R O F I L E  *** -->
  <!-- ************************************ -->
  <target name="create.server" unless="keep.profile">

    <echo message="Creating server - ${server.setup.location}" />
    <wlpserver operation="create" />

  </target>

  <target name="create.ejbtimer.tables"
    depends="check.db.type,
      run.database.db2,
      run.database.ora,
      run.database.zos,
      get.decrypted.db.password">
      
    <antcall target="dispmsg">
      <param name="prm.msg" value="Creating EJB timer tables"/>
    </antcall>
    
    <sql
      driver="${db.driver}"
      url="${db.url}"
      userid="${curam.db.username}"
      password="${decrypted.db.password}"
      autocommit="true"
      onerror="continue"
      print="true">
      <transaction src="${dir.sde.bin}/wlpserver/static/EJBTimerTables.sql"/>
      <connectionProperty name="sslConnection" value="${curam.db2.ssl}"/>
      <connectionProperty name="sslTrustStoreLocation" value="${curam.db2.ssl.truststore.location}"/>
      <connectionProperty name="sslTrustStorePassword" value="${curam.db2.ssl.truststore.password}"/>      
      <classpath>
        <path refid="database.common.classpath"/>
      </classpath>
    </sql>
  </target>

</project>
