<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2022. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  Script to configure Weblogic.

-->
<project name="app_configureWLS" default="configure" basedir=".">

  <!--  ***************************  -->
  <!--  ***  Import Properties  ***  -->
  <!--  ***************************  -->
  <import file="./app_properties.xml" />

  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="./app_utilities.xml" />
  <import file="./app_macros.xml" />

  <!-- App server specific properties -->
  <property file="${app.prop.location}"/>

  <!-- Other Properties -->
  <property name="domain.home"              value="${WLS_HOME}/../../user_projects/domains/${node.name}"/>
  <property name="jms.filestore.directory"  value="${domain.home}/jms_file_store"/>
  <property name="JDBCConnectionPool"       value="curamdbPool"/>
  <property name="AuthenticatorName"        value="myrealmCuramAuthenticator"/>
  <property name="JMSFileStore"             value="CuramJMSFileStore"/>
  <property name="JMSJDBCStore"             value="CuramJMSJDBCStore"/>
  <property name="QueueConnectionFactory"   value="CuramQueueConnectionFactory"/>
  <property name="TopicConnectionFactory"   value="CuramTopicConnectionFactory"/>
  <property name="DataSourceName"           value="curamdb"/>
  <property name="JMSServer"                value="CuramJMSServer"/>
  <property name="JMSModuleName"            value="SPMSystemModule"/>
  <condition property="wlsTemplateHome"     value="${WLS_HOME}/../common/templates/wls/" >
    <available file="${WLS_HOME}/../common/templates/wls/" type="dir" />
  </condition>
  <property name="wlsTemplateHome"          value="${WLS_HOME}/../common/templates/domains/"/>
  <property name="AdminHost"                value="localhost"/>
  <property name="TestTableName"            value="DUAL"/>
  <property name="WLSTVerboseMode"          value="false"/>

  <path id="wlst.classpath">
    <pathelement path="${jar.wlstcontrol}" />
    <pathelement location="${prop.file.location}" />
    <pathelement path="${WLS_HOME}/lib/mbeantypes/CuramMBean.jar" />
    <pathelement path="${WLS_HOME}/lib/weblogic.jar" />
    <pathelement path="${WLS_HOME}/lib/xbean.jar" />
    <pathelement path="${WLS_HOME}/lib/xqrl.jar" />
  	<pathelement path="${WLS_HOME}/../modules/features/wlst.wls.classpath.jar" />
    <pathelement path="${jar.javatools}" />
  </path>

  <!-- ********************************** -->
  <!-- ***  C O N F I G U R E  W L S  *** -->
  <!-- ********************************** -->
  <target name="configure" depends="get.decrypted.appserver.password">

    <echo message="Invoking WLS configuration script."/>

    <antcall target="check.prop" inheritall="false">
      <param name="prm.var" value="WLS_HOME"/>
      <param name="prm.prop" value="sysenv.WLS_HOME"/>
    </antcall>

    <antcall target="stopserverforconfigure" inheritAll="false"/>

    <delete dir="${domain.home}"/>

    <!-- Copy CuramMBean.jar to correct location. -->
    <echo>Copying CuramMBean.jar</echo>
    <copy file="${dir.sde.lib}/CuramMBean.jar"
      toFile="${WLS_HOME}/lib/mbeantypes/CuramMBean.jar"
      overwrite="true"/>

    <!-- Copy ojdbc8.jar to correct location. -->
    <echo>Copying ojdbc8.jar</echo>
    <copy file="${dir.sde.drivers}/ojdbc8.jar"
      toFile="${WLS_HOME}/lib/ojdbc8.jar"
      overwrite="true"/>

    <antcall target="create.domain" inheritAll="false"/>
    <antcall target="startserverforconfigure"   inheritAll="false"/>

    <!-- Wait for the weblogic server to be started -->
    <ant antfile="./app_runtimewls.xml" target="check.server.running" inheritAll="false">
      <property name="server.port"        value="${curam.server.port}"/>
      <property name="server.name"        value="${curam.server.name}"/>
      <property name="node.name"          value="${node.name}"/>
      <property name="bea.home"           value="${WLS_HOME}/../.."/>
    </ant>

    <antcall target="configure.security" inheritAll="false"/>

    <antcall target="configure.database" inheritAll="false"/>

    <echo>Create JMS File Store directory</echo>
    <mkdir dir="${jms.filestore.directory}"/>
    <antcall target="configure.jms" inheritAll="false"/>

    <property name="do.extra.file" value=""/>
    <antcall target="${do.extra.file}do.extra" inheritall="false"/>

    <antcall target="configure.wlsTestSSLCert" inheritAll="false"/>
    
    <antcall target="stopserverforconfigure" inheritAll="false"/>

  </target>

  <!-- ********************************** -->
  <!-- ***  C R E A T E  D O M A I N  *** -->
  <!-- ********************************** -->
  <target name="create.domain" depends="check.weblogic.version">

    <java classname="curam.util.tools.weblogic.WLSTControl"
      classpath="${crypto.prop.file.location}:${jar.coreinf}:${jar.clover}"
      classpathref="wlst.classpath"
      failonerror="true"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="wlstcontrol"
    >
      <arg line="-target createdomain" />
      <arg line="-javahome ${JAVA_HOME}" />
      <arg line="-wlshome ${WLS_HOME}" />
      <arg line="-wlstemplate ${wlsTemplateHome}" />
    </java>

    <!-- Change the login source from prompt to properties -->
    <replace dir="${domain.home}/bin">
      <include name="setDomainEnv.*"/>
      <replacetoken>MaxPermSize=128m</replacetoken>
      <replacevalue>MaxPermSize=256m</replacevalue>
    </replace>

  	<!-- Set property to revert HTTP protocol to HTTP/1.1 on WebLogic 14c-->
    <condition property="wls.disable.http2" value="-Dweblogic.http.disablehttp2=true">
      <isset property="is.wls.14.1"/>
    </condition>
    <property name="wls.disable.http2" value=""/>

    <replaceregexp file="${domain.home}/bin/setDomainEnv.cmd"
      match="JAVA_OPTIONS=%JAVA_OPTIONS%\r"
      replace="JAVA_OPTIONS=%JAVA_OPTIONS%\ ${wls.disable.http2} -Dweblogic.security.SSL.minimumProtocolVersion=TLSv1.2"/>

    <replaceregexp file="${domain.home}/bin/setDomainEnv.sh"
      match="JAVA_OPTIONS=&quot;\$\{JAVA_OPTIONS\}&quot;"
      replace="JAVA_OPTIONS=&quot;${JAVA_OPTIONS} ${wls.disable.http2} -Dweblogic.security.SSL.minimumProtocolVersion=TLSv1.2&quot;"/>

    <replaceregexp file="${domain.home}/bin/stopWebLogic.cmd"
      match="ignoreSessions=&apos;true&apos;"
      replace="ignoreSessions=&apos;true&apos; %WLS_FORCE_STOP%"/>

    <replaceregexp file="${domain.home}/bin/stopWebLogic.sh"
      match="ignoreSessions=&apos;true&apos;"
      replace="ignoreSessions=&apos;true&apos; ${WLS_FORCE_STOP}"/>

    <!-- For Unix, because of the filesystem structure, the file has to be set to execute. -->
    <chmod file="${domain.home}/bin/stopWebLogic.sh"
      perm="ugo+rx"
      osfamily="unix"/>

  </target>

  <!--  *********************  -->
  <!--  ***  STARTSERVER  ***  -->
  <!--  *********************  -->
  <target name="startserverforconfigure">

    <ant target="startserver" antfile="./build.xml" inheritAll="false" >
      <property name="dir.project.properties" value="${prop.file.location}"/>
      <property name="server.name"            value="${curam.server.name}"/>
      <property name="server.port"            value="${curam.server.port}"/>
    </ant>

  </target>

  <!--  ********************  -->
  <!--  ***  STOPSERVER  ***  -->
  <!--  ********************  -->
  <target name="stopserverforconfigure">

    <!-- Only stop the server if it has been started (ie if there is a -->
    <!-- ${curam.server.name}.pid file in its log directory).          -->
    <condition property="server.is.started">
      <socket server="${AdminHost}" port="${curam.server.port}"/>
    </condition>
    <antcall target="stopOneWLSServer.if.started"/>
    <antcall target="stopOneWLSServer.if.notstarted"/>

  </target>

  <!-- Non-visible target: Stop a WLS server, IF it is already started. -->
  <target name="stopOneWLSServer.if.started" if="server.is.started">

    <ant target="stopserver" antfile="./build.xml" inheritAll="false" >
      <property name="dir.project.properties" value="${prop.file.location}"/>
      <property name="server.name"            value="${curam.server.name}"/>
      <property name="fail.on.error"          value="true"/>
    </ant>

  </target>

  <!-- Non-visible target: Echo that the WLS server did not need to be stopped. -->
  <target name="stopOneWLSServer.if.notstarted" unless="server.is.started">
    <echo message="Server '${curam.server.name}' did not need to be stopped, it was not running." />
  </target>

  <!-- **************************************************** -->
  <!-- ***  D A T A B A S E  C O N F I G U R A T I O N  *** -->
  <!-- **************************************************** -->
  <target name="configure.database">
    <antcall target="configure.datasource"/>
  </target>

  <target name="configure.datasource">

    <condition property="usingoracle">
      <contains string="${curam.db.type}" substring="ora" casesensitive="No"/>
    </condition>

    <condition property="servicename.available">
      <isset property="curam.db.oracle.servicename"/>
    </condition>

    <antcall target="configure.datasource.ora"/>
    <antcall target="configure.datasource.db2"/>

  </target>

  <target name="configure.datasource.ora" depends="get.decrypted.db.password, ora.use.servicename" if="usingoracle" >

    <property name="db.url" value="jdbc:oracle:thin:@${curam.db.servername}:${curam.db.serverport}:${curam.db.name}"/>

    <!-- Configure the database -->
    <antcall target="weblogic.WLST" inheritAll="false">
      <param name="fail.on.error" value="true"/>
      <param name="message"
             value="Configuring the ${curam.db.name} database ..."/>
      <param name="WLST.option.string"
             value="${sysenv.CURAMSDEJ}/bin/wls_config_database.py ${node.name} ${AdminHost} ${curam.server.port} ${security.username}  ${decrypted.appserver.password}  ${curam.server.name} ${db.url} ${curam.db.username} ${decrypted.db.password} ${DataSourceName} ${JDBCConnectionPool} ${TestTableName} ${WLSTVerboseMode}"/>
    </antcall>

  </target>

  <target name="ora.use.servicename" if="servicename.available">
    <property name="db.url" value="jdbc:oracle:thin:/@//${curam.db.servername}:${curam.db.serverport}/${curam.db.oracle.servicename}"/>
  </target>

  <target name="configure.datasource.db2" unless="usingoracle">
    <fail message="ERROR - ${curam.db.type} is not supported with WebLogic."/>
  </target>

  <!-- **************************************************** -->
  <!-- ***  S E C U R I T Y  C O N F I G U R A T I O N  *** -->
  <!-- **************************************************** -->
  <target name="configure.security" depends="get.decrypted.appserver.password">
    <!-- Get and encrypt the security administrator password -->
    <java classname="curam.util.security.EncryptionAdmin"
      classpath="${crypto.prop.file.location}:${jar.coreinf}:${jar.clover}"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="encryptionadmin"
    >
      <jvmarg line="${java.jvmargs}" />
      <arg value="${decrypted.appserver.password}"/>
      <arg value="./password.txt"/>
    </java>
    <loadfile property="encrypted.password" srcFile="./password.txt"/>
    <delete file="./password.txt"/>

    <java classname="curam.util.tools.weblogic.WLSTControl"
      classpathref="wlst.classpath"
      classpath="${crypto.prop.file.location}:${jar.coreinf}:${jar.clover}"
      failonerror="true"
      fork="${java.fork}"
      maxmemory="${java.maxmemory}"
      taskname="wlstcontrol"
    >
      <arg line="-target configuresecurity" />
      <arg line="-javahome ${JAVA_HOME}" />
      <arg line="-wlshome ${WLS_HOME}" />
      <arg line="-password ${encrypted.password}" />
    </java>

  </target>

  <!-- ****************************************** -->
  <!-- ***  J M S  C O N F I G U R A T I O N  *** -->
  <!-- ****************************************** -->
  <target name="configure.jms">

    <antcall target="weblogic.WLST" inheritAll="false">
      <param name="fail.on.error" value="true"/>
      <param name="message"
             value="Configuring JMS for ${curam.server.name} ..."/>
      <param name="WLST.option.string"
             value="${sysenv.CURAMSDEJ}/bin/wls_config_jms.py ${node.name} ${AdminHost}  ${curam.server.port} ${security.username}  ${decrypted.appserver.password}  ${curam.server.name} ${WLS_HOME}/../../user_projects/domains/${node.name} ${JMSFileStore} ${JMSServer} ${JMSModuleName} ${WLSTVerboseMode}"/>
    </antcall>
  </target>

  <!-- ************************** -->
  <!-- ***  D O .  E X T R A  *** -->
  <!-- ************************** -->
  <import file="./extra_wls_configuration.xml" optional="true"/>
  <target name="do.extra" description="Dummy target to allow hook for extra configuration to be performed."/>

  <!-- ************************************************* -->
  <!-- ***  W E B L O G I C  W L S T  C O M M A N D  *** -->
  <!-- ************************************************* -->
  <target name="weblogic.WLST" depends="get.decrypted.appserver.password">
    <echo message="${message}"/>

    <condition property="wsct.extension" value=".cmd" >
      <os family="windows" />
    </condition>
    <property name="wsct.extension" value=".sh"/>
   
    <execos command="${WLS_HOME}/../../oracle_common/common/bin/wlst${wsct.extension}"
            fail.required="${fail.on.error}"
            options="${WLST.option.string}"/>

  </target>
  
  <!--  **************************************  -->
  <!--  ***  U T I L I T Y  T A R G E T S  ***  -->
  <!--  **************************************  -->
  <target name="oracle.settings" depends="ora.use.servicename" if="usingoracle">
    <property name="ddl.file"    value="${dir.sde.bin}/weblogic/store/io/jdbc/ddl/oracle_blob.ddl"/>
    <property name="db.driver"   value="oracle.jdbc.OracleDriver"/>
    <property name="db.url"      value="jdbc:oracle:thin:@${curam.db.servername}:${curam.db.serverport}:${curam.db.name}"/>
    <property name="transaction" value="DROP TABLE WLSTORE;"/>
  </target>

  <target name="db2.settings" if="usingdb2">
    <property name="ddl.file"    value="${dir.sde.bin}/weblogic/store/io/jdbc/ddl/db2.ddl"/>
    <property name="db.driver"   value="weblogic.jdbc.db2.DB2Driver"/>
    <property name="db.url"      value="jdbc:bea:db2://${curam.db.servername}:${curam.db.serverport};DatabaseName=${curam.db.name}"/>
    <property name="transaction" value="DROP TABLE WLSTORE;"/>
  </target>

  <!--  **********************************  -->
  <!--  ***  C H E C K  V E R S I O N  ***  -->
  <!--  **********************************  -->
  <target name="check.weblogic.version">
    <loadfile property="weblogicRegistryFile" srcfile="${WLS_HOME}/../../inventory/registry.xml"/>

	<for param="line" delimiter="${line.separator}" list="${weblogicRegistryFile}">
      <sequential>
        <propertyregex property="wls.version" input="@{line}" regexp='WebLogic\sServer\"\sversion\=\"(\d\d\.\d)' select="\1"/>
      </sequential>
    </for>

    <condition property="is.wls.14.1">
      <equals arg1="${wls.version}" arg2="14.1"/>
    </condition>
  </target>

  <condition property="wls.useCustomSSLCertSet">
    <isset property="wls.useCustomSSLCert"/>
  </condition>

  <target name="configure.wlsTestSSLCert" if="wls.useCustomSSLCertSet">
    <property name="trustkeyloc" value="${domain.home}/"/>
    <property name="trustkeyfile" value="${trustkeyloc}/testtrustkeyfile.jks"/>
    <property name="storetype" value="jks"/>
    <property name="certalias" value="testcert" />
    <property name="password" value="changeit" />
    <property name="certificate" value="${trustkeyloc}/curamtestcer.cer"/>
    <property name="keyalias" value="curamkey"/>
    <property name="sslkeysize" value="2048"/>
    <property name="sslkeyalg" value="RSA"/>

    <delete file="${trustkeyfile}"/>
          
    <exec executable="hostname" failonerror="true" outputproperty="cn"/>
    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-genkey -keyalg RSA -keysize ${sslkeysize} -sigalg ${sslkeyalg} -alias ${keyalias}
                     -keypass ${password} -validity 365 -keystore ${trustkeyfile} -storetype
                     ${storetype} -storepass ${password} -dname
                     'cn=${cn}, ou=Testing, o=MyTest, c=US'"/>

    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-export -alias ${keyalias} -file ${certificate}
                     -keystore ${trustkeyfile} -storetype ${storetype} -storepass ${password}"/>
    
    
    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-import -noprompt -alias ${certalias} -file ${certificate}
                     -keypass ${password} -keystore ${trustkeyfile} -storetype ${storetype} -storepass ${password}"/>

    <java classname="curam.util.tools.weblogic.WLSTControl"
          classpathref="wlst.classpath"
          classpath="${crypto.prop.file.location}:${jar.coreinf}:${jar.clover}"
          failonerror="true"
          fork="${java.fork}"
          maxmemory="${java.maxmemory}"
          taskname="wlstcontrol"
    >
      <arg line="-target configuretestsslcert" />
      <arg line="-javahome ${JAVA_HOME}" />
      <arg line="-wlshome ${WLS_HOME}" />
      <arg line="-password ${encrypted.password}" />
    </java>
    <echo message="Server configuured with Test SSL Certificate.."/>
    
  </target>
  <target name="createTestSSLCert" >
    <property name="trustkeyloc" value="${domain.home}/"/>
    <property name="trustkeyfile" value="${trustkeyloc}/testtrustkeyfile.jks"/>
    <property name="storetype" value="jks"/>
    <property name="certalias" value="testcert" />
    <property name="password" value="changeit" />
    <property name="certificate" value="${trustkeyloc}/curamtestcer.cer"/>
    <property name="keyalias" value="curamkey"/>
    <property name="sslkeysize" value="2048"/>
    <property name="sslkeyalg" value="RSA"/>
    <delete file="${trustkeyfile}"/>
            
    <exec executable="hostname" failonerror="true" outputproperty="cn"/>
    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-genkey -keyalg RSA -keysize ${sslkeysize} -sigalg ${sslkeyalg} -alias ${keyalias}
                     -keypass ${password} -validity 365 -keystore ${trustkeyfile} -storetype
                     ${storetype} -storepass ${password} -dname
                     'cn=${cn}, ou=Testing, o=MyTest, c=US'"/>

    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-export -alias ${keyalias} -file ${certificate}
                     -keystore ${trustkeyfile} -storetype ${storetype} -storepass ${password}"/>

    <execos command="${JAVA_HOME}/jre/bin/keytool"
            fail.required="true"
            options="-import -noprompt -alias ${certalias} -file ${certificate}
                     -keypass ${password} -keystore ${trustkeyfile} -storetype ${storetype} -storepass ${password}"/>

    <echo message="Test SSL Self Signed Certificate Created at ${trustkeyfile}.."/>

  </target>

</project>