<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  Script for DB2 database creation.

-->
<project name="db2_createdb" default="main" basedir=".">

  <property environment="env."/>

  <import file="${env.CURAMSDEJ}/bin/app_macros.xml" />
  <import file="${env.CURAMSDEJ}/bin/app_utilities.xml" />
  <import file="${env.CURAMSDEJ}/bin/app_properties.xml" />

  <property name="max.wait.seconds" value="30"/>

  <!-- DB2 command is OS-dependent -->
  <condition property="db2.command" value="db2cmd" >
    <os family="windows" />
  </condition>
  <!-- UNIX -->
  <property name="db2.command" value="db2"/>


  <!--  *****************************  -->
  <!--  ***  Create DB2 database  ***  -->
  <!--  *****************************  -->
  <target name="main" depends="get.decrypted.db.password"
          description="Create a sample Curam DB2 UDB database (specify -Drestart.db2=true if you want your DB2 restarted, which is required to complete database creation).">

    <property name="createdb.log"        value="${dir.sde.bin}/createdb.log"/>
    <delete file="${createdb.log}" />

    <condition property="db2.createdb.cmd" value="-c -w db2 -vf ./db2script -z '${createdb.log}'" >
      <os family="windows" />
    </condition>
    <!-- UNIX -->
    <property name="db2.createdb.cmd" value="-vf ./db2script -z '${createdb.log}'"/>

    <delete file="./db2script"/>
    <echo file="./db2script">
create database ${curam.db.name}
connect to ${curam.db.name} user ${curam.db.username} using ${decrypted.db.password}
update db cfg for ${curam.db.name} using LOCKTIMEOUT 30
    </echo>

    <echo>Creating and configuring database ${curam.db.name} ...</echo>

    <execos command="${db2.command}"
            fail.required="false"
            options="${db2.createdb.cmd}"/>

    <waitfor maxwait="${max.wait.seconds}" maxwaitunit="second"
             timeoutproperty="db2.createdb.timedout">
      <available file="${createdb.log}"/>
    </waitfor>	
    <delete file="./db2script"/>

    <!-- Since the database configuration warnings cause the db2cmd command
         to fail the exec, we check for the right number of successes and warnings. --> 
    <resourcecount property="successful.cmds">
      <tokens>
        <concat>
          <filterchain>
            <linecontainsregexp>
              <regexp pattern="successfully"/>
            </linecontainsregexp>
          </filterchain>
          <fileset file="${createdb.log}"/>
        </concat>
      </tokens>
    </resourcecount>

    <resourcecount property="warning.cmds">
      <tokens>
        <concat>
          <filterchain>
            <linecontainsregexp>
              <regexp pattern="SQL1363W"/>
            </linecontainsregexp>
          </filterchain>
          <fileset file="${createdb.log}"/>
        </concat>
      </tokens>
    </resourcecount>

    <condition property="createdb.successful">
      <and>
        <equals arg1="${successful.cmds}" arg2="2"/>
        <equals arg1="${warning.cmds}" arg2="1"/>
      </and>
    </condition>

   <fail message="The DB2 database creation did not complete in ${max.wait.seconds}.  Check the ${createdb.log} file for results.  Take appropriate action and rerun; specifying a max.wait.seconds value (e.g. -Dmax.wait.seconds=60) can allow for a longer time to wait for results.">
      <condition>
        <isset property="db2.createdb.timedout"/>
      </condition>
    </fail>
    <echo>See ${createdb.log} for results.</echo>

    <fail message="The createdb failed - there were not the expected number of success and warning errors. See the command output for more information.">
      <condition>
        <not>
          <isset property="createdb.successful"/>
        </not>
      </condition>
    </fail>

    <!-- Either restart DB2 (if requested) or notify user that it must be restarted -->
    <antcall target="check.restart.db2"/>
    <antcall target="notify.restart.db2"/>
  </target>

  
  <!--  ******************************  -->
  <!--  ***  Restart DB2 database  ***  -->
  <!--  ******************************  -->
  <target name="check.restart.db2" if="restart.db2">
    <antcall target="restart.db2"/>
  </target>

  <target name="notify.restart.db2" unless="restart.db2">
    <echo message="Your DB2 database must be restarted now to complete the database creation..."/>
  </target>

  <target name="restart.db2">

    <property name="restartdb2.log"        value="${dir.sde.bin}/restartdb2.log"/>
    <delete file="${restartdb2.log}" />

    <condition property="db2.restart.cmd" value="-c -w db2 -vf ./db2script -z '${restartdb2.log}'" >
      <os family="windows" />
    </condition>
    <!-- UNIX -->
    <property name="db2.restart.cmd" value="-vf ./db2script -z '${restartdb2.log}'"/>

    <delete file="./db2script"/>
    <echo file="./db2script">
db2stop force
db2start
    </echo>

    <echo>Restarting DB2...</echo>
    <execos command="${db2.command}"
            fail.required="true"
            options="${db2.restart.cmd}"/>

    <waitfor maxwait="${max.wait.seconds}" maxwaitunit="second"
             timeoutproperty="db2.restart.timedout">
      <available file="${restartdb2.log}"/>
    </waitfor>
    <delete file="./db2script"/>

    <fail message="The DB2 restart did not complete in ${max.wait.seconds}.  Check the ${restartdb2.log} file for results.  Take appropriate action and rerun; specifying a max.wait.seconds value (e.g. -Dmax.wait.seconds=60) can allow for a longer time to wait for results.">
      <condition>
        <isset property="db2.restart.timedout"/>
      </condition>
    </fail>

    <echo>See ${restartdb2.log} for results.</echo>

  </target>


  <!--  ***************************  -->
  <!--  ***  Drop DB2 database  ***  -->
  <!--  ***************************  -->
  <target name="dropdb"
   description="Drop sample Curam DB2 UDB database.">

    <property name="dropdb.log"        value="${dir.sde.bin}/dropdb.log"/>
    <delete file="${dropdb.log}" />

    <condition property="db2.dropdb.cmd" value="-c -w db2 -vf ./db2script -z '${dropdb.log}'" >
      <os family="windows" />
    </condition>
    <!-- UNIX -->
    <property name="db2.dropdb.cmd" value="-vf ./db2script -z '${dropdb.log}'"/>

    <delete file="./db2script"/>
    <echo file="./db2script">
drop database ${curam.db.name}
    </echo>

    <echo>Dropping database ${curam.db.name} ...</echo>
    <execos command="${db2.command}"
            fail.required="true"
            options="${db2.dropdb.cmd}"/>

    <waitfor maxwait="${max.wait.seconds}" maxwaitunit="second"
             timeoutproperty="db2.dropdb.timedout">
      <available file="${dropdb.log}"/>
    </waitfor>	
    <delete file="./db2script"/>

    <fail message="The DB2 database drop did not complete in ${max.wait.seconds}.  Check the ${dropdb.log} file for results.  Take appropriate action and rerun; specifying a max.wait.seconds value (e.g. -Dmax.wait.seconds=60) can allow for a longer time to wait for results.">
      <condition>
        <isset property="db2.dropdb.timedout"/>
      </condition>
    </fail>
    <echo>See ${dropdb.log} for results.</echo>

  </target>

</project>

