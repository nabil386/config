<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2012,2021. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant file for starting the XML Server.

-->
<project name="CuramProjectXMLServer" default="main">

 
  <property environment="sysenv."/>
  <property name="java.fork"        value="true"/>
  <property name="java.maxmemory"   value="768m"/>
  <property name="java.failonerror" value="true"/>
  <property name="java.thread.stack.size" value="-Xss4m"/>

  <property name="version.prop.file" location="./third_party_version.properties"/>
  <property file="${version.prop.file}"/>
  
  <property name="keystore.prop.file" location="./TLSKeystore.properties"/>
  <property file="${keystore.prop.file}"/>

  <condition property="renderx.home" value="${sysenv.RENDERX_HOME}">
    <isset property="sysenv.RENDERX_HOME"/>
  </condition>

  <property name="jar.batik"                    location="./batik-${version-batik}.jar"/>
  <property name="jar.commonsio"                location="./commons-io-${version-commons-io}.jar"/>
  <property name="jar.commonslogging"           location="./commons-logging-${version-commons-logging}.jar"/>
  <property name="jar.fop"                      location="./fop-${version-fop}.jar"/>
  <property name="jar.log4j.2.core"             location="./log4j-core-${version-log4j}.jar"/>
  <property name="jar.log4j.2.api"              location="./log4j-api-${version-log4j}.jar"/>
  <property name="jar.xalan"                    location="./xalan-${version-xalan}.jar"/>
  <property name="jar.xerces"                   location="./xerces-${version-xerces}.jar"/>
  <property name="jar.serializer"               location="./serializer-${version-serializer}.jar"/>
  <property name="jars.allxml"                  location="${jar.xerces}${path.separator}${jar.serializer}${path.separator}${jar.xalan}"/>
  <property name="jar.renderx.xep"              location="${renderx.home}/lib/xep.jar"/>
  <property name="jar.xml-apis-ext"             location="./xml-apis-ext-${version-xml-apis-ext}.jar"/>
  <property name="jar.xmlgraphicscommons"       location="./xmlgraphics-commons-${version-xmlgraphics-commons}.jar"/>
  <property name="jar.xmlservercommon"          location="./xmlservercommon.jar"/>
  <property name="jar.xmlserver"                location="./xmlserver.jar"/>
  <property name="xmlserver.port"               value="1800"/>
  <property name="fop.config.file"              location="./fopcfg.xml"/>
  <property name="custom.job.type"              value=""/>
  <property name="default.document.generator"   value="curam.util.xmlserver.DefaultDocumentGenerator"/>

  <property name="xmlserver.config.file"        value="./xmlserverconfig.xml"/>

  <path id="xmlserver.classpath">
    <pathelement path="${sysenv.PRE_CLASSPATH}"/>
    <pathelement path="${jar.xmlserver}"/>
    <pathelement path="${jar.fop}"/>
    <pathelement path="${jar.xml-apis-ext}"/>
    <pathelement path="${jar.xmlgraphicscommons}"/>
    <pathelement path="${jar.commonsio}"/>
    <pathelement path="${jar.batik}"/>
    <pathelement path="${jar.commonslogging}"/>
    <pathelement path="${jar.log4j.2.core}"/>
    <pathelement path="${jar.log4j.2.api}"/>
    <pathelement path="${jar.xmlservercommon}"/>
    <pathelement path="."/>
    <pathelement path="${jar.renderx.xep}"/>
    <pathelement path="${sysenv.POST_CLASSPATH}"/>
  </path>

  <condition property="java.jvmargs" value="-Xnoargsconversion" >
    <os family="z/os"/>
  </condition>
  <property name="java.jvmargs" value="-Dfake.property=1"/>

  <condition property="java.console.encoding" value="Cp1047">
      <os family="z/os"/>
  </condition>
  <property name="java.console.encoding" value="UTF-8"/>

  <condition property="java.file.encoding" value="UTF-8">
      <os family="z/os"/>
  </condition>
  <property name="java.file.encoding" value="ISO-8859-1"/>

  <condition property="print.command" value="CMD /x/c .\xmlserverprint.bat %d\%f %p">
      <os family="windows"/>
  </condition>
  <property name="print.command" value="./xmlserverprint.sh %d/%f %p"/>

  <condition property="rtl.generator.class" value="rtl.generator.class" >
    <isset property="${rtl.generator.class}"/>
  </condition>

  <property name="rtl.generator.class"  value="curam.util.xmlserver.PDFDocumentGenerator"/>

  <condition property="renderx.config.file" value="${renderx.home}/xep.xml" >
    <isset property="renderx.home" />
  </condition>

  <property name="renderx.config.file"         value=""/>
  <property name="use.template.cache"          value="true"/>
  <property name="custom.text.generator.class" value=""/>
  <property name="additional.args"             value=""/>
  

  <!--  *****************************  -->
  <!--  ****** KEYSTORE CHECK *******  -->
  <!--  *****************************  -->
  <target name="checkkeystore" description="Check if keystore already exists">
    <condition property="keystore.path"  value="${keystore.location}" else=".">
      <and>
        <isset property="keystore.location"/>
        <not>
          <equals arg1="${keystore.location}" arg2="" />
        </not>
      </and>
    </condition>
    <condition property="xmlserver.path" value="${config.xmlserver.path}" else="${keystore.path}">
      <isset property="config.xmlserver.path"/>
    </condition>
    
    <property name="certificate.path" value="${xmlserver.path}/${certificate.filename}"/>
    
    <condition property="ksExists">
      <available file="${xmlserver.path}/${keystore.filename}"/>
    </condition>

    <condition property="cacerts.path" value="${sysenv.JAVA_HOME}/jre/lib/security/cacerts" else="${sysenv.JAVA_HOME}/lib/security/cacerts">
      <available file="${sysenv.JAVA_HOME}/jre/lib/security/cacerts"/>
    </condition>
      
  </target>
  
  
  <!--  *****************************  -->
  <!--  *** KEYSTORE GENERATION   ***  -->
  <!--  *****************************  -->

  <target name="createkeystore" description="Generate the XML Server keystore if needed" depends="checkkeystore" unless="ksExists">
    <exec executable="${sysenv.JAVA_HOME}/bin/keytool">
      <arg line="-genkey"/>
      <arg line="-noprompt"/>
      <arg line="-alias ${keystore.alias}"/>
      <arg line="-keyalg ${key.algorithm}"/>
      <arg line="-keystore ${xmlserver.path}/${keystore.filename}"/>
      <arg line="-keysize ${key.size}"/>
      <arg line="-dname 'CN=${common.name}, OU=${organisation.unit}, O=${organisation}, L=${locality}, S=${state}, C=${country}'"/>
      <arg line="-storepass ${keystore.password}"/>
      <arg line="-keypass ${keystore.password}"/>
      <arg line="-storetype ${keystore.type}"/>
      <arg line="-validity ${key.validity}"/>
    </exec>
    <delete file="${certificate.path}"/>
    <echo message="Keystore created"/>
  </target>
  
  <target name="check.certificate">
    <condition property="cert.not.exist">
      <not>
        <available file="${certificate.path}"/>
      </not>
    </condition>
  </target>

  <!--  *******************************  -->
  <!--  *** EXPORT PUBLIC KEY CERT  ***  -->
  <!--  *******************************  -->
  
  <target name="exportcert" description="Export server certificate from keystore" depends="checkkeystore, check.certificate" if="cert.not.exist">
    <exec executable="${sysenv.JAVA_HOME}/bin/keytool">
      <arg line="-export"/>
      <arg line="-storetype ${keystore.type}"/>
      <arg line="-alias ${keystore.alias}"/>
      <arg line="-storepass ${keystore.password}"/>
      <arg line="-file ${certificate.path}"/>
      <arg line="-keystore ${xmlserver.path}/${keystore.filename}"/>
      <arg line="-keypass ${keystore.password}"/>
      <arg line="-rfc"/>
    </exec>
    <echo message="Certificate exported from keystore"/>
  </target>

  <target name="listcerts" description="List certs in cacerts" depends="checkkeystore">
   
    <exec executable="${sysenv.JAVA_HOME}/bin/keytool" outputproperty="listcerts">
      <arg line="-list"/>
      <arg line="-file ${certificate.path}"/>
      <arg line="-keystore ${cacerts.path}"/>
      <arg line="-keypass changeit"/>
      <arg line="-storepass changeit"/>
      <arg line="-noprompt"/>
    </exec>
    <condition property="certimported">
      <contains string="${listcerts}" substring="${keystore.alias}"/>
    </condition>
  </target>

  <target name="deletecert" description="Delete certificate from CA cert store" if="certimported" depends="listcerts">
    <exec executable="${sysenv.JAVA_HOME}/bin/keytool" failonerror="false">
      <arg line="-delete"/>
      <arg line="-alias ${keystore.alias}"/>
      <arg line="-file ${certificate.path}"/>
      <arg line="-keystore ${cacerts.path}"/>
      <arg line="-keypass changeit"/>
      <arg line="-storepass changeit"/>
      <arg line="-noprompt"/>
    </exec>
  </target>

  <!--  *******************************  -->
  <!--  *** IMPORT PUBLIC KEY CERT  ***  -->
  <!--  *******************************  -->
  <target name="importcert" description="Import cert to CA cert store" depends="deletecert">
    <exec executable="${sysenv.JAVA_HOME}/bin/keytool" resultproperty="result.prop" failonerror="false" outputproperty="output.prop">
      <arg line="-importcert"/>    
      <arg line="-trustcacerts"/>
      <arg line="-alias ${keystore.alias}"/>
      <arg line="-file ${certificate.path}"/>
      <arg line="-keystore ${cacerts.path}"/>
      <arg line="-keypass changeit"/>
      <arg line="-storepass changeit"/>
      <arg line="-noprompt"/>
    </exec>

    <condition property="error.occured">
      <not>
        <equals arg1="${result.prop}" arg2="0"/>
      </not>
    </condition>
    
    <fail if="error.occured" message="Failed to import the certificate (${certificate.path}) into client's CA truststore (${cacerts.path})!" />
    
    <echo message="Certificate (${certificate.path}) has been imported into client's CA truststore (${cacerts.path})."/>
  </target>
    
  <!--  *****************************  -->
  <!--  ***  X M L   S E R V E R  ***  -->
  <!--  *****************************  -->
  
  <target name="main" description="Start the XML Server" depends="createkeystore, exportcert, importcert">

     <!-- Create the directories used for Temporary and Produced server output -->
    <mkdir dir="./tmp" />
    <mkdir dir="./template" />
    <mkdir dir="./stats" />

    <copy file="./xmlserverconfig.xml.template"
      toFile="./xmlserverconfig.xml"
      overwrite="true"/>

     <!-- Build the XML Server configuration file -->
    <replace file="./xmlserverconfig.xml" encoding="UTF-8">
      <replacefilter token="#SERVER_COMMAND#"       value="${print.command}"/>
      <replacefilter token="#SERVER_PORT#"          value="${xmlserver.port}"/>
      <replacefilter token="#FOP_CONFIG_FILE#"      value="${fop.config.file}"/>
      <replacefilter token="#RENDERX_CONFIG_FILE#"  value="${renderx.config.file}"/>
      <replacefilter token="#CUSTOM_TEXT_GENERATOR_CLASS#" value="${custom.text.generator.class}"/>
      <replacefilter token="#RTL_GENERATOR_CLASS#"  value="${rtl.generator.class}"/>
      <replacefilter token="#USE_TEMPLATE_CACHE#"   value="${use.template.cache}"/>
      <replacefilter token="#DEFAULT_KEYSTORE_NAME#" value="${keystore.filename}"/>
      <replacefilter token="#DEFAULT_KEYSTORE_TYPE#" value="${keystore.type}"/>
      <replacefilter token="#DEFAULT_KEYSTORE_PASSWORD#" value="${keystore.password}"/>
      <replacefilter token="#DEFAULT_KEYSTORE_ALIAS#" value="${keystore.alias}"/>
    </replace>

     <!-- Ensure UNIX files are executable -->
    <chmod file="./xmlserverprint.sh" perm="ug+rx"/>
     <!-- Start the XML Server -->
    <java
      classname="curam.util.xmlserver.XMLServer"
      classpathref="xmlserver.classpath"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="xmlserver"
    >
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="${java.thread.stack.size}"/>
      <jvmarg value="-Dconsole.encoding=${java.console.encoding}" />
      <jvmarg value="-Dfile.encoding=${java.file.encoding}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg line="-c ${xmlserver.config.file}" />
      <arg line="${additional.args}"/>
    </java>
  </target>
  
  <target name="stop" description="Stop the XML Server">

    <exec executable="hostname" failonerror="true" outputproperty="host.name"/>
    <!-- Stop the XML Server -->
    <java
      classname="curam.util.xmlserver.XMLServerShutdown"
      classpathref="xmlserver.classpath"
      fork="${java.fork}"
      failonerror="${java.failonerror}"
      maxmemory="${java.maxmemory}"
      taskname="xmlservershutdown"
    >
      <jvmarg line="${java.jvmargs}" />
      <jvmarg value="-Dconsole.encoding=${java.console.encoding}" />
      <jvmarg value="-Dfile.encoding=${java.file.encoding}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <arg line="-host ${host.name} -port ${xmlserver.port}" />
    </java>
  </target>

</project>
