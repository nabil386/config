<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM
  
  Copyright IBM Corporation 2012,2021. All Rights Reserved.
 
  US Government Users Restricted Rights - Use, duplication or disclosure 
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->  
<!--
  This is the Ant build file for the workflow validation. It will validate workflows by schema and by semantics.

  The workflow validator targets "validateworkflows" and "validateallworkflows" will continue validating the next workflow file
  after an error has occurred.

  The "validateworkflow" target validates a single workflow.
  The "validateworkflows" target validates all workflows in the specified directory.
  The "validateallworkflows" target validates all workflows in all components.

  If "-Dvalidate.schema.only=true" is passed to the above targets, then the workflow(s) will be validated by schema only
  and the semantic validation will not be performed.

  If "-Dfail.on.error=true" is passed to the above targets then the build will exit once the first error occurs.
-->
<project name="WorkflowValidator" default="validateworkflow">

  <!--  ***************************  -->
  <!--  ***  Import Properties  ***  -->
  <!--  ***************************  -->
  <import file="${sysenv.CURAMSDEJ}/bin/app_properties.xml" />

  <!--  **************************  -->
  <!--  ***  Import Utilities  ***  -->
  <!--  **************************  -->
  <import file="${sysenv.CURAMSDEJ}/bin/app_utilities.xml" />

  <!--  *******************************  -->
  <!--  ***  XML Schema Properties  ***  -->
  <!--  *******************************  -->
  <property name="schema.file"   value="${sysenv.SERVER_DIR}/components/Workflow/xsd/Workflow.xsd"/>

  <!--  **************************  -->
  <!--  ***  Setup Class Path  ***  -->
  <!--  **************************  -->
  <path id="workflowvalidator.classpath">
    <pathelement location="${prop.file.location}"/>
    <pathelement location="${dir.project.properties}"/>
    <pathelement path="${sysenv.PRE_CLASSPATH}"/>
    <fileset dir="${base.dir}/components">
      <include name="*/lib/**/*.jar"/>
    </fileset>
    <pathelement location="${dir.bld.svr.cls}"/>
    <pathelement path="${jar.ant}"/>
    <pathelement path="${jar.coreinf}"/>
    <pathelement path="${jar.rules}"/>
    <pathelement path="${jar.appinf}"/>
    <pathelement path="${jar.appinf_internal}"/>
    <pathelement path="${jar.dom4j}"/>
    <pathelement path="${jar.jaxen}"/>
    <pathelement path="${jar.log4j}"/>
    <pathelement path="${jar.fscontext}"/>
    <pathelement path="${jar.providerutil}"/>
    <pathelement path="${jar.db2}"/>
    <pathelement path="${jar.h2}"/>
    <pathelement path="${jar.mysql-connector-java}"/>
    <pathelement path="${jar.oracle}"/>
    <pathelement path="${jar.castor}"/>
    <pathelement path="${jar.javatools}"/>
    <pathelement path="${jar.axis}"/>
    <pathelement path="${jar.commons}"/>
    <pathelement path="${jar.j2ee}"/>
    <pathelement path="${jar.application}"/>
    <pathelement path="${jar.struct}"/>
    <pathelement path="${jar.implementation}"/>
    <pathelement path="${jar.javacup}"/>
    <pathelement path="${jar.antlr}"/>
    <pathelement path="${jar.commonspool}"/>
    <pathelement path="${jar.codetable}"/>
    <pathelement path="${jar.message}"/>
    <pathelement path="${jar.events}"/>
    <pathelement path="${jar.tools}"/>
    <pathelement path="${jar.wss4j}"/>
    <pathelement path="${jar.xmlsec}"/>
    <pathelement path="${jar.guice}"/>
    <pathelement path="${jar.aopalliance}"/>
    <pathelement path="${jar.guice-assistedinject}"/>
    <pathelement path="${jar.guice-multibindings}"/>
    <pathelement path="${jar.guice-throwingproviders}"/>
    <pathelement path="${sysenv.POST_CLASSPATH}"/>
    <pathelement path="${client.dir}/build/uim"/>
    <path refid="j.cp"/>
  </path>

  <!--  ***************************************************  -->
  <!--  ***   Check workflow file name property         ***  -->
  <!--  ***************************************************  -->
  <target name="check.workflow.filename.available" unless="workflow.file">
    <fail message="The property 'workflow.file' must be set. Please use -Dworkflow.file"/>
  </target>

  <!--  ****************************************  -->
  <!--  ***   Check workflow file available  ***  -->
  <!--  ****************************************  -->
  <target name="check.workflow.file.available"
    depends="check.workflow.filename.available">

    <!-- check if the specified workflow file exists -->
    <available property="workflow.file.exists"
      file="${workflow.file}" type="file"/>

    <fail unless="workflow.file.exists"
       message="The workflow file ${workflow.file} specified does not exist."/>
  </target>

  <!--  ***************************************************  -->
  <!--  ***   Check workflows directory property        ***  -->
  <!--  ***************************************************  -->
  <target name="check.workflow.dir.property.available" unless="workflow.dir">
    <fail message="The property 'workflow.dir' must be set. Please use -Dworkflow.dir"/>
  </target>

  <!--  **********************************************  -->
  <!--  ***   Check workflows directory available  ***  -->
  <!--  **********************************************  -->
  <target name="check.workflow.dir.available"
    depends="check.workflow.dir.property.available">

    <!-- check if the specified directory of the workflows exists -->
    <available property="workflow.dir.exists"
      file="${workflow.dir}" type="dir"/>

    <fail unless="workflow.dir.exists"
      message="The workflow directory ${workflow.dir} specified does not exist."/>
  </target>

  <!--  ***************************************************  -->
  <!--  ***   Check workflow xml schema file available  ***  -->
  <!--  ***************************************************  -->
  <target name="check.workflow.schemafile.available">
    <!-- check if the specified workflow schema file exists -->
    <available property="workflow.schemafile.exists"
      file="${schema.file}" type="file"/>

    <fail unless="workflow.schemafile.exists"
       message="The workflow schema file ${schema.file} does not exist."/>
  </target>

  <!--  ******************************************************  -->
  <!--  ***  Validate workflow using workflow xml schema   ***  -->
  <!--  ******************************************************  -->
  <target name="validateworkflowbyschemaonly"
    depends="check.workflow.file.available,check.workflow.schemafile.available"
    description="Perform schema validation on a workflow definition."
    if="validate.schema.only">

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Validating ${workflow.file} by schema"/>
    </antcall>

    <xmlvalidate file="${workflow.file}" lenient="false" failonerror="true" warn="true">
      <attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
      <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
      <property
        name="http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation"
        value="${schema.file}"/>
    </xmlvalidate>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Successfully validated ${workflow.file} by schema"/>
    </antcall>
  </target>

  <!--  ************************************************************  -->
  <!--  ***  Validate  workflows using workflow xml schema ***  -->
  <!--  ************************************************************  -->
  <target name="validateworkflowsbyschemaonly"
    description="Perform schema validation on workflow files (use -Dschema.file=)"
    if="validate.schema.only">

    <antapply type="both"
      executable="${JAVA_HOME}/bin/java"
      failonerror="${fail.on.error}"
      resultproperty="validation.result">

      <!-- Java Arguments -->
      <arg value="-Xmx${java.maxmemory}" />
      <arg line="-classpath ${ant.home}/lib/ant.jar${path.separator}${ant.home}/lib/ant-launcher.jar${path.separator}${jar.tools}${path.separator}${ant.home}/lib/ant-nodeps.jar"/>
      <arg line="-Xbootclasspath/p:${jars.allxml}" />

      <arg line="-Dant.home=${ant.home}" />

      <!-- The Ant Launcher Class -->
      <arg line="org.apache.tools.ant.Main" />

      <!-- The logger class to use-->
      <arg line="-logger curam.util.tools.AntValidationLogger" />

      <arg line="-Dsysenv.CURAMSDEJ=${sysenv.CURAMSDEJ}" />
      
      <!-- This ant build file -->
      <arg line="-f ${dir.workflow.script}/app_workflowvalidator.xml" />

      <!-- The ant target to validate single rule set file -->
      <arg line="validateworkflowbyschemaonly" />

      <!-- The validate schema only Argument -->
      <arg line="-Dvalidate.schema.only=true" />

      <!-- The workflow file Argument -->
      <arg line="-Dworkflow.file" /><srcfile />


      <!-- The workflow files to be validated -->
      <fileset dir="${workflow.base.dir}">
        <patternset>
          <include name="${workflow.pattern}"/>
        </patternset>
      </fileset>

    </antapply>
    <!-- Fail the target if the validation result property has been set to 1-->
    <fail message="Validation failed">
      <condition>
        <equals arg1="${validation.result}" arg2="1" />
      </condition>
    </fail>
  </target>


  <!--  ********************************************************************  -->
  <!--  ***  Validation on a workflow file by schema and semantics ***  -->
  <!--  ********************************************************************  -->
  <target name="validateworkflowbyschemaandsemantics"
    description="fully validate a workflow by schema and semantics."
    unless="validate.schema.only">

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Performing schema and semantic validation of the workflow file ${workflow.file}"/>
    </antcall>

    <java
      classname="curam.util.workflow.validation.impl.CommandLineProcessValidator"
      classpathref="workflowvalidator.classpath"
      fork="${java.fork}"
      failonerror="true"
      maxmemory="${java.maxmemory}"
    >
      <jvmarg value="${java.jvmargs}" />
      <jvmarg value="-Xms${java.maxmemory}" />
      <jvmarg value="-Xbootclasspath/p:${jars.allxml}" />
      <sysproperty key="curam.disable.dynamic.properties"   value="true"/>
      <sysproperty key="curam.project.name" value="curam"/>
      <arg line="-workflow.file ${workflow.file}" />
    </java>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Successfully validated ${workflow.file}"/>
    </antcall>
  </target>


  <!--  *****************************************************************  -->
  <!--  ***  Validation on a workflows by schema and semantics ***  -->
  <!--  *****************************************************************  -->
  <taskdef name="antapply" classname="curam.util.tools.AntApply" classpathref="workflowvalidator.classpath" />

  <target name="validateworkflowsbyschemaandsemantics"
    description="Perform full validation on workflow files"
    unless="validate.schema.only">

    <antapply type="both"
      executable="${JAVA_HOME}/bin/java"
      failonerror="${fail.on.error}"
      resultproperty="validation.result">

      <!-- Java Arguments -->
      <arg value="-Xmx${java.maxmemory}" />
      <arg line="-classpath ${ant.home}/lib/ant.jar${path.separator}${ant.home}/lib/ant-launcher.jar${path.separator}${jar.tools}" />
      <arg line="-Xbootclasspath/p:${jars.allxml}" />

      <arg line="-Dant.home=${ant.home}" />

      <!-- The Ant Launcher Class -->
      <arg line="org.apache.tools.ant.Main" />

      <!-- The logger class to use-->
      <arg line="-logger curam.util.tools.AntValidationLogger" />

      <!-- This ant build file -->
      <arg line="-f ${dir.workflow.script}/app_workflowvalidator.xml" />

      <arg line="-Dsysenv.CURAMSDEJ=${sysenv.CURAMSDEJ}" />
      
      <!-- The ant target to validate single rule set file -->
      <arg line="validateworkflowbyschemaandsemantics" />

      <!-- The workflow file Argument -->
      <arg line="-Dworkflow.file" /><srcfile />


      <!-- The workflow files to be validated -->
      <fileset dir="${workflow.base.dir}">
        <patternset>
          <include name="${workflow.pattern}"/>
        </patternset>
      </fileset>

    </antapply>

    <!-- Fail the target if the validation result property has been set to 1-->
    <fail message="Validation failed">
      <condition>
        <equals arg1="${validation.result}" arg2="1" />
      </condition>
    </fail>
  </target>


  <!--  ***************************  -->
  <!--  ***  Validate workflow  ***  -->
  <!--  ***************************  -->
  <target name="validateworkflow"
    description="validate a workflow.">

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Version"/>
    </antcall>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Start validating the workflow"/>
    </antcall>

    <antcall target="validateworkflowbyschemaonly" inheritAll="false">
      <param name="fail.on.error" value="true"/>
    </antcall>

    <antcall target="validateworkflowbyschemaandsemantics" inheritAll="false">
      <param name="fail.on.error" value="true"/>
    </antcall>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="End validating the workflow"/>
    </antcall>
  </target>

  <!--  ************************************  -->
  <!--  ***  Validate all the workflows  ***  -->
  <!--  ************************************  -->
  <target name="validateallworkflows"
    description="validate all the workflows.">

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Start validating the workflows"/>
    </antcall>

    <antcall target="validateworkflowsbyschemaonly">
      <param name="fail.on.error" value="false"/>
      <param name="workflow.base.dir" value="${dir.base.components}" />
      <param name="workflow.pattern"  value="*/workflow/*.xml" />
    </antcall>

    <antcall target="validateworkflowsbyschemaandsemantics">
      <param name="fail.on.error" value="false"/>
      <param name="workflow.base.dir" value="${dir.base.components}" />
      <param name="workflow.pattern"  value="*/workflow/*.xml" />
    </antcall>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="End validating the workflows"/>
    </antcall>
  </target>

  <!--  *******************************************************  -->
  <!--  ***  Validate workflows in the specified directory  ***  -->
  <!--  *******************************************************  -->
  <target name="validateworkflows"
    depends="check.workflow.dir.available"
    description="validate workflows in the specified directory.">

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="Start validating the workflows in the directory ${workflow.dir}."/>
    </antcall>

    <antcall target="validateworkflowsbyschemaonly">
      <param name="fail.on.error" value="false"/>
      <param name="workflow.base.dir" value="${workflow.dir}" />
      <param name="workflow.pattern"  value="**/*.xml" />
    </antcall>

    <antcall target="validateworkflowsbyschemaandsemantics" inheritAll="false">
      <param name="fail.on.error" value="false"/>
      <param name="workflow.base.dir" value="${workflow.dir}" />
      <param name="workflow.pattern"  value="**/*.xml" />
    </antcall>

    <antcall target="dispmsg" inheritAll="false">
      <param name="prm.msg" value="End validating the workflow"/>
    </antcall>
  </target>

</project>