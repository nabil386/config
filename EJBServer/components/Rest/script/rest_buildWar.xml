<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed Materials - Property of IBM

  Copyright IBM Corporation 2015,2021. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--

  This is the ant build file for RESTToolkit.

  You can use "ant -projecthelp" to get information about the important targets in this
  build file.

-->
<project name="RESTToolkit_War" 
  xmlns:if="ant:if" 
  xmlns:unless="ant:unless">

  <import file="./rest_properties.xml" />
  <import file="${sysenv.CURAMCDEJ}/bin/build-properties.xml" />
  <import file="${sysenv.CURAMCDEJ}/bin/build-taskdefs.xml" />

  <!--To be called by the development time rest testing application or the REST ear target-->
  <target name="build.war.dir">
  
  <echo message="building the WAR"/>
  
    <delete dir="${rest.war.dir}"/>
    <mkdir dir="${rest.war.dir}"/>

    <copy todir="${rest.war.dir}">
      <fileset dir="${rest.component}/resources/common/war"/>
    </copy>

    <!--copy all the required jars into the web project lib-->
    <antcall target="copyRequiredLibs">
      <param name="copyToHere" value="${rest.war.dir}/WEB-INF/lib"/>
      <param name="vendor.equals.wlp" value="${vendor.equals.wlp}"/>
    </antcall>

    <antcall target="copyClientSource">
      <param name="copyToHere" value="${rest.war.dir}/WEB-INF/classes"/>
    </antcall>

    <!--need to move the contents of this jar into the classes dir-->
    <antcall target="explodeStructJar">
      <param name="thisJar" value="${rest.war.dir}/WEB-INF/lib/1_struct.jar"/>
      <param name="explodeTo" value="${rest.war.dir}/WEB-INF/classes"/>
    </antcall>

    <!-- Process the RestErrorMessages.properties for localisation -->
    <delete dir="${rest.bld}/errormessagetemp"/>
    <mkdir dir="${rest.bld}/errormessagetemp"/>

    <taskdef name="processerrormessagefile" classname="curam.rest.util.ProcessRestErrorMessageFile" classpath="${rest.component}/restlib/RESTToolkit.jar:${jar.commons}:${jar.tools}:${jar.coreinf}"/>

    <processerrormessagefile serverdirectory="${sysenv.SERVER_DIR}" servercomponentorder="${sysenv.SERVER_COMPONENT_ORDER}" serverlocalelist="${sysenv.SERVER_LOCALE_LIST}" tempdir="${rest.bld}/errormessagetemp"/>

    <mkdir dir="${rest.bld}/errormessagetemp/curam/rest/i18n" />

    <move todir="${rest.bld}/errormessagetemp/curam/rest/i18n" flatten="true">
      <fileset dir="${rest.bld}/errormessagetemp">
        <include name="**/*.properties"/>
      </fileset>
    </move>

    <jar destfile="${rest.war.dir}/WEB-INF/lib/RESTToolkit_properties.jar" basedir="${rest.bld}/errormessagetemp" />

    <delete dir="${rest.bld}/errormessagetemp"/>

    <!-- make a temp dir to hold the merged RestConfig.xml file and the RestConfig.properties file with the highest component order -->
    <delete dir="${rest.bld}/mergeconfigtemp"/>
    <mkdir dir="${rest.bld}/mergeconfigtemp"/>

    <!-- taskdef to merge together any RestConfig.xml files that exist, find RestConfig.properties with highest component order, and copy them to the temp dir -->
    <taskdef name="mergeconfigfiles" classname="curam.rest.util.MergeResourcesConfigFiles" classpath="${rest.component}/restlib/RESTToolkit.jar:${jar.commons}:${jar.tools}:${jar.coreinf}:${rest.war.dir}/WEB-INF/lib/RESTToolkit_properties.jar"/>
    <mergeconfigfiles directory="${sysenv.SERVER_DIR}" componentorder="${SERVER_COMPONENT_ORDER}" localelist="${SERVER_LOCALE_LIST}" tempdir="${rest.bld}/mergeconfigtemp" componentsdirectory="${dir.components}">
      <fileset dir="${dir.components}" includes="*/rest/config/ResourcesConfig.xml"/>
    </mergeconfigfiles>

    <!--copy in the merged ResourcesConfig.xml file from the temp dir-->
    <move file="${rest.bld}/mergeconfigtemp/MergedResourcesConfig.xml" tofile="${rest.war.dir}/WEB-INF/classes/curam/rest/config/ResourcesConfig.xml" />
    <!-- copy in the RestConfig.properties file from the temp dir, if it exists-->
    <move file="${rest.bld}/mergeconfigtemp/RestConfig.properties" tofile="${rest.war.dir}/WEB-INF/classes/curam/rest/config/RestConfig.properties" failonerror="false"/>
    <delete dir="${rest.bld}/mergeconfigtemp"/>

    <!--find bopi-model.xml file and copy it in-->
    <copy todir="${rest.war.dir}/WEB-INF/classes/curam/rest/config" failonerror="false" flatten="true">
      <fileset dir="${sysenv.SERVER_DIR}/build/svr/gen">
        <include name="**/bopi-model.xml"/>
      </fileset>
    </copy>

    <copy file="${sysenv.SERVER_DIR}/build/svr/gen/client/Texthelpers.xml" toFile="${rest.war.dir}/WEB-INF/classes/curam/rest/config/Texthelpers.xml" failonerror="false"/>

    <!--copy in ApplicationConfiguration.properties file-->
    <native2ascii src="${dir.src.java}" dest="${rest.war.dir}/WEB-INF/classes" encoding="${prp.encoding}">
      <include name="**/*.properties"/>
    </native2ascii>


    <condition property="enablevalidations">
      <and>
        <isset property="enable.validations"/>
        <istrue value="${enable.validations}" />
      </and>
    </condition>

    <antcall target="validatefacademethods"/>

    <!-- Include GraphQL in the Rest Toolkit -->
    <antcall target="copyGraphQLSourceAndJars" >
      <param name="copyToHere" value="${rest.war.dir}/WEB-INF/lib"/>
    </antcall>

  </target>

  <target name="validatefacademethods" if="enablevalidations">
    <taskdef name="validaterestfacades" classname="curam.rest.util.ValidateRestFacades" classpath="${rest.component}/restlib/RESTToolkit.jar:${jar.commons}:${jar.tools}:${rest.war.dir}/WEB-INF/classes:${rest.war.dir}/WEB-INF/lib/RESTToolkit_properties.jar"/>
    <validaterestfacades/>
  </target>

  <!--copy in all the required Jar files for the rest project. Most jars come prepackaged
  in the CuramCDEJ, but some are only generated during a client build, so need to call
  those client sub targets directly. Also copy in the jars packaged with the rest toolkit -->
  <target name="copyRequiredLibs">
    <condition property="wlpBuild">
      <equals arg1="${vendor.equals.wlp}" arg2="true" casesensitive="false"/>
    </condition>
    <mkdir dir="${copyToHere}"/>

    <antcall target="generateClientJars"/>

    <copy toDir="${copyToHere}">
      <fileset dir="${sysenv.CURAMCDEJ}/lib/ext/jar" includes="${rest.web.ext.lib.list}"/>
      <fileset dir="${sysenv.CURAMCDEJ}/lib/curam/jar" includes="${rest.web.lib.list}"/>
      <fileset dir="${sysenv.CLIENT_DIR}/WebContent/WEB-INF/lib" includes="text-helpers.jar"/>
      <fileset dir="${sysenv.CLIENT_DIR}/WebContent/WEB-INF/lib" includes="struts-actions.jar"/>
      <fileset dir="${rest.component}/restlib">
        <include name="RESTToolkit.jar"/>
      </fileset>
      <fileset dir="${rest.component}/restlib/dependencyLibsCore">
        <include name="*jar"/>
      </fileset>
      <fileset dir="${rest.component}/restlib/dependencyLibsExt">
        <include name="*jar"/>
      </fileset>
      <fileset dir="${sysenv.CLIENT_DIR}/WebContent/WEB-INF/lib">
        <include name="*_classes.jar"/>
        <include name="*_javasource.jar"/>
        <include name="*message_properties.jar"/>
        <include name="coreinf-ejb-interfaces.jar" unless:set="wlpBuild"/>
      </fileset>
    </copy>

    <copy toDir="${copyToHere}" flatten="true">
      <fileset dir="${sysenv.CLIENT_DIR}/components" includes="*/WebContent/WEB-INF/lib/*_struct.jar"/>
      <fileset dir="${sysenv.CLIENT_DIR}/components" includes="*/WebContent/WEB-INF/lib/*_javasource.jar"/>
    </copy>

    <!--copy struct.jar-->
    <copy file="${sysenv.SERVER_DIR}/build/jar/struct.jar" tofile="${copyToHere}/1_struct.jar"/>

    <!--generate client-config-files.jar-->
    <copy file="${rest.component}/resources/common/dummyFiles/CDEJBuildSettings.properties" todir="${rest.component}/resources/common/dummyFiles/clientConfigFiles/curam/omega3">
      <filterset>
        <filter token="localelist" value="${prp.locale.list}"/>
      </filterset>
    </copy>
    <jar destfile="${copyToHere}/client-config-files.jar" basedir="${rest.component}/resources/common/dummyFiles/clientConfigFiles" />

  </target>

  <!--generate the text-helpers.jar & the struts-actions.jar by calling build client sub targets-->
  <target name="generateClientJars">

    <!--copy message_properties.jar. In SmarterCare, there are multiple jars, one for each component, so either 
    situation needs to be catered for. SmarterCare have a task in the client build to handle this-->
    <if>
      <available file="${fil.server.messages}"/>
      <then>
        <echo message="Getting server messages from ${fil.server.messages}"/>
        <copy file="${fil.server.messages}" todir="${dir.web.inf}/lib"/>
      </then>
      <else>
        <echo message="Getting component server message jars"/>
        <ant antfile="${sysenv.CURAMCDEJ}/bin/build.xml" target="-copyMsgPropertiesJars" inheritAll="true" />
      </else>
    </if>

    <copy file="${fil.server.struct}" tofile="${dir.web.inf}/lib/1_struct.jar"/>
    <copy todir="${dir.web.inf}/lib" flatten="true">
      <fileset dir="${env.CURAM_DIR}/webclient/components" includes="*/WebContent/WEB-INF/lib/2_*_struct.jar" erroronmissingdir="false"/>
      <fileset dir="${env.CURAM_DIR}/webclient/components" includes="*/WebContent/WEB-INF/lib/*_javasource.jar" erroronmissingdir="false"/>
    </copy>

    <!-- 
      Touch the ServerAccessBeans.xml to ensure that texthelpers get generated for rest client always. 
      This has the side effect that if you run build rest followed by build client, the texthelpers will
      be generated by both builds even though there are no changes.
      Note: the beangen.marker is being created in the EJBServer\build dir and there is one in the webclient\build also.
    -->
    <touch file="${dir.server}/build/svr/gen/client/ServerAccessBeans.xml"/>
    <uptodate property="beansNotRequired" targetfile="${dir.bld}/beangen.marker">
      <srcfiles dir="${dir.server}/build/svr/gen/client" includes="*.*"/>
      <srcfiles dir="${dir.server}/components" includes="*/client/*.*"/>
    </uptodate>

    <ant antfile="${sysenv.CURAMCDEJ}/bin/build.xml" target="-generate-texthelpers" inheritAll="true" />
    <ant antfile="${sysenv.CURAMCDEJ}/bin/build.xml" target="-compile-actions" inheritAll="true" />

  </target>

  <!--compile client source files and copy into web-inf classes folder-->
  <target name="copyClientSource">

    <antcall target="compileClientJavaSource"/>

    <copy toDir="${copyToHere}">
      <fileset dir="${dir.web.inf}/classes">
        <include name="**/*.class"/>
      </fileset>
    </copy>

  </target>

  <target name="compileClientJavaSource">

    <componentorder to="components.path" coredir="${dir.core}" locales="${prp.locale.list}" componentsdir="${dir.src.components}" components="${prp.component.order}"/>

    <ant antfile="${sysenv.CURAMCDEJ}/bin/build.xml" target="-compile-javasource" inheritAll="true" />

  </target>

  <target name="explodeStructJar">
    <!-- Once we have copied all files into the ClientModule.war file, we then need to extract out the
    contents of the 1_struct.jar file. This is due to the fact we do not know how this jar may be loaded.
    It will depend on the system. Therefore, by extracting the contents and putting the class files in the
    web-inf/classes directory, the classes in this struct.jar file that may contain customized classes
    are guaranteed to take precedence. -->

    <unzip src="${thisJar}" dest="${explodeTo}"/>
    <delete file="${thisJar}"/>

  </target>

  <!-- Include GraphQL in the REST Toolkit -->
  <target name="copyGraphQLSourceAndJars">

    <delete dir="${rest.bld}/graphqltemp"/>
    <mkdir dir="${rest.bld}/graphqltemp"/>

    <!-- Copy GraphQL libraries -->
    <copy toDir="${copyToHere}">
      <fileset dir="${rest.component}/graphql_lib">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- Temp dir to hold the merged runtime_wiring.xml and merged schema.graphqls files -->
    <delete dir="${rest.bld}/mergeconfigtemp"/>
    <mkdir dir="${rest.bld}/mergeconfigtemp"/>
    
    <!-- taskdefs to merge together any runtime_wiring.xml and schema.graphqls files that exist in the server components -->
    <!-- if the same entry for wiring is defined in more than one runtime_wiring.xml, the one in the higher component order will be used. -->
     <taskdef name="mergeconfigfiles" classname="curam.graphql.infrastructure.MergeGraphQLConfigFiles" classpathref="graphql.cp"/>
     <mergeconfigfiles directory="${sysenv.SERVER_DIR}" componentorder="${SERVER_COMPONENT_ORDER}" tempdir="${rest.bld}/mergeconfigtemp" />

    <taskdef name="mergeschemafiles" classname="curam.graphql.infrastructure.MergeGraphQLSchemaFiles" classpathref="graphql.cp"/>
    <mergeschemafiles directory="${sysenv.SERVER_DIR}" componentorder="${SERVER_COMPONENT_ORDER}" tempdir="${rest.bld}/mergeconfigtemp" />

    <move file="${rest.bld}/mergeconfigtemp/runtime_wiring.yaml" tofile="${rest.war.dir}/WEB-INF/classes/curam/graphql/runtime_wiring.yaml" />
    <move file="${rest.bld}/mergeconfigtemp/schema.graphqls" tofile="${rest.war.dir}/WEB-INF/classes/curam/graphql/schema.graphqls" />

    <!-- compile all data fetcher java classes from the various server components.-->
    <foreach list="${SERVER_COMPONENT_ORDER}" param="component" target="compileGraphQLClasses" inheritall="true" />
    <antcall target="compileGraphQLClasses" >
      <param name="component" value="core" />
    </antcall>

    <delete file="${rest.war.dir}/WEB-INF/lib/graphql.jar" failonerror="false" />
    <jar destfile="${rest.war.dir}/WEB-INF/lib/graphql.jar" basedir="${rest.bld}/graphqltemp" includes="**/graphql/**"/>

    <delete dir="${rest.bld}/graphqltemp"/>
    <delete dir="${rest.bld}/mergeconfigtemp"/>
  </target>

  <target name="compileGraphQLClasses" >

    <javac
      destdir="${rest.bld}/graphqltemp"
      classpathref="graphql.cp"
      debug="${cmp.debug}"
      fork="${cmp.fork}"
      memoryMaximumSize="${cmp.maxmemory}"
      memoryInitialSize="${cmp.maxmemory}"
      nowarn="${cmp.nowarn}"
      optimize="${cmp.optimize}"
      deprecation="${cmp.deprecation}"
      verbose="${cmp.verbose}"
      includeAntRuntime="${cmp.includeAntRuntime}"
      includeJavaRuntime="${cmp.includeJavaRuntime}"
      failonerror="${cmp.failonerror}" 
      srcdir="${sysenv.SERVER_DIR}/components" >
      <include name="${component}/${dir.graphql.datafetcher.classes}/**/*.java" />
      <compilerarg value="-Xbootclasspath/p:${jars.allxml}" />
      <compilerarg value="-Xmaxwarns"/>
      <compilerarg value="${cmp.maxwarnings}"/>
      <compilerarg line="${cmp.compilerarg}"/>
    </javac>

    <unzip dest="${rest.bld}/graphqltemp">
      <fileset dir="${sysenv.SERVER_DIR}/components">
        <include name="${component}/**/*_graphql.jar"/>
      </fileset>
    </unzip>
  </target>

</project>
