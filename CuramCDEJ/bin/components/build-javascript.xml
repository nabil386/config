<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Copyright 2006-2022 Curam Software Ltd.
All rights reserved.

This software is the confidential and proprietary information of Curam
Software, Ltd. ("Confidential Information"). You shall not disclose
such Confidential Information and shall use it only in accordance with the
terms of the license agreement you entered into with Curam Software.
-->

<!-- Contains JavaScript specific scripts for unit testing, code coverage and code documentation.
     This depends on targets and definitions in the "build-component.xml" script
     which imports this script. -->
<project name="build.javascript">

  <!-- Need to use some Ant Contrib tasks. We need to load "jar-files.properties"
       to get the location of the Ant Contrib JAR file. -->
  <!--import file="../build-properties.xml"/-->
  <!--import file="../build-taskdefs.xml"/-->
  <property file="../jar-files.properties"/>
  <!--property file="JavaScriptResourceController.properties" /-->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${jar.ant.contrib}"/>

  <!-- Get path to the resources and libs. This is relative to the script file,
       NOT the project base directory. -->
  <condition property="os.windows">
    <os family="windows"/>
  </condition>
  <condition property="os.mac">
    <os family="mac" />
  </condition>
  <condition property="os.unix">
    <os family="unix" />
  </condition>

  <dirname property="our.basedir" file="${ant.file.build-javascript}"/>
  <property name="dir.resources" value="${our.basedir}/resources" />
  <property name="dir.lib" value="${our.basedir}/lib" />
  <property name="dir.intern.config" value="intern-config"/>

  <!-- Source properties. -->
  <property name="js.main.src" value="jscript/src"/>
  <property name="js.test.src" value="jscript/tests"/>
  <property name="source" value="jscript"/>
  <property name="js.source" value="${source}/src"/>
  <property name="js.source.resources" value="${source}/webapp/js-resources"/>
  <property name="js.source.int" value="${js.source}/internal"/>
  <property name="js.source.ext" value="${js.source}/external"/>
  <property name="webapp.main.src" value="jscript/webapp"/>
  <property name="webapp.test.src" value="jscript/webapp"/>

  <property file="JavaScriptTestConfig.properties" />

  <!-- Dojo properties. -->
  <property environment="sysenv."/>

  <condition property="dojo-source.home" value="${DOJO_SRC_HOME}" else="${sysenv.DEVENV_HOME}/dojo-source">
    <isset property="DOJO_SRC_HOME"/>
  </condition>
  <property name="cdej.source.home" value="${sysenv.UITOOLKIT_HOME}/cdej-source"/>
  <condition property="dir.ui.toolkit" value="${sysenv.UITOOLKIT_HOME}" else="${sysenv.UITOOLKIT}">
    <isset property="sysenv.UITOOLKIT_HOME"/>
  </condition>

  <fail unless="dojo-source.home">Property dojo-source.home must be defined and point to the directory containing Dojo source.</fail>
  <property name="node.js.home" value="${NODEJS_32_HOME}"/>
  <property name="selenium.server.home" value="${SELENIUM_HOME}"/>
  <property name="intern.home" value="${INTERN_HOME}"/>
  <property name="dir.bld" value="${selenium.server.home}" />


  <!-- Target properties. -->
  <property name="target.dir" value="target"/>
  <property name="dir.webcontent" value="target/web-content"/>
  <property name="js.base" value="${dir.webcontent}/jscript"/>
  <property name="webapp.base" value="${dir.webcontent}/webapp"/>
  <property name="webapp.main.dest" value="${webapp.base}/main"/>
  <property name="webapp.test.dest" value="${webapp.base}/test"/>
  <property name="js.dojotk.dest" value="${js.base}/dojotk"/>
  <property name="js.main.dest" value="${js.base}/src"/>
  <property name="prp.encoding" value="${file.encoding}"/>
  <property name="js.main.dest.js.properties" value="${js.main.dest}/javascript-properties"/>
  <property name="js.prop.output" value="${target.dir}/js-localization"/>
  <property name="js.prop.output.input" value="${js.prop.output}/input/current-js-list"/>
  <property name="js.prop.output.file" value="${js.prop.output.input}/curr-js-props-list.txt"/>
  <property name="dir.curam.app.module" value="curam/application"/>
  <property name="js.test.dest" value="${js.base}/test"/>
  <property name="js.test.suite" value="${js.test.dest}/test-suite.js"/>
  <property name="js.cover.dest" value="${js.base}/main_ins"/>

  <!-- intern test properties -->
  <property name="js.test.reporters" value="reporters: ['console', 'junit','lcovhtml']"/>

  <!-- Checkstyle related values. -->
  <property name="js.jar.path" value="${js.dest}/dojotk/util/shrinksafe"/>

  <!-- URLs -->
  <property name="base-url">${webapp.protocol}://${webapp.ip}:${webapp.port}/${webapp.name}</property>
  <!-- In the URL below ampersand is XML escaped as &amp; and in addition
       it is escaped with ^ so that it is passed correctly when used in windows shell later on.
       This means it will only work on Windows. -->
  <property name="test-url">${base-url}/jscript/dojotk/util/doh/runner.html?paths=test,../../test^&amp;test=test/test-suite</property>
  <property name="checkstyle-url">${base-url}/CDEJ/jscript/dojotk/util/checkstyle/checkstyleReport.html</property>

  <!-- JavaScript test coverage related values. -->
  <property name="jscoverage.home" value="${JSCOVERAGE_HOME}"/>

  <!-- JavaScript documentation related values. -->
  <!--fail unless="sysenv.JSDOC_TOOLKIT_HOME">Property JSDOC_TOOLKIT_HOME must be defined and point to the directory containing jsdoc-toolkit.</fail-->
  <property name="jsdoctk.home" value="${JSDOC_TOOLKIT_HOME}"/>
  <property name="dir.jsdoc.target" value="${target.dir}/doc"/>

  <property name="docker.selenium.version" value="latest"/>

  <target name="-check-has-javascript-source" if="os.windows">
    <condition property="no.javascript.source">
      <not>
        <and>
          <available file="${js.main.src}" />
          <resourcecount when="greater" count="0">
            <fileset dir="${js.main.src}">
              <filename name="**/*.js"/>
            </fileset>
          </resourcecount>
        </and>
      </not>
    </condition>
	 <if>
      <equals arg1="${no.javascript.source}" arg2="true"/>
      <then>
        <echo message="No JavaScript source in this project - ${basedir}" />
      </then>
    </if>
  </target>

  <!-- Check if the JavaScript source directory exists and there are any *.js files in it. -->
  <target name="-check-has-intern-config" unless="no.javascript.source">
  	<condition property="no.javascript.source.and.no.intern.config">
  	    <available file="${dir.intern.config}/intern-config.js"/>
  	</condition>
    <if>
      <not>
        <isset property="no.javascript.source.and.no.intern.config"/>
      </not>
      <then>
        <echo message="No intern-config.js in this project - ${basedir}" />
      </then>
    </if>
  </target>

  <target name="javascript" depends="-check-has-javascript-source" unless="no.javascript.source">
    <antcall target="-do-javascript" />
  </target>

  <target name="-do-javascript" depends="-setup">
    <property name="codeBase" value="main" />
    <property name="modpaths.file" value="${target.dir}/module-paths.properties" />
    <delete file="${modpaths.file}" />
    <echo file="${modpaths.file}" message=" " />

    <sequential>
      <local name="modulePaths" />
      <listModulePaths basedir="${js.main.dest}" outputPropertyName="modulePaths" />

      <var name="out" value="# Dojo module directories${line.separator}# Generated file, any changes will be overwritten!${line.separator}" />
      <for list="${modulePaths}" param="moduleName" trim="true">
        <sequential>
          <!-- write: dojo.registerModulePath(moduleName, "../../../" + moduleName); -->
          <var name="out" value="${out}@{moduleName}=../../${codeBase}/@{moduleName}${line.separator}" />
        </sequential>
      </for>

      <!-- Now write the module data to the output file. -->
      <prepend sourceData="${out}" targetFile="${modpaths.file}" />
    </sequential>
  </target>

  <!-- Setup the basic directory structure. -->
  <target name="-setup">
    <mkdir dir="${target.dir}" />
    <mkdir dir="${js.main.dest}" />
	</target>

  <target name="setup-javascript-test" description="Sets up localized resources and CDEJ External modules before running tests"
    depends="-check-has-intern-config">
	<if>
	  <isset property="no.javascript.source.and.no.intern.config"/>
	  <then>
	     <antcall target="do-setup-javascript-test-jde" />
	  </then>
	</if>
  </target>

  <target name="do-setup-javascript-test-jde"
    depends="-setup,-setupDojo,-copyGeneratedJsonResources,-copyExternalCDEJModules" unless="sysenv.UITOOLKIT_HOME">
  </target>

  <!-- Run the JavaScript tests in a browser. -->
  <target name="test-javascript" depends="-check-has-intern-config">
    <if>
	  <isset property="no.javascript.source.and.no.intern.config"/>
	  <then>
	     <antcall target="-do-test-javascript" />
	  </then>
	</if>
  </target>

  <target name="-do-test-javascript" description="Run unit tests for JavaScript."
    depends="-copyGeneratedJsonResources,-copyExternalCDEJModules, -is.docker.installed, -get.ip.address,
               -stop.and.remove.selenium.docker.container, -run.selenium.docker.container">
  	<property name="file.intern.config" value="${dir.intern.config}/intern-config.js"/>
  	<property name="file.intern.config.copy" value="${dir.intern.config}/copy-intern-config.js"/>

    <if>
      <not>
        <isset property="sysenv.UITOOLKIT_HOME"/>
      </not>
      <then>
        <antcall target="-setup"/>
        <antcall target="-setupDojo"/>
      </then>
    </if>

    <path id="basedir.path">
      <pathelement path="${basedir}" />
    </path>
    <pathconvert targetos="unix" property="basedir.safe" refid="basedir.path"/>

    <exec executable="${node.js.home}\bin\node.exe" dir="${dir.ui.toolkit}" osfamily="windows">
      <env key="PATH" value="${node.js.home}\bin;${sysenv.Path}"/>
      <env key="CURRENT_IP" value="${selenium.ip}"/>
      <env key="USE_SELENIUM_DOCKER" value="${run.against.selenium.docker}"/>
      <arg line="node_modules\gulp\bin\gulp.js intern-tests" />
      <arg line="--webRoot ${basedir.safe} " />
      <arg line="--internReportsPath ${basedir.safe}" />
    </exec>
    <exec executable="${node.js.home}/bin/node" dir="${dir.ui.toolkit}" osfamily="unix">
      <env key="PATH" value="${node.js.home}/bin:${sysenv.PATH}"/>
      <env key="CURRENT_IP" value="${selenium.ip}"/>
      <env key="USE_SELENIUM_DOCKER" value="${run.against.selenium.docker}"/>
      <arg line="node_modules/gulp/bin/gulp.js intern-tests" />
      <arg line="--webRoot ${basedir.safe} " />
      <arg line="--internReportsPath ${basedir.safe}" />
    </exec>

  	<antcall target="-stop.and.remove.selenium.docker.container"/>

  </target>

  <!--  ****************************************************  -->
  <!--  *** Check if Docker is installed on this machine ***  -->
  <!--  ****************************************************  -->
  <target name="-is.docker.installed">
    <trycatch>
        <try>
            <exec executable="docker" outputproperty="devnull">
            </exec>
            <property name="docker.installed" value="true"/>
        </try>
        <catch>
            <echo>Docker not found or is not running. Running tests against Selenium installed by NPM if this is not a Smoke Test.</echo>
        </catch>
    </trycatch>
  </target>

  <!--  *********************************************  -->
  <!--  *** Get public IP Address of this machine ***  -->
  <!--  *********************************************  -->
  <target name="-get.ip.address">
    <!-- Return the hostname depending on the OS. -->
    <if>
      <equals arg1="${os.mac}" arg2="true"/>
      <then>
        <exec executable="/usr/sbin/ipconfig" outputproperty="selenium.hostname">
          <arg value="getifaddr"/>
          <arg value="en0"/>
        </exec>
      </then>
      <elseif>
        <equals arg1="${os.unix}" arg2="true"/>
        <then>
          <exec executable="hostname" outputproperty="selenium.hostname">
            <arg line="-f"/>
          </exec>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${os.windows}" arg2="true"/>
        <then>
          <property environment="sysenv."/>
          <exec executable="cmd" outputproperty="selenium.hostname">
            <arg value="/c" />
            <arg value="hostname"/>
          </exec>
        </then>
      </elseif>
      <else>
        <echo message="Not Mac, Unix or Windows."/>
      </else>
    </if>

    <!-- Set selenium.ip to the public IP Address based on this machines hostname. -->
    <hostinfo prefix="remotehost" host="${selenium.hostname}"/>
    <property name="selenium.ip" value="${remotehost.ADDR4}"/>

  </target>

  <!--  ******************************************  -->
  <!--  *** Stop and remove Selenium Container ***  -->
  <!--  ******************************************  -->
  <target name="-stop.and.remove.selenium.docker.container" if="docker.installed">
    <echo>Stopping and removing any Selenium Container.</echo>
    <exec executable="docker" failonerror="false" outputproperty="devnull">
      <arg value="stop" />
      <arg value="SeleniumContainer" />
    </exec>

    <exec executable="docker" failonerror="false" outputproperty="devnull">
      <arg value="rm" />
      <arg value="SeleniumContainer" />
    </exec>
  </target>

  <!--  ********************************  -->
  <!--  *** Start Selenium Container ***  -->
  <!--  ********************************  -->
  <target name="-run.selenium.docker.container" if="docker.installed">
    <!-- Try to pull down latest selenium/standalone-chrome image and start Selenium Container so Intern tests can be run against Docker. -->
    <trycatch>
      <try>
          <echo>Trying to pull down latest selenium/standalone-chrome image and start Selenium Container.</echo>
          <exec executable="docker" failonerror="true" outputproperty="devnull">
            <arg value="run" />
            <arg value="-d" />
            <arg value="--name" />
            <arg value="SeleniumContainer" />
            <arg value="-p" />
            <arg value="4444:4444" />
            <arg value="--shm-size=2g" />
            <arg value="artifactory.commops.truvenhealth.com/wh-spmdevops-docker-remote/selenium/standalone-chrome:${docker.selenium.version}" />
          </exec>

          <echo>Docker Selenium Container Chrome Version:</echo>
          <exec executable="docker" failonerror="true">
            <arg value="exec" />
            <arg value="SeleniumContainer" />
            <arg value="google-chrome" />
            <arg value="-version" />
          </exec>

          <echo>Running tests against Docker.</echo>
          <waitfor maxwait="10"
            maxwaitunit="second"
            checkevery="1"
            checkeveryunit="second">
            <http url="http://${selenium.ip}:4444/wd/hub/status/"/>
          </waitfor>

          <!-- Set property run.against.selenium.docker to true so Intern tests will be run against Docker. -->
          <property name="run.against.selenium.docker" value="true"/>
      </try>
      <catch>
        <echo>Docker found but is not running. Running tests against Selenium installed by NPM if this is not a Smoke Test.</echo>
      </catch>
    </trycatch>
  </target>

  <!-- Generate a full JavaScript code documentation for internal use. -->
  <target name="javascript-doc" depends="-check-has-javascript-source" unless="no.javascript.source">
    <antcall target="-do-javascript-doc" />
  </target>

  <target name="-do-javascript-doc" depends="-setup" description="Generates documentation for JavaScript.">
		<delete dir="${dir.jsdoc.target}"/>
    <delete dir="${js.main.dest}"/>

    <mkdir dir="${dir.jsdoc.target}" />

    <antcall target="-doCopyJsFiles" />

    <!-- Hide private members in external doc. -->
    <condition property="private.arg" value="-p">
      <not>
        <isset property="copy-public-only" />
      </not>
    </condition>

	 <java jar="${jsdoctk.home}/jsrun.jar" fork="true">
      <arg value="${jsdoctk.home}/app/run.js"/>
      <arg value="${js.main.dest}"/> <!-- specifies the code directory to generate documentation for -->
      <arg value="-r"/>
      <arg value="${private.arg}"/>
      <arg value="-a"/>
      <arg value="-t=non-source/templates/jsdoc"/>
      <arg value="-d=${dir.jsdoc.target}"/>
      <arg value="-s"/> <!-- Do not output source code! -->

      <classpath>
        <pathelement location="${jsdoctk.home}/java/classes/js.jar"/>
      </classpath>
    </java>

    <antcall target="-openGeneratedDocumentation" />
  </target>

  <!-- Opens a browser displaying the generated documentation. -->
  <target name="-openGeneratedDocumentation" unless="dont-open-doc">
		<exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP, Windows 7" >
      <arg line="/C start ${dir.jsdoc.target}/index.html" />
    </exec>
  </target>

  <!-- TODO: implement - Run the JavaScript style check in a browser.
	<target name="runJsCheckstyle" depends="-setup,-setupDojo,-copyTests,-copyJs,-prepareSuite">
		<java
			classpath="${js.jar.path}/js.jar;${js.jar.path}/shrinksafe"
			fork="true"
			dir="${js.jar.path}/../checkstyle"
			classname="org.mozilla.javascript.tools.shell.Main"
		>
			<arg value="runCheckstyle.js"/>
			<arg value="dir=../../"/>
			<arg value="ignoreDirs=dojotk,decision-matrix,jscript_ins"/>
		</java>

		<exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP, Windows 7" >
      <arg line="/C start ${checkstyle-url}" />
    </exec>
  </target>
  -->

  <!-- Verify if Dojo exists in the target web-content directory to avoid expensive
       unzipping if not needed. -->
	<target name="-check-dojo-exists">
		<available file="${js.dojotk.dest}/dojo/dojo.js" property="dojo.present"/>
	</target>

  <!-- Copy Dojo into the target web-content directory. -->
	<target name="-setupDojo" depends="-check-dojo-exists" unless="dojo.present">
    <mkdir dir="${js.base}/dojotk" />
    <copy todir="${js.base}/dojotk" includeemptydirs="false" overwrite="true">
      <fileset dir="${dojo-source.home}" />
	</copy>
	</target>

  <!-- Write necessary declarations to the suite file. -->
  <target name="-prepareSuite">
    <!-- Test suite declaration. -->
    <var name="out" value="dojo.provide('test.test-suite');" />
    <!-- HACK: Add the "Coverage" button to point to a page with results. -->
    <var name="out" value="${out}var spanBtns=dojo.query('span#toggleButtons')[0];" />
    <var name="out" value="${out}var button = dojo.create('button', {type:'submit', title:'Coverage', innerHTML:'Coverage'}, spanBtns);" />
    <var name="out" value="${out}dojo.connect(button, 'onclick', function() {window.open('../../../../jscript/main_ins/jscoverage.html');});" />
    <!-- END HACK -->

    <!-- Now write the above code to the start of the suite file. -->
    <prepend sourceData="${out}" targetFile="${js.test.suite}" />
  </target>

  <!-- Copy the test files to web-content. -->
  <target name="-copyTests">
    <!-- Clean up. -->
    <delete dir="${js.test.dest}"/>

    <!-- Copy over the fresh test files. -->
    <copy todir="${js.test.dest}"
		 			includeemptydirs="false" overwrite="true">
          <fileset dir="${js.test.src}" />
	 	</copy>

    <!-- Create Dojo module definitions for available test modules. -->
    <writeModulePaths basedir="${js.test.dest}" codeBase="test" output="${js.test.suite}"/>
  </target>

  <!-- Copy the generated JS file in JSON format to the required location to enable
       the tests to run in a localized environment. -->
  <target name="-copyGeneratedJsonResources" depends="process-js-properties" unless="sysenv.UITOOLKIT_HOME">
    <!-- Clean up. -->
    <delete dir="${js.main.src}/Internal/${dir.curam.app.module}"/>

    <if>
	  <available file="${js.prop.output}" type="dir"/>
	  <then>
	    <copy todir="${js.main.src}/Internal"
          includeemptydirs="false" overwrite="false">
      <fileset dir="${js.prop.output}">
        <include name="${dir.curam.app.module}/**" />
      </fileset>
    </copy>

	<!-- Localized resources needed for unit tests need to be updated to include
	     roll up locales -->
	<replaceregexp byline="true">
      <regexp pattern="(.*)"/>
	  <substitution expression="define({ root:&#10;\1&#10;,&quot;en&quot;:true&#10;});"/>
      <fileset dir="${js.main.src}/Internal/${dir.curam.app.module}/nls">
        <include name="*.js"/>
		<include name="**/*.js"/>
      </fileset>
    </replaceregexp>
	  </then>
	</if>

  </target>

  <target name="check-js-resources">
    <condition property="js.properties.available">
	  <and>
        <available file="${basedir}/${js.source.resources}" type="dir"/>
          <resourcecount when="greater" count="0">
            <fileset dir="${basedir}/${js.source.resources}">
               <include name="*.js.properties" />
		 <include name="*.js_*.properties" />
		 <include name="**/*.js.properties" />
		 <include name="**/*.js_*.properties" />
            </fileset>
          </resourcecount>
        </and>
    </condition>
  </target>

  <target name="process-js-properties" depends="check-js-resources" if="js.properties.available">
    <delete dir="${js.main.dest.js.properties}"/>
    <mkdir dir="${js.main.dest.js.properties}"/>
    <copy todir="${js.main.dest.js.properties}" includeemptydirs="false" overwrite="true">
      <fileset dir="${js.source.resources}">
         <include name="*.js.properties" />
		 <include name="*.js_*.properties" />
		 <include name="**/*.js.properties" />
		 <include name="**/*.js_*.properties" />
      </fileset>
    </copy>

  	<!-- for each locale from setting where we want to specifiy resources that
  	     could potentially generate 404 errors. -->
  	<foreach param="file" target="create.js.locale.files">
  	  <path>
  	    <fileset dir="${js.main.dest}/javascript-properties">
  	      <filename name="**/*" />
  	  	</fileset>
  	  </path>
  	</foreach>

    <fileset id="js.properties" dir="${js.main.dest.js.properties}">
      <!-- Include only default properties, nothing else.-->
    	<include name="**/*.js.properties" />
    	<!-- Localized JS files. -->
    	<include name="**/*.js_*.properties" />
    </fileset>

    <!-- Ouput list of JavaScript property file to text file which will be input
         for JSON generator -->
    <pathconvert pathsep="${line.separator}" property="js.props.file.list"
      refid="js.properties"/>
    <echo file="${js.prop.output.file}">${js.props.file.list}</echo>

    <processJSProperties encoding="${prp.encoding}"
          dir="${js.prop.output.input}"
          jsBundleDir="${js.prop.output}"
          defaultModuleName="${dir.curam.app.module}"/>
  </target>

	<!-- Creates a localized resource for locales that could result in 404 errors.
	     This is essentially the reverse of the locale falllback mechanism -->
	<!--For Exaample: If the base resource is foo.js.properties and the locales of
	    the resources we wnat to generate is en_GB, en_US, then the following
	    happens
	    (1) foo.js.properties copied to foo.js_en_US.properties and
	        foo.js_en_GB.properties
	    (2) They are put in the relevant place for processing.
	 -->
	<target name="create.js.locale.files" unless="sysenv.UITOOLKIT_HOME">
		<propertyregex property="js.file.name"
		      					              input="${file}"
		      					              regexp="(\w*).js.properties"
		      					              select="\1"
		      					              casesensitive="false" />
		 <for list="${js.resources.backfill.locale.list}" delimiter="," param = "val">
		   <sequential>
			   <touch file="${js.main.dest.js.properties}/default/${js.file.name}.js_@{val}.properties"/>
				 <concat destfile="${js.main.dest.js.properties}/default/${js.file.name}.js_@{val}.properties">
				   <filelist dir="${js.main.dest.js.properties}/default" files="${js.file.name}.js.properties"/>
				 </concat>
			</sequential>
		</for>
	</target>

  <target name="-copyExternalCDEJModules" unless="sysenv.UITOOLKIT_HOME">
    <if>
	  <available file="${js.main.src}/external" type="dir"/>
	  <then>
	      <copy todir="${js.main.src}/internal">
            <fileset dir="${js.main.src}/external">
              <include name="**/*.js" />
            </fileset>
      </copy>
	  </then>
	</if>
  </target>

  <target name="deleteCDEJExtModule">
	<delete includeemptydirs="true">
	  <fileset dir="${js.main.src}" includes="${extCDEJModule}"/>
	</delete>
	<delete includeemptydirs="true">
      <fileset dir="${js.main.src}"  >
        <and>
          <size value="0"/>
          <type type="dir"/>
        </and>
      </fileset>
    </delete>
  </target>

  <!-- Copy the webapp directories to web-content. -->
  <target name="-copyWebapp">
    <!-- Clean up. -->
    <delete dir="${webapp.main.dest}"/>
    <delete dir="${webapp.test.dest}"/>

    <!-- Copy over the fresh directories. -->
    <copy todir="${webapp.main.dest}"
		 			overwrite="true">
          <fileset dir="${webapp.main.src}" />
	 	</copy>

    <copy todir="${webapp.test.dest}"
		 			overwrite="true">
          <fileset dir="${webapp.test.src}" />
	 	</copy>

    <!-- Create Dojo module definitions for available test modules. -->
    <writeModulePaths basedir="${js.test.dest}" codeBase="test" output="${js.test.suite}"/>
	</target>

  <!-- Copy the code to be tested to web-content. -->
  <target name="-copyJs">
    <copyJs withCoverage="false" />
	</target>

  <!-- Copy the code to be tested with coverage to web-content. -->
	<target name="-copyJsCoverage">
    <copyJs withCoverage="true" />
	</target>

  <!-- Does the actual raw copy of the code files from the default location.
       This target can be easily overriden in project script to cover code placement
       strategies that differ from the default. -->
  <target name="-doCopyJsFiles">
    <copy todir="${js.main.dest}" includeemptydirs="false">
      <fileset dir="${js.main.src}">
        <!-- Include all files,except the zip files. -->
        <exclude name="*.zip"/>
        <exclude name="*.profile.js"/>
      </fileset>
    </copy>
  </target>

  <target name="process-js-props"
          description="Process JavaScript property files for localization"
          depends="-doCopyJsFiles">
    <antcall target="-process-js-properties" />
  </target>

  <!--===================-->
  <!-- MACRO definitions -->
  <!--===================-->

  <!-- Writes the sourceData {String} to the beginning of the targetFile. -->
  <macrodef name="prepend">
    <attribute name="sourceData" />
    <attribute name="targetFile" />

    <sequential>
      <local name="existingOutput" />
      <loadfile property="existingOutput" srcFile="@{targetFile}" />
      <echo file="@{targetFile}" append="false">@{sourceData}</echo>
      <echo file="@{targetFile}" append="true">${existingOutput}</echo>
    </sequential>
  </macrodef>

  <!-- Lists the direct subdirectories of @basedir and places the resulting
       comma-separated list in $outputPropertyName -->
  <macrodef name="listModulePaths">
    <attribute name="basedir"/>
    <attribute name="outputPropertyName" />

    <sequential>
      <var name="out" />
      <for param="moduledir" trim="true">
        <path>
          <dirset dir="@{basedir}">
            <include name="*"/>
          </dirset>
        </path>
        <sequential>
          <!-- get the first path segment of @{moduledir} -> moduleName -->
          <local name="moduleName"/>
          <propertyregex property="moduleName" input="@{moduledir}"
            regexp=".*\\(.*)" select="\1"/>
          <var name="out" value="${out}${moduleName}," />
        </sequential>
      </for>

      <property name="@{outputPropertyName}" value="${out}" />
    </sequential>
  </macrodef>

  <!-- Loops through direct subdirectories of specified basedir and creates
       corresponding module registration code. That is then prepended
       to the specified output file contents. -->
  <macrodef name="writeModulePaths">
    <attribute name="basedir"/>
    <attribute name="codeBase"/>
    <attribute name="output"/>

    <sequential>
      <local name="modulePaths" />
      <listModulePaths basedir="@{basedir}" outputPropertyName="modulePaths" />

      <var name="out" />
      <for list="${modulePaths}" param="moduleName" trim="true">
        <sequential>
          <!-- write: dojo.registerModulePath(moduleName, "../../../" + moduleName); -->
          <var name="out" value="${out}dojo.registerModulePath('@{moduleName}', '../../@{codeBase}/@{moduleName}');" />
        </sequential>
      </for>

      <!-- Now write the module registration code to the start of the output file. -->
      <prepend sourceData="${out}" targetFile="@{output}" />
    </sequential>
  </macrodef>

  <!-- Loads all the source files into the suite. This ensures they are included
       in coverage report even if none of the tests target them. -->
  <macrodef name="loadAllFilesIntoSuite">
    <attribute name="basedir" />

    <sequential>
      <var name="out" value="" />

      <for param="jsfilepath" trim="true">
        <!-- Select all *.js files in the source directory. -->
        <path>
          <fileset dir="@{basedir}">
            <include name="**/*.js"/>
            <!-- Maintain a list of exclusions for modules that are currently not testable
                 and are causing the other tests not to run at all. -->
            <!-- FIXME: make the modules testable! -->
            <exclude name="DomainValidationMessages_en.js" />
            <exclude name="DomainValidationMessages_en_GB.js" />
            <exclude name="DomainValidationMessages_en_US.js" />
            <exclude name="curam/widget/PopupPage.js" />
            <exclude name="curam/widget/DivButton.js" />
            <exclude name="curam/widget/PopupWidget.js" />
            <exclude name="curam/widget/MatrixMenuItem.js" />
            <exclude name="curam/widget/MatrixPopupMenu.js" />
            <exclude name="curam/matrix/**" />
            <exclude name="curam/application/**" />
            <exclude name="curam/ModalDialog.js" />
            <exclude name="curam/Container.js" />
            <exclude name="curam/Matrix.js" />
            <exclude name="curam/decisionmatrixbase.js" />
            <exclude name="curam/ModalUIMController.js" />
            <exclude name="curam/dateSelectorUtil.js" />
            <exclude name="date-formatting.js" />
            <exclude name="decision-matrix-popup.js" />
            <exclude name="dom.js" />
            <exclude name="domain-validations.js" />
            <exclude name="ganttHtml.js" />
            <exclude name="popup-text.js" />
            <exclude name="slider.js" />
            <exclude name="svg-common.js" />
            <exclude name="svgcheck.js" />
            <exclude name="text-wrap.js" />
            <exclude name="tree-node.js" />
            <exclude name="tree.js" />
            <exclude name="wizard.js" />
            <exclude name="wizardFrameset.js" />
            <exclude name="workflow.js" />
            <!-- Also exclude build profiles. -->
            <exclude name="**/*.profile.js" />
          </fileset>
        </path>
        <sequential>
          <local name="package"/>
          <!-- Remove the leading base directory part. -->
          <property name="package" basedir="@{basedir}" relative="true" value="@{jsfilepath}"/>
          <!-- Remove file name extension. -->
          <propertyregex property="package" input="${package}" override="true"
            regexp="(.*)\.js" replace="\1"/>
          <!-- Replace slashes with dots. -->
          <propertyregex property="package" input="${package}" override="true"
            global="true" regexp="\\" replace="."/>
          <!-- write to the output variable -->
          <var name="out" value="${out}dojo.require('${package}', true);" />
        </sequential>
      </for>

      <!-- Now write the above code to the start of the suite file. -->
      <prepend sourceData="${out}" targetFile="${js.test.suite}" />
    </sequential>
  </macrodef>

  <!-- Copies the JavaScript source to web-content and writes corresponding module definitions.
       In addition it instruments the source for code coverage statistics if required. -->
  <macrodef name="copyJs">
    <attribute name="withCoverage" />

    <sequential>
      <antcall target="-doCopyJsFiles" />
      <if>
        <equals arg1="@{withCoverage}" arg2="true"/>
        <then>
          <!-- Coverage required - instrument the sources
               and write coverage specific module definitions. -->
          <sequential>
            <delete file="${js.dest}/dojotk/util/checkstyle/checkstyleData.js"/>

            <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP, Windows 7">
              <arg line="/C ${jscoverage.home}/jscoverage.exe ${js.base}/main ${js.base}/main_ins" />
            </exec>

            <!-- Copy over the resource bundles again as they get corrupted
                 by the instrumentation process above. -->
            <copy todir="${js.base}/main_ins"
                  includeemptydirs="false" overwrite="true">
              <fileset dir="${js.prop.output}">
                <include name="${dir.curam.app.module}/**" />
              </fileset>
            </copy>

            <loadAllFilesIntoSuite basedir="${js.main.dest}" />

            <writeModulePaths basedir="${js.cover.dest}" codeBase="main_ins" output="${js.test.suite}"/>
          </sequential>
        </then>
        <else>
          <!-- NO coverage required - just write module definitions for copied sources. -->
          <writeModulePaths basedir="${js.main.dest}" codeBase="main" output="${js.test.suite}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

</project>
