<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Licensed Materials - Property of IBM

PID 5725-H26

Copyright IBM Corporation 2006,2020. All rights reserved.

US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<!--
Runs Checkstyle on a component.

In general, all classes will be checked (both "main" and "test"). However,
there are bugs in Checkstyle that make it impossible to check some classes,
so the "checkstyle.excludes" property can be set in a project to identify
the patterns (relative to the "src" folder) of classes that need to be
excluded for that reason.
-->
<project name="build.checkstyle">
  <!--
  This script is run in the context of "build-component.xml" and properties
  defined there will be visible here. Also, these properties are used in the
  "build-eclipse.xml" script when generating the Checkstyle configuration.
  -->
  <property name="dir.rpt.checkstyle" value="${dir.target}/checkstyle-report"/>
  <property name="dir.cfg.checkstyle"
            value="${dir.devenv}/eclipseenv/checkstyle"/>

  <!--
  Define the Checkstyle classpath and Ant task.
  -->
  <path id="cp.checkstyle">
    <fileset dir="${CHECKSTYLE_HOME}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!--
  Define the path to jars ascoiated with xml transformation
  -->
  <path id="transform.cp">
    <pathelement location="${jar.xalan}"/>
    <pathelement location="${jar.serializer}"/>
  </path>

  <taskdef name="checkstyle"
           classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
           classpathref="cp.checkstyle"/>

  <!--
  Runs Checkstyle to validate the source code against the coding standards.
  Due to a bug/feature in Checkstyle, failures may occur if the compiled
  class files for exception types are not on the classpath. We assume that
  the exception types will be in the "main" code, so we only depend on the
  "compile" target and not on the "test-compile" target. This assumption may
  not always hold, so be prepared to modify this if there are problems.
  -->
  <target name="checkstyle"
          depends="compile, test-compile, -run-checkstyle, -fail-checkstyle"/>

  <target name="-run-checkstyle" if="has.any.java">

   <taskdef name="transform" 
    			  classname="curam.util.common.ant.Transform">
     <classpath>
       <pathelement location="${jar.jde.commons}"/>
     </classpath>
   </taskdef>
    <mkdir dir="${dir.rpt.checkstyle}/html"/>

    <checkstyle config="${dir.jde}/BuilderScripts/checkstyle_client_checks.xml"
        failureproperty="checkstyle.failed" failonviolation="false"
        classpath="${cp.compile};${cp.compile.test};${dir.cls.main}">
      <formatter tofile="${dir.rpt.checkstyle}/report-long-paths.xml"
                 type="xml"/>
      <formatter type="plain"/>
      <fileset dir="${dir.src}" excludes="${checkstyle.excludes}">
        <include name="**/*.java"/>
      </fileset>
    </checkstyle>

    <!--
    The Checkstyle report stores the absolute path to each file. When the
    report is generated, a HTML file with this path is created relative to the
    HTML report's base directory (each ":" is replaced with "_"). For example:

      "C:\JDE\client\components\my-project\src\main\java\MyClass.java"

    will have a corresponding report file:

      "C:\JDE\client\components\my-project\target\checkstyle-report\html\.\files\C_\JDE\client\components\my-project\src\main\java\MyClass.java.html"

    For some projects and source files, the path to the file can be too long
    for Windows to handle. Therefore, this first pass is used to truncate the
    file names in the report making them relative to the project's base
    directory. For example:

      "C:\JDE\client\components\my-project\target\checkstyle-report\html\.\files\src\main\java\MyClass.java.html"
    -->
    <xslt in="${dir.rpt.checkstyle}/report-long-paths.xml"
          out="${dir.rpt.checkstyle}/report.xml"
          style="${dir.bld.scripts}/style-short-paths.xsl">
      <param name="project.name" expression="${ant.project.name}"/>
    </xslt>
    <!-- TODO: This is not really required for ConMan builds. [DG] -->
    <!-- Generate the pretty HTML report. -->
    <transform in="${dir.rpt.checkstyle}/report.xml"
         out="${dir.rpt.checkstyle}/html/report.html"
         style="${CHECKSTYLE_HOME}/contrib/checkstyle-frames.xsl"
         classpathref="transform.cp"/>

    <!-- Extract some summary values from the XML report. -->
    <xslt in="${dir.rpt.checkstyle}/report.xml"
          out="${dir.rpt.checkstyle}/report.properties"
          style="${dir.bld.scripts}/style-summary.xsl"/>

  </target>

  <target name="-fail-checkstyle" unless="no.checkstyle.failure.on.error">
    <fail message="Checkstyle failed. See Checkstyle report."
          if="checkstyle.failed"/>
  </target>

</project>
