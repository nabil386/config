<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Copyright 2002-2010 Curam Software Ltd.
All rights reserved.

This software is the confidential and proprietary information of Interactive
Technology Design, Ltd. ("Confidential Information"). You shall not disclose
such Confidential Information and shall use it only in accordance with the
terms of the license agreement you entered into with Curam Software.
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!--
  NOTE: This stylesheet may be supplied with either an XIM document with a
  "PAGE" root element, or several XIM documents whose "PAGE" elements are
  within "chunk" elements that have a root "chunks" element. Keys and XPath
  expressions should be written to be compatible with both.
  -->

  <xsl:output method="xml" />

  <xsl:param name="package-prefix" />

  <xsl:variable name="curam-config"
      select="document('project:WebContent/WEB-INF/curam-config.xml', /)
              /APP_CONFIG"/>

  <xsl:variable name="error-page" select="$curam-config/ERROR_PAGE/@PAGE_ID"/>

  <xsl:template match="/">
    <chunks>
      <xsl:apply-templates select="chunks/chunk/PAGE | PAGE" />
    </chunks>
  </xsl:template>

  <xsl:template match="PAGE">
    <xsl:if test="ACTION">
      <chunk type="action" name="{@PAGE_ID}">
        <xsl:apply-templates select="ACTION" />
      </chunk>
    </xsl:if>
  </xsl:template>

  <xsl:template match="ACTION">
    <xsl:variable name="default-action-control"
                  select="ACTION_CONTROL[@DEFAULT = 'true']" />

    <xsl:variable name="has-confirmation">
      <xsl:choose>
        <xsl:when test="../INFO/HAS_CONFIRMATION_PAGE">req</xsl:when>
        <xsl:otherwise>null</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="default-action">
      <xsl:choose>
        <xsl:when test="$default-action-control">
          <xsl:value-of select="$default-action-control/@ACTION_IDENTIFIER"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of
            select="ACTION_CONTROL[@ACTION_TYPE = 'SUBMIT'
                                   or @ACTION_TYPE = 'SUBMIT_AND_DISMISS']
                                  [position() = 1]/@ACTION_IDENTIFIER"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:text>package </xsl:text>
    <xsl:value-of select="$package-prefix"/>
    <xsl:text>.actions;

/**
 * Generated by Curam CDEJ Code Generator
 * Generator Copyright 1999-2010 Curam Software Ltd.
 */

import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import javax.servlet.http.HttpServletRequest;
import curam.util.client.control.CuramAction;
import curam.util.common.JDEException;
import curam.omega3.request.RequestHandler;
import curam.omega3.request.SimpleRequestHandler;
import curam.omega3.texthelper.TextHelper;
import curam.omega3.taglib.ScreenContext;

</xsl:text>
    <xsl:apply-templates select="SERVER_INTERFACE" mode="imports"/>
<xsl:text>
public class </xsl:text><xsl:value-of select="../@PAGE_ID"/>
<xsl:text>Action extends CuramAction {
  public ActionForward subExecute(ActionMapping map, HttpServletRequest req)
         throws Exception {
    ActionForward af;
    String action;
    RequestHandler rh = null;
    StringBuffer path = null;

    try {
</xsl:text>
    <xsl:apply-templates select="SERVER_INTERFACE" mode="definitions"/>
    <xsl:call-template name="bopi-array"/>
<xsl:text>
      rh = init(req,true);
      action = getAction(rh);

      if (action == null) {
        action = "</xsl:text>
        <xsl:value-of select="$default-action"/>
        <xsl:text>";</xsl:text>
    <xsl:if test="../INFO/HAS_RULES_SIMULATION">
      <xsl:apply-templates
        select="ancestor::PAGE/DISPLAY
                     /descendant::WIDGET[@TYPE = 'RULES_SIMULATION_EDITOR']"
        mode="rules-sim-loop-back"/>
    </xsl:if>
<xsl:text>
      }
      if (action.endsWith("SUM")) {
        af = getSummaryAction(action, map);
      } else {
        af = map.findForward(action);
      }
      if (af != null) {
        path = getPath(af);
        if (path.indexOf("/servlet") == 0) {
          path = path.insert(0, "/..");
        }
      }
</xsl:text>
    <xsl:text>      initBOPIs(ths, req);&#xa;</xsl:text>
    <xsl:for-each select="BEAN_SET_FIELD">
     <xsl:text>      setConstantField(</xsl:text>
     <xsl:value-of select="@TARGET_BEAN"/><xsl:text>_Obj, "</xsl:text>
     <xsl:value-of select="@TARGET_FIELD"/><xsl:text>", "</xsl:text>
     <xsl:value-of select="@VALUE"/><xsl:text>");&#xa;</xsl:text>
   </xsl:for-each>
   <xsl:text>      invokeBOPIs(ths, rh);&#xa;</xsl:text>
    <xsl:apply-templates select="INFORMATIONAL" mode="from-list-field"/>
    <xsl:text>      </xsl:text>
    <xsl:apply-templates
        select="ACTION_CONTROL[@ACTION_TYPE='SUBMIT'
                               or @ACTION_TYPE='SUBMIT_AND_DISMISS']">
      <xsl:with-param name="has-confirmation" select="$has-confirmation"/>
    </xsl:apply-templates>
<xsl:text>if (!action.equals(LOOP)) {
        badAction(action);
      }</xsl:text>
    <xsl:apply-templates select="$curam-config/ADMIN/*" mode="admin">
      <xsl:with-param name="page-id" select="../@PAGE_ID"/>
    </xsl:apply-templates>
    <xsl:text>
      addFI(path, rh, </xsl:text>
     <xsl:value-of select="$has-confirmation"/>
     <xsl:text>);
      addContextParam(path, rh, </xsl:text>
     <xsl:value-of select="$has-confirmation"/>
     <xsl:text>, true); </xsl:text>
  <xsl:text>
      af = getAF(af, path);
    } catch (JDEException e) {
      af = error(e, req, map);
      if (af == null) {
        af = map.findForward(FAIL);
      }
      if (af != null) {
        path = getPath(af);
        if (path.indexOf("/servlet") == 0) {
          path = path.insert(0, "/..");
        }
        if (rh != null) {
          addFI(path, rh, </xsl:text>
            <xsl:value-of select="$has-confirmation"/>
          <xsl:text>);
          addContextParam(path, rh, </xsl:text>
          <xsl:value-of select="$has-confirmation"/>
          <xsl:text>, false);
        } else {
          final ScreenContext sc = new ScreenContext();
          final String[] values = req.getParameterValues(ScreenContext.CTX_PARAM);
          if (values != null &amp;&amp; values.length &gt; 0) {
            sc.set(values[0]);
          } else {
            sc.clearLayout();
            sc.addContextBits(ScreenContext.TAB);
          }
          ScreenContext.updateContext(path, sc.getValue(), false);
        }
        af = getAF(af, path);
      } 
    }
    return af;
  }
}</xsl:text>
  </xsl:template>

  <xsl:template match="SERVER_INTERFACE" mode="imports">
    <xsl:value-of select="concat('import ', $package-prefix, '.interfaces.',
                                 @CLASS, 'Pkg.', @CLASS, '_', @OPERATION,
                                 '_TH;&#xa;')" />
  </xsl:template>

  <xsl:template match="SERVER_INTERFACE" mode="definitions">
    <xsl:variable name="th-name"
                  select="concat(@CLASS, '_', @OPERATION, '_TH')" />
    <xsl:variable name="th-obj" select="concat(@NAME, '_Obj')" />

    <xsl:text>      TextHelper </xsl:text>
    <xsl:value-of select="$th-obj"/>
    <xsl:text> = new </xsl:text>
    <xsl:value-of select="$th-name"/>
    <xsl:text>();&#xa;</xsl:text>

    <xsl:if test="@ACTION_ID_PROPERTY">
      <xsl:text>      addActIdProp("</xsl:text>
      <xsl:value-of select="@NAME"/>
      <xsl:text>", "</xsl:text>
      <xsl:value-of select="@ACTION_ID_PROPERTY"/>
      <xsl:text>");&#xa;</xsl:text>
    </xsl:if>
  </xsl:template>

  <!--
  Create an array containing an array for each BOPI that holds the instance
  and the instance name. There is no need to try to avoid the trailing comma!
  -->
  <xsl:template name="bopi-array">
    <xsl:text>      Object[][] ths = { </xsl:text>
    <xsl:for-each select="SERVER_INTERFACE">
      <xsl:text>{ </xsl:text>
      <xsl:value-of select="@NAME"/>
      <xsl:text>_Obj, "</xsl:text>
      <xsl:value-of select="@NAME"/>
      <xsl:text>" }, </xsl:text>
    </xsl:for-each>
    <xsl:text>};&#xa;</xsl:text>
  </xsl:template>

  <xsl:template match="SERVER_INTERFACE" mode="request-forwarding">
    <xsl:text>        req.setAttribute("</xsl:text>
    <xsl:value-of select="@NAME"/>
    <xsl:text>", </xsl:text>
    <xsl:value-of select="@NAME"/>
    <xsl:text>_Obj);&#xa;</xsl:text>
  </xsl:template>

  <xsl:template match="ACTION_CONTROL">
    <xsl:param name="has-confirmation"/>
    <xsl:text>if (stripSuffix(action).equals("</xsl:text>
    <xsl:value-of select="@ACTION_IDENTIFIER"/>
    <xsl:text>")) {&#xa;</xsl:text>
    <xsl:choose>
      <xsl:when test="@ACTION_TYPE = 'SUBMIT_AND_DISMISS'">
        <xsl:apply-templates select="LINK/LINK_PARAMETER">
          <xsl:with-param name="has-confirmation" select="$has-confirmation"/>
        </xsl:apply-templates>
        <xsl:text>        appendToPath(path, "o3submitanddismiss", "true");&#xa;</xsl:text>
      </xsl:when>
      <!--
      When there is no LINK, it means use the return page URL.
      -->
      <xsl:when test="not(LINK)">
        <xsl:text>        af = getRPUActionForward(rh, map);&#xa;
        path = getPath(af);&#xa;</xsl:text>
      </xsl:when>
      <!--
      When the page ID on the link is the same as that of the current page
      this indicates "Save and New" style functionality. No link parameters
      should be specified. We simply add the original page parameters again
      that are added has hidden fields for all pages that have an "action"
      phase. -->
      <xsl:when test="LINK/@PAGE_ID = ancestor::PAGE/@PAGE_ID">
        <xsl:choose>
          <xsl:when test="not(LINK/LINK_PARAMETER)">
            <xsl:apply-templates
              select="ancestor::PAGE/DISPLAY
                       /HIDDEN_FIELD[@PARAMETER_NAME and not(@TARGET_BEAN)]" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="LINK/LINK_PARAMETER"
                                 mode="save-and-new"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>        addRPU(path, rh, null);&#xa;</xsl:text>
      </xsl:when>

      <!--
      When the pageID on the link is THIS, it means to forward the current
      request.
      -->
      <xsl:when test="LINK/@PAGE_ID = 'THIS'">
        <xsl:apply-templates select="ancestor::PAGE/ACTION/SERVER_INTERFACE"
                             mode="request-forwarding"/>
      </xsl:when>

      <!-- We have a standard submit button that needs to go to another page -->
      <xsl:otherwise>
        <xsl:apply-templates select="LINK/LINK_PARAMETER">
          <xsl:with-param name="has-confirmation" select="$has-confirmation"/>
        </xsl:apply-templates>
        <xsl:choose>
          <xsl:when test="LINK/@SAVE_LINK='true'">
             <xsl:text>        addCPU(path, rh, </xsl:text>
             <xsl:value-of select="$has-confirmation"/>
             <xsl:text>);&#xa;</xsl:text>
          </xsl:when>
          <xsl:when test="LINK/@SAVE_LINK='false'">
            <xsl:text>        addRPU(path, rh, </xsl:text>
            <xsl:value-of select="$has-confirmation"/>
            <xsl:text>);&#xa;</xsl:text>
          </xsl:when>
        </xsl:choose>

      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>      } else </xsl:text>
  </xsl:template>

  <xsl:template match="LINK_PARAMETER">
    <xsl:param name="has-confirmation"/>

    <xsl:choose>
      <xsl:when test="$has-confirmation='null'">
        <xsl:text>        appendToPath(path, "</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>        req.setAttribute(SimpleRequestHandler.ATTRIBUTE_PREFIX + "</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:value-of select="@NAME"/>
    <xsl:text>", </xsl:text>
    <xsl:apply-templates select="." mode="select-values"/>
  </xsl:template>

  <xsl:template match="LINK_PARAMETER" mode="select-values">
    <xsl:variable name="sb" select="@SOURCE_BEAN" />
    <xsl:variable name="sf" select="@SOURCE_FIELD" />
    <xsl:choose>
      <xsl:when test="@PARAMETER_NAME">
        <xsl:text>getParam("</xsl:text>
        <xsl:value-of select="@PARAMETER_NAME"/>
        <xsl:text>", rh));&#xa;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <!--
          Specific handling of tabbed string parameters from the multi-select
          checkbox widget.
          -->
          <xsl:when test="ancestor::PAGE/INFO/HAS_MULTI_SELECT
                          and ancestor::PAGE/descendant::WIDGET_PARAMETER
                                               [@NAME = 'MULTI_SELECT_TARGET'
                                                and @TARGET_BEAN = $sb
                                                and @TARGET_FIELD = $sf]">
            <xsl:value-of select="@SOURCE_BEAN"/>
            <xsl:text>_Obj.getFieldValue("</xsl:text>
            <xsl:value-of select="@SOURCE_FIELD"/>
            <xsl:text>"));&#xa;</xsl:text>
          </xsl:when>
          <!-- The value is sourced from Constants.properties. -->
          <xsl:when test="not(@SOURCE_BEAN) and @VALUE">
            <xsl:text>"</xsl:text>
            <xsl:value-of select="@VALUE"/>
            <xsl:text>");&#xa;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="@SOURCE_BEAN"/>
            <xsl:text>_Obj.getFieldValue("</xsl:text>
            <xsl:value-of select="@SOURCE_FIELD"/>
            <xsl:text>"));&#xa;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="LINK_PARAMETER" mode="save-and-new">
    <xsl:variable name="parameter-name" select="@NAME"/>

    <xsl:choose>
      <xsl:when test="@SOURCE_BEAN and @SOURCE_FIELD">
        <xsl:text>        appendToPath(path, "</xsl:text>
        <xsl:value-of select="@NAME"/>
        <xsl:text>", </xsl:text>
        <xsl:value-of select="@SOURCE_BEAN"/>
        <xsl:text>_Obj.getFieldValue("</xsl:text>
        <xsl:value-of select="@SOURCE_FIELD"/>
        <xsl:text>"));&#xa;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="ancestor::PAGE/DISPLAY/HIDDEN_FIELD
               [@PARAMETER_NAME = $parameter-name and not(@TARGET_BEAN)]" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="HIDDEN_FIELD">
    <xsl:text>        appendToPath(path, "</xsl:text>
    <xsl:value-of select="@PARAMETER_NAME"/>
    <xsl:text>", </xsl:text>
    <xsl:text>getParam("</xsl:text>
    <xsl:value-of select="@PARAMETER_NAME"/>
    <xsl:text>", rh));&#xa;</xsl:text>
  </xsl:template>

  <xsl:template match="INFORMATIONAL" mode="from-list-field">
    <xsl:text>      info(</xsl:text>
    <xsl:value-of select="@SOURCE_BEAN"/><xsl:text>_Obj, "</xsl:text>
    <xsl:value-of select="@SOURCE_BEAN"/><xsl:text>", "</xsl:text>
    <xsl:value-of select="@SOURCE_FIELD"/>
    <xsl:text>", req);&#xa;</xsl:text>
  </xsl:template>

  <xsl:template match="WIDGET" mode="rules-sim-loop-back">
    <xsl:text>
        if (hasRulesSimulationWidget(rh)) {
          return map.findForward(LOOP);
        }</xsl:text>
  </xsl:template>

  <!--
  Handle contents of "ADMIN" element in "curam-config.xml". This may indicate
  that the code-table and/or resource caches should be cleared for this page.
  This is done to support environments where JMS messaging is not supported.
  When JMS is available, these calls will have no effect.
  -->
  <xsl:template match="CODETABLE_UPDATE" mode="admin">
    <xsl:param name="page-id" select="''"/>

    <xsl:if test="@PAGE_ID = $page-id">
      <xsl:text>      clearCodeTableCache();&#xa;</xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template match="RESOURCE_UPDATE" mode="admin">
    <xsl:param name="page-id" select="''"/>

    <xsl:if test="@PAGE_ID = $page-id">
      <xsl:text>      clearResourceCache();&#xa;</xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template match="TAB_CONFIG_UPDATE" mode="admin">
    <xsl:param name="page-id" select="''"/>

    <xsl:if test="@PAGE_ID = $page-id">
      <xsl:text>      clearTabConfigCache();&#xa;</xsl:text>
    </xsl:if>
  </xsl:template>
  
</xsl:stylesheet>
